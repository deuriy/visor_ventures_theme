"use strict";
(()=>{var __create=Object.create;var __defProp=Object.defineProperty;var __getOwnPropDesc=Object.getOwnPropertyDescriptor;var __getOwnPropNames=Object.getOwnPropertyNames;var __getProtoOf=Object.getPrototypeOf;var __hasOwnProp=Object.prototype.hasOwnProperty;var __markAsModule=target=>__defProp(target,"__esModule",{value:true});var __commonJS=(cb,mod)=>function __require(){return mod||(0,cb[Object.keys(cb)[0]])((mod={exports:{}}).exports,mod),mod.exports};var __reExport=(target,module,desc)=>{if(module&&typeof module==="object"||typeof module==="function"){for(let key of __getOwnPropNames(module))if(!__hasOwnProp.call(target,key)&&key!=="default")__defProp(target,key,{get:()=>module[key],enumerable:!(desc=__getOwnPropDesc(module,key))||desc.enumerable})}return target};var __toModule=module=>{return __reExport(__markAsModule(__defProp(module!=null?__create(__getProtoOf(module)):{},"default",module&&module.__esModule&&"default"in module?{get:()=>module.default,enumerable:true}:{value:module,enumerable:true})),module)};var require_jquery=__commonJS({"node_modules/jquery/dist/jquery.js"(exports,module){(function(global,factory){"use strict";if(typeof module==="object"&&typeof module.exports==="object"){module.exports=global.document?factory(global,true):function(w){if(!w.document){throw new Error("jQuery requires a window with a document")}return factory(w)}}else{factory(global)}})(typeof window!=="undefined"?window:exports,function(window2,noGlobal){"use strict";var arr=[];var getProto=Object.getPrototypeOf;var slice=arr.slice;var flat=arr.flat?function(array){return arr.flat.call(array)}:function(array){return arr.concat.apply([],array)};var push=arr.push;var indexOf=arr.indexOf;var class2type={};var toString=class2type.toString;var hasOwn=class2type.hasOwnProperty;var fnToString=hasOwn.toString;var ObjectFunctionString=fnToString.call(Object);var support2={};var isFunction=function isFunction2(obj){return typeof obj==="function"&&typeof obj.nodeType!=="number"&&typeof obj.item!=="function"};var isWindow=function isWindow2(obj){return obj!=null&&obj===obj.window};var document2=window2.document;var preservedScriptAttributes={type:true,src:true,nonce:true,noModule:true};function DOMEval(code,node,doc){doc=doc||document2;var i,val,script=doc.createElement("script");script.text=code;if(node){for(i in preservedScriptAttributes){val=node[i]||node.getAttribute&&node.getAttribute(i);if(val){script.setAttribute(i,val)}}}doc.head.appendChild(script).parentNode.removeChild(script)}function toType(obj){if(obj==null){return obj+""}return typeof obj==="object"||typeof obj==="function"?class2type[toString.call(obj)]||"object":typeof obj}var version="3.7.0",rhtmlSuffix=/HTML$/i,jQuery=function(selector,context){return new jQuery.fn.init(selector,context)};jQuery.fn=jQuery.prototype={jquery:version,constructor:jQuery,length:0,toArray:function(){return slice.call(this)},get:function(num){if(num==null){return slice.call(this)}return num<0?this[num+this.length]:this[num]},pushStack:function(elems){var ret=jQuery.merge(this.constructor(),elems);ret.prevObject=this;return ret},each:function(callback){return jQuery.each(this,callback)},map:function(callback){return this.pushStack(jQuery.map(this,function(elem,i){return callback.call(elem,i,elem)}))},slice:function(){return this.pushStack(slice.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(jQuery.grep(this,function(_elem,i){return(i+1)%2}))},odd:function(){return this.pushStack(jQuery.grep(this,function(_elem,i){return i%2}))},eq:function(i){var len=this.length,j=+i+(i<0?len:0);return this.pushStack(j>=0&&j<len?[this[j]]:[])},end:function(){return this.prevObject||this.constructor()},push,sort:arr.sort,splice:arr.splice};jQuery.extend=jQuery.fn.extend=function(){var options,name,src,copy,copyIsArray,clone,target=arguments[0]||{},i=1,length=arguments.length,deep=false;if(typeof target==="boolean"){deep=target;target=arguments[i]||{};i++}if(typeof target!=="object"&&!isFunction(target)){target={}}if(i===length){target=this;i--}for(;i<length;i++){if((options=arguments[i])!=null){for(name in options){copy=options[name];if(name==="__proto__"||target===copy){continue}if(deep&&copy&&(jQuery.isPlainObject(copy)||(copyIsArray=Array.isArray(copy)))){src=target[name];if(copyIsArray&&!Array.isArray(src)){clone=[]}else if(!copyIsArray&&!jQuery.isPlainObject(src)){clone={}}else{clone=src}copyIsArray=false;target[name]=jQuery.extend(deep,clone,copy)}else if(copy!==void 0){target[name]=copy}}}}return target};jQuery.extend({expando:"jQuery"+(version+Math.random()).replace(/\D/g,""),isReady:true,error:function(msg){throw new Error(msg)},noop:function(){},isPlainObject:function(obj){var proto,Ctor;if(!obj||toString.call(obj)!=="[object Object]"){return false}proto=getProto(obj);if(!proto){return true}Ctor=hasOwn.call(proto,"constructor")&&proto.constructor;return typeof Ctor==="function"&&fnToString.call(Ctor)===ObjectFunctionString},isEmptyObject:function(obj){var name;for(name in obj){return false}return true},globalEval:function(code,options,doc){DOMEval(code,{nonce:options&&options.nonce},doc)},each:function(obj,callback){var length,i=0;if(isArrayLike(obj)){length=obj.length;for(;i<length;i++){if(callback.call(obj[i],i,obj[i])===false){break}}}else{for(i in obj){if(callback.call(obj[i],i,obj[i])===false){break}}}return obj},text:function(elem){var node,ret="",i=0,nodeType=elem.nodeType;if(!nodeType){while(node=elem[i++]){ret+=jQuery.text(node)}}else if(nodeType===1||nodeType===9||nodeType===11){return elem.textContent}else if(nodeType===3||nodeType===4){return elem.nodeValue}return ret},makeArray:function(arr2,results){var ret=results||[];if(arr2!=null){if(isArrayLike(Object(arr2))){jQuery.merge(ret,typeof arr2==="string"?[arr2]:arr2)}else{push.call(ret,arr2)}}return ret},inArray:function(elem,arr2,i){return arr2==null?-1:indexOf.call(arr2,elem,i)},isXMLDoc:function(elem){var namespace=elem&&elem.namespaceURI,docElem=elem&&(elem.ownerDocument||elem).documentElement;return!rhtmlSuffix.test(namespace||docElem&&docElem.nodeName||"HTML")},merge:function(first,second){var len=+second.length,j=0,i=first.length;for(;j<len;j++){first[i++]=second[j]}first.length=i;return first},grep:function(elems,callback,invert){var callbackInverse,matches=[],i=0,length=elems.length,callbackExpect=!invert;for(;i<length;i++){callbackInverse=!callback(elems[i],i);if(callbackInverse!==callbackExpect){matches.push(elems[i])}}return matches},map:function(elems,callback,arg){var length,value,i=0,ret=[];if(isArrayLike(elems)){length=elems.length;for(;i<length;i++){value=callback(elems[i],i,arg);if(value!=null){ret.push(value)}}}else{for(i in elems){value=callback(elems[i],i,arg);if(value!=null){ret.push(value)}}}return flat(ret)},guid:1,support:support2});if(typeof Symbol==="function"){jQuery.fn[Symbol.iterator]=arr[Symbol.iterator]}jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(_i,name){class2type["[object "+name+"]"]=name.toLowerCase()});function isArrayLike(obj){var length=!!obj&&"length"in obj&&obj.length,type=toType(obj);if(isFunction(obj)||isWindow(obj)){return false}return type==="array"||length===0||typeof length==="number"&&length>0&&length-1 in obj}function nodeName(elem,name){return elem.nodeName&&elem.nodeName.toLowerCase()===name.toLowerCase()}var pop=arr.pop;var sort=arr.sort;var splice=arr.splice;var whitespace="[\\x20\\t\\r\\n\\f]";var rtrimCSS=new RegExp("^"+whitespace+"+|((?:^|[^\\\\])(?:\\\\.)*)"+whitespace+"+$","g");jQuery.contains=function(a,b){var bup=b&&b.parentNode;return a===bup||!!(bup&&bup.nodeType===1&&(a.contains?a.contains(bup):a.compareDocumentPosition&&a.compareDocumentPosition(bup)&16))};var rcssescape=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;function fcssescape(ch,asCodePoint){if(asCodePoint){if(ch==="\0"){return"\uFFFD"}return ch.slice(0,-1)+"\\"+ch.charCodeAt(ch.length-1).toString(16)+" "}return"\\"+ch}jQuery.escapeSelector=function(sel){return(sel+"").replace(rcssescape,fcssescape)};var preferredDoc=document2,pushNative=push;(function(){var i,Expr,outermostContext,sortInput,hasDuplicate,push2=pushNative,document3,documentElement2,documentIsHTML,rbuggyQSA,matches,expando=jQuery.expando,dirruns=0,done=0,classCache=createCache(),tokenCache=createCache(),compilerCache=createCache(),nonnativeSelectorCache=createCache(),sortOrder=function(a,b){if(a===b){hasDuplicate=true}return 0},booleans="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",identifier="(?:\\\\[\\da-fA-F]{1,6}"+whitespace+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",attributes="\\["+whitespace+"*("+identifier+")(?:"+whitespace+"*([*^$|!~]?=)"+whitespace+`*(?:'((?:\\\\.|[^\\\\'])*)'|"((?:\\\\.|[^\\\\"])*)"|(`+identifier+"))|)"+whitespace+"*\\]",pseudos=":("+identifier+`)(?:\\((('((?:\\\\.|[^\\\\'])*)'|"((?:\\\\.|[^\\\\"])*)")|((?:\\\\.|[^\\\\()[\\]]|`+attributes+")*)|.*)\\)|)",rwhitespace=new RegExp(whitespace+"+","g"),rcomma=new RegExp("^"+whitespace+"*,"+whitespace+"*"),rleadingCombinator=new RegExp("^"+whitespace+"*([>+~]|"+whitespace+")"+whitespace+"*"),rdescend=new RegExp(whitespace+"|>"),rpseudo=new RegExp(pseudos),ridentifier=new RegExp("^"+identifier+"$"),matchExpr={ID:new RegExp("^#("+identifier+")"),CLASS:new RegExp("^\\.("+identifier+")"),TAG:new RegExp("^("+identifier+"|[*])"),ATTR:new RegExp("^"+attributes),PSEUDO:new RegExp("^"+pseudos),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+whitespace+"*(even|odd|(([+-]|)(\\d*)n|)"+whitespace+"*(?:([+-]|)"+whitespace+"*(\\d+)|))"+whitespace+"*\\)|)","i"),bool:new RegExp("^(?:"+booleans+")$","i"),needsContext:new RegExp("^"+whitespace+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+whitespace+"*((?:-\\d)?\\d*)"+whitespace+"*\\)|)(?=[^-]|$)","i")},rinputs=/^(?:input|select|textarea|button)$/i,rheader=/^h\d$/i,rquickExpr2=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,rsibling=/[+~]/,runescape=new RegExp("\\\\[\\da-fA-F]{1,6}"+whitespace+"?|\\\\([^\\r\\n\\f])","g"),funescape=function(escape,nonHex){var high="0x"+escape.slice(1)-65536;if(nonHex){return nonHex}return high<0?String.fromCharCode(high+65536):String.fromCharCode(high>>10|55296,high&1023|56320)},unloadHandler=function(){setDocument()},inDisabledFieldset=addCombinator(function(elem){return elem.disabled===true&&nodeName(elem,"fieldset")},{dir:"parentNode",next:"legend"});function safeActiveElement(){try{return document3.activeElement}catch(err){}}try{push2.apply(arr=slice.call(preferredDoc.childNodes),preferredDoc.childNodes);arr[preferredDoc.childNodes.length].nodeType}catch(e){push2={apply:function(target,els){pushNative.apply(target,slice.call(els))},call:function(target){pushNative.apply(target,slice.call(arguments,1))}}}function find2(selector,context,results,seed){var m,i2,elem,nid,match,groups,newSelector,newContext=context&&context.ownerDocument,nodeType=context?context.nodeType:9;results=results||[];if(typeof selector!=="string"||!selector||nodeType!==1&&nodeType!==9&&nodeType!==11){return results}if(!seed){setDocument(context);context=context||document3;if(documentIsHTML){if(nodeType!==11&&(match=rquickExpr2.exec(selector))){if(m=match[1]){if(nodeType===9){if(elem=context.getElementById(m)){if(elem.id===m){push2.call(results,elem);return results}}else{return results}}else{if(newContext&&(elem=newContext.getElementById(m))&&find2.contains(context,elem)&&elem.id===m){push2.call(results,elem);return results}}}else if(match[2]){push2.apply(results,context.getElementsByTagName(selector));return results}else if((m=match[3])&&context.getElementsByClassName){push2.apply(results,context.getElementsByClassName(m));return results}}if(!nonnativeSelectorCache[selector+" "]&&(!rbuggyQSA||!rbuggyQSA.test(selector))){newSelector=selector;newContext=context;if(nodeType===1&&(rdescend.test(selector)||rleadingCombinator.test(selector))){newContext=rsibling.test(selector)&&testContext(context.parentNode)||context;if(newContext!=context||!support2.scope){if(nid=context.getAttribute("id")){nid=jQuery.escapeSelector(nid)}else{context.setAttribute("id",nid=expando)}}groups=tokenize(selector);i2=groups.length;while(i2--){groups[i2]=(nid?"#"+nid:":scope")+" "+toSelector(groups[i2])}newSelector=groups.join(",")}try{push2.apply(results,newContext.querySelectorAll(newSelector));return results}catch(qsaError){nonnativeSelectorCache(selector,true)}finally{if(nid===expando){context.removeAttribute("id")}}}}}return select(selector.replace(rtrimCSS,"$1"),context,results,seed)}function createCache(){var keys=[];function cache(key,value){if(keys.push(key+" ")>Expr.cacheLength){delete cache[keys.shift()]}return cache[key+" "]=value}return cache}function markFunction(fn){fn[expando]=true;return fn}function assert(fn){var el=document3.createElement("fieldset");try{return!!fn(el)}catch(e){return false}finally{if(el.parentNode){el.parentNode.removeChild(el)}el=null}}function createInputPseudo(type){return function(elem){return nodeName(elem,"input")&&elem.type===type}}function createButtonPseudo(type){return function(elem){return(nodeName(elem,"input")||nodeName(elem,"button"))&&elem.type===type}}function createDisabledPseudo(disabled){return function(elem){if("form"in elem){if(elem.parentNode&&elem.disabled===false){if("label"in elem){if("label"in elem.parentNode){return elem.parentNode.disabled===disabled}else{return elem.disabled===disabled}}return elem.isDisabled===disabled||elem.isDisabled!==!disabled&&inDisabledFieldset(elem)===disabled}return elem.disabled===disabled}else if("label"in elem){return elem.disabled===disabled}return false}}function createPositionalPseudo(fn){return markFunction(function(argument){argument=+argument;return markFunction(function(seed,matches2){var j,matchIndexes=fn([],seed.length,argument),i2=matchIndexes.length;while(i2--){if(seed[j=matchIndexes[i2]]){seed[j]=!(matches2[j]=seed[j])}}})})}function testContext(context){return context&&typeof context.getElementsByTagName!=="undefined"&&context}function setDocument(node){var subWindow,doc=node?node.ownerDocument||node:preferredDoc;if(doc==document3||doc.nodeType!==9||!doc.documentElement){return document3}document3=doc;documentElement2=document3.documentElement;documentIsHTML=!jQuery.isXMLDoc(document3);matches=documentElement2.matches||documentElement2.webkitMatchesSelector||documentElement2.msMatchesSelector;if(preferredDoc!=document3&&(subWindow=document3.defaultView)&&subWindow.top!==subWindow){subWindow.addEventListener("unload",unloadHandler)}support2.getById=assert(function(el){documentElement2.appendChild(el).id=jQuery.expando;return!document3.getElementsByName||!document3.getElementsByName(jQuery.expando).length});support2.disconnectedMatch=assert(function(el){return matches.call(el,"*")});support2.scope=assert(function(){return document3.querySelectorAll(":scope")});support2.cssHas=assert(function(){try{document3.querySelector(":has(*,:jqfake)");return false}catch(e){return true}});if(support2.getById){Expr.filter.ID=function(id){var attrId=id.replace(runescape,funescape);return function(elem){return elem.getAttribute("id")===attrId}};Expr.find.ID=function(id,context){if(typeof context.getElementById!=="undefined"&&documentIsHTML){var elem=context.getElementById(id);return elem?[elem]:[]}}}else{Expr.filter.ID=function(id){var attrId=id.replace(runescape,funescape);return function(elem){var node2=typeof elem.getAttributeNode!=="undefined"&&elem.getAttributeNode("id");return node2&&node2.value===attrId}};Expr.find.ID=function(id,context){if(typeof context.getElementById!=="undefined"&&documentIsHTML){var node2,i2,elems,elem=context.getElementById(id);if(elem){node2=elem.getAttributeNode("id");if(node2&&node2.value===id){return[elem]}elems=context.getElementsByName(id);i2=0;while(elem=elems[i2++]){node2=elem.getAttributeNode("id");if(node2&&node2.value===id){return[elem]}}}return[]}}}Expr.find.TAG=function(tag,context){if(typeof context.getElementsByTagName!=="undefined"){return context.getElementsByTagName(tag)}else{return context.querySelectorAll(tag)}};Expr.find.CLASS=function(className,context){if(typeof context.getElementsByClassName!=="undefined"&&documentIsHTML){return context.getElementsByClassName(className)}};rbuggyQSA=[];assert(function(el){var input;documentElement2.appendChild(el).innerHTML="<a id='"+expando+"' href='' disabled='disabled'></a><select id='"+expando+"-\r\\' disabled='disabled'><option selected=''></option></select>";if(!el.querySelectorAll("[selected]").length){rbuggyQSA.push("\\["+whitespace+"*(?:value|"+booleans+")")}if(!el.querySelectorAll("[id~="+expando+"-]").length){rbuggyQSA.push("~=")}if(!el.querySelectorAll("a#"+expando+"+*").length){rbuggyQSA.push(".#.+[+~]")}if(!el.querySelectorAll(":checked").length){rbuggyQSA.push(":checked")}input=document3.createElement("input");input.setAttribute("type","hidden");el.appendChild(input).setAttribute("name","D");documentElement2.appendChild(el).disabled=true;if(el.querySelectorAll(":disabled").length!==2){rbuggyQSA.push(":enabled",":disabled")}input=document3.createElement("input");input.setAttribute("name","");el.appendChild(input);if(!el.querySelectorAll("[name='']").length){rbuggyQSA.push("\\["+whitespace+"*name"+whitespace+"*="+whitespace+`*(?:''|"")`)}});if(!support2.cssHas){rbuggyQSA.push(":has")}rbuggyQSA=rbuggyQSA.length&&new RegExp(rbuggyQSA.join("|"));sortOrder=function(a,b){if(a===b){hasDuplicate=true;return 0}var compare=!a.compareDocumentPosition-!b.compareDocumentPosition;if(compare){return compare}compare=(a.ownerDocument||a)==(b.ownerDocument||b)?a.compareDocumentPosition(b):1;if(compare&1||!support2.sortDetached&&b.compareDocumentPosition(a)===compare){if(a===document3||a.ownerDocument==preferredDoc&&find2.contains(preferredDoc,a)){return-1}if(b===document3||b.ownerDocument==preferredDoc&&find2.contains(preferredDoc,b)){return 1}return sortInput?indexOf.call(sortInput,a)-indexOf.call(sortInput,b):0}return compare&4?-1:1};return document3}find2.matches=function(expr,elements){return find2(expr,null,null,elements)};find2.matchesSelector=function(elem,expr){setDocument(elem);if(documentIsHTML&&!nonnativeSelectorCache[expr+" "]&&(!rbuggyQSA||!rbuggyQSA.test(expr))){try{var ret=matches.call(elem,expr);if(ret||support2.disconnectedMatch||elem.document&&elem.document.nodeType!==11){return ret}}catch(e){nonnativeSelectorCache(expr,true)}}return find2(expr,document3,null,[elem]).length>0};find2.contains=function(context,elem){if((context.ownerDocument||context)!=document3){setDocument(context)}return jQuery.contains(context,elem)};find2.attr=function(elem,name){if((elem.ownerDocument||elem)!=document3){setDocument(elem)}var fn=Expr.attrHandle[name.toLowerCase()],val=fn&&hasOwn.call(Expr.attrHandle,name.toLowerCase())?fn(elem,name,!documentIsHTML):void 0;if(val!==void 0){return val}return elem.getAttribute(name)};find2.error=function(msg){throw new Error("Syntax error, unrecognized expression: "+msg)};jQuery.uniqueSort=function(results){var elem,duplicates=[],j=0,i2=0;hasDuplicate=!support2.sortStable;sortInput=!support2.sortStable&&slice.call(results,0);sort.call(results,sortOrder);if(hasDuplicate){while(elem=results[i2++]){if(elem===results[i2]){j=duplicates.push(i2)}}while(j--){splice.call(results,duplicates[j],1)}}sortInput=null;return results};jQuery.fn.uniqueSort=function(){return this.pushStack(jQuery.uniqueSort(slice.apply(this)))};Expr=jQuery.expr={cacheLength:50,createPseudo:markFunction,match:matchExpr,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:true}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:true},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(match){match[1]=match[1].replace(runescape,funescape);match[3]=(match[3]||match[4]||match[5]||"").replace(runescape,funescape);if(match[2]==="~="){match[3]=" "+match[3]+" "}return match.slice(0,4)},CHILD:function(match){match[1]=match[1].toLowerCase();if(match[1].slice(0,3)==="nth"){if(!match[3]){find2.error(match[0])}match[4]=+(match[4]?match[5]+(match[6]||1):2*(match[3]==="even"||match[3]==="odd"));match[5]=+(match[7]+match[8]||match[3]==="odd")}else if(match[3]){find2.error(match[0])}return match},PSEUDO:function(match){var excess,unquoted=!match[6]&&match[2];if(matchExpr.CHILD.test(match[0])){return null}if(match[3]){match[2]=match[4]||match[5]||""}else if(unquoted&&rpseudo.test(unquoted)&&(excess=tokenize(unquoted,true))&&(excess=unquoted.indexOf(")",unquoted.length-excess)-unquoted.length)){match[0]=match[0].slice(0,excess);match[2]=unquoted.slice(0,excess)}return match.slice(0,3)}},filter:{TAG:function(nodeNameSelector){var expectedNodeName=nodeNameSelector.replace(runescape,funescape).toLowerCase();return nodeNameSelector==="*"?function(){return true}:function(elem){return nodeName(elem,expectedNodeName)}},CLASS:function(className){var pattern=classCache[className+" "];return pattern||(pattern=new RegExp("(^|"+whitespace+")"+className+"("+whitespace+"|$)"))&&classCache(className,function(elem){return pattern.test(typeof elem.className==="string"&&elem.className||typeof elem.getAttribute!=="undefined"&&elem.getAttribute("class")||"")})},ATTR:function(name,operator,check){return function(elem){var result=find2.attr(elem,name);if(result==null){return operator==="!="}if(!operator){return true}result+="";if(operator==="="){return result===check}if(operator==="!="){return result!==check}if(operator==="^="){return check&&result.indexOf(check)===0}if(operator==="*="){return check&&result.indexOf(check)>-1}if(operator==="$="){return check&&result.slice(-check.length)===check}if(operator==="~="){return(" "+result.replace(rwhitespace," ")+" ").indexOf(check)>-1}if(operator==="|="){return result===check||result.slice(0,check.length+1)===check+"-"}return false}},CHILD:function(type,what,_argument,first,last){var simple=type.slice(0,3)!=="nth",forward=type.slice(-4)!=="last",ofType=what==="of-type";return first===1&&last===0?function(elem){return!!elem.parentNode}:function(elem,_context,xml){var cache,outerCache,node,nodeIndex,start,dir2=simple!==forward?"nextSibling":"previousSibling",parent2=elem.parentNode,name=ofType&&elem.nodeName.toLowerCase(),useCache=!xml&&!ofType,diff=false;if(parent2){if(simple){while(dir2){node=elem;while(node=node[dir2]){if(ofType?nodeName(node,name):node.nodeType===1){return false}}start=dir2=type==="only"&&!start&&"nextSibling"}return true}start=[forward?parent2.firstChild:parent2.lastChild];if(forward&&useCache){outerCache=parent2[expando]||(parent2[expando]={});cache=outerCache[type]||[];nodeIndex=cache[0]===dirruns&&cache[1];diff=nodeIndex&&cache[2];node=nodeIndex&&parent2.childNodes[nodeIndex];while(node=++nodeIndex&&node&&node[dir2]||(diff=nodeIndex=0)||start.pop()){if(node.nodeType===1&&++diff&&node===elem){outerCache[type]=[dirruns,nodeIndex,diff];break}}}else{if(useCache){outerCache=elem[expando]||(elem[expando]={});cache=outerCache[type]||[];nodeIndex=cache[0]===dirruns&&cache[1];diff=nodeIndex}if(diff===false){while(node=++nodeIndex&&node&&node[dir2]||(diff=nodeIndex=0)||start.pop()){if((ofType?nodeName(node,name):node.nodeType===1)&&++diff){if(useCache){outerCache=node[expando]||(node[expando]={});outerCache[type]=[dirruns,diff]}if(node===elem){break}}}}}diff-=last;return diff===first||diff%first===0&&diff/first>=0}}},PSEUDO:function(pseudo,argument){var args,fn=Expr.pseudos[pseudo]||Expr.setFilters[pseudo.toLowerCase()]||find2.error("unsupported pseudo: "+pseudo);if(fn[expando]){return fn(argument)}if(fn.length>1){args=[pseudo,pseudo,"",argument];return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase())?markFunction(function(seed,matches2){var idx,matched=fn(seed,argument),i2=matched.length;while(i2--){idx=indexOf.call(seed,matched[i2]);seed[idx]=!(matches2[idx]=matched[i2])}}):function(elem){return fn(elem,0,args)}}return fn}},pseudos:{not:markFunction(function(selector){var input=[],results=[],matcher=compile(selector.replace(rtrimCSS,"$1"));return matcher[expando]?markFunction(function(seed,matches2,_context,xml){var elem,unmatched=matcher(seed,null,xml,[]),i2=seed.length;while(i2--){if(elem=unmatched[i2]){seed[i2]=!(matches2[i2]=elem)}}}):function(elem,_context,xml){input[0]=elem;matcher(input,null,xml,results);input[0]=null;return!results.pop()}}),has:markFunction(function(selector){return function(elem){return find2(selector,elem).length>0}}),contains:markFunction(function(text2){text2=text2.replace(runescape,funescape);return function(elem){return(elem.textContent||jQuery.text(elem)).indexOf(text2)>-1}}),lang:markFunction(function(lang){if(!ridentifier.test(lang||"")){find2.error("unsupported lang: "+lang)}lang=lang.replace(runescape,funescape).toLowerCase();return function(elem){var elemLang;do{if(elemLang=documentIsHTML?elem.lang:elem.getAttribute("xml:lang")||elem.getAttribute("lang")){elemLang=elemLang.toLowerCase();return elemLang===lang||elemLang.indexOf(lang+"-")===0}}while((elem=elem.parentNode)&&elem.nodeType===1);return false}}),target:function(elem){var hash=window2.location&&window2.location.hash;return hash&&hash.slice(1)===elem.id},root:function(elem){return elem===documentElement2},focus:function(elem){return elem===safeActiveElement()&&document3.hasFocus()&&!!(elem.type||elem.href||~elem.tabIndex)},enabled:createDisabledPseudo(false),disabled:createDisabledPseudo(true),checked:function(elem){return nodeName(elem,"input")&&!!elem.checked||nodeName(elem,"option")&&!!elem.selected},selected:function(elem){if(elem.parentNode){elem.parentNode.selectedIndex}return elem.selected===true},empty:function(elem){for(elem=elem.firstChild;elem;elem=elem.nextSibling){if(elem.nodeType<6){return false}}return true},parent:function(elem){return!Expr.pseudos.empty(elem)},header:function(elem){return rheader.test(elem.nodeName)},input:function(elem){return rinputs.test(elem.nodeName)},button:function(elem){return nodeName(elem,"input")&&elem.type==="button"||nodeName(elem,"button")},text:function(elem){var attr2;return nodeName(elem,"input")&&elem.type==="text"&&((attr2=elem.getAttribute("type"))==null||attr2.toLowerCase()==="text")},first:createPositionalPseudo(function(){return[0]}),last:createPositionalPseudo(function(_matchIndexes,length){return[length-1]}),eq:createPositionalPseudo(function(_matchIndexes,length,argument){return[argument<0?argument+length:argument]}),even:createPositionalPseudo(function(matchIndexes,length){var i2=0;for(;i2<length;i2+=2){matchIndexes.push(i2)}return matchIndexes}),odd:createPositionalPseudo(function(matchIndexes,length){var i2=1;for(;i2<length;i2+=2){matchIndexes.push(i2)}return matchIndexes}),lt:createPositionalPseudo(function(matchIndexes,length,argument){var i2;if(argument<0){i2=argument+length}else if(argument>length){i2=length}else{i2=argument}for(;--i2>=0;){matchIndexes.push(i2)}return matchIndexes}),gt:createPositionalPseudo(function(matchIndexes,length,argument){var i2=argument<0?argument+length:argument;for(;++i2<length;){matchIndexes.push(i2)}return matchIndexes})}};Expr.pseudos.nth=Expr.pseudos.eq;for(i in{radio:true,checkbox:true,file:true,password:true,image:true}){Expr.pseudos[i]=createInputPseudo(i)}for(i in{submit:true,reset:true}){Expr.pseudos[i]=createButtonPseudo(i)}function setFilters(){}setFilters.prototype=Expr.filters=Expr.pseudos;Expr.setFilters=new setFilters;function tokenize(selector,parseOnly){var matched,match,tokens,type,soFar,groups,preFilters,cached=tokenCache[selector+" "];if(cached){return parseOnly?0:cached.slice(0)}soFar=selector;groups=[];preFilters=Expr.preFilter;while(soFar){if(!matched||(match=rcomma.exec(soFar))){if(match){soFar=soFar.slice(match[0].length)||soFar}groups.push(tokens=[])}matched=false;if(match=rleadingCombinator.exec(soFar)){matched=match.shift();tokens.push({value:matched,type:match[0].replace(rtrimCSS," ")});soFar=soFar.slice(matched.length)}for(type in Expr.filter){if((match=matchExpr[type].exec(soFar))&&(!preFilters[type]||(match=preFilters[type](match)))){matched=match.shift();tokens.push({value:matched,type,matches:match});soFar=soFar.slice(matched.length)}}if(!matched){break}}if(parseOnly){return soFar.length}return soFar?find2.error(selector):tokenCache(selector,groups).slice(0)}function toSelector(tokens){var i2=0,len=tokens.length,selector="";for(;i2<len;i2++){selector+=tokens[i2].value}return selector}function addCombinator(matcher,combinator,base){var dir2=combinator.dir,skip=combinator.next,key=skip||dir2,checkNonElements=base&&key==="parentNode",doneName=done++;return combinator.first?function(elem,context,xml){while(elem=elem[dir2]){if(elem.nodeType===1||checkNonElements){return matcher(elem,context,xml)}}return false}:function(elem,context,xml){var oldCache,outerCache,newCache=[dirruns,doneName];if(xml){while(elem=elem[dir2]){if(elem.nodeType===1||checkNonElements){if(matcher(elem,context,xml)){return true}}}}else{while(elem=elem[dir2]){if(elem.nodeType===1||checkNonElements){outerCache=elem[expando]||(elem[expando]={});if(skip&&nodeName(elem,skip)){elem=elem[dir2]||elem}else if((oldCache=outerCache[key])&&oldCache[0]===dirruns&&oldCache[1]===doneName){return newCache[2]=oldCache[2]}else{outerCache[key]=newCache;if(newCache[2]=matcher(elem,context,xml)){return true}}}}}return false}}function elementMatcher(matchers){return matchers.length>1?function(elem,context,xml){var i2=matchers.length;while(i2--){if(!matchers[i2](elem,context,xml)){return false}}return true}:matchers[0]}function multipleContexts(selector,contexts,results){var i2=0,len=contexts.length;for(;i2<len;i2++){find2(selector,contexts[i2],results)}return results}function condense(unmatched,map,filter2,context,xml){var elem,newUnmatched=[],i2=0,len=unmatched.length,mapped=map!=null;for(;i2<len;i2++){if(elem=unmatched[i2]){if(!filter2||filter2(elem,context,xml)){newUnmatched.push(elem);if(mapped){map.push(i2)}}}}return newUnmatched}function setMatcher(preFilter,selector,matcher,postFilter,postFinder,postSelector){if(postFilter&&!postFilter[expando]){postFilter=setMatcher(postFilter)}if(postFinder&&!postFinder[expando]){postFinder=setMatcher(postFinder,postSelector)}return markFunction(function(seed,results,context,xml){var temp,i2,elem,matcherOut,preMap=[],postMap=[],preexisting=results.length,elems=seed||multipleContexts(selector||"*",context.nodeType?[context]:context,[]),matcherIn=preFilter&&(seed||!selector)?condense(elems,preMap,preFilter,context,xml):elems;if(matcher){matcherOut=postFinder||(seed?preFilter:preexisting||postFilter)?[]:results;matcher(matcherIn,matcherOut,context,xml)}else{matcherOut=matcherIn}if(postFilter){temp=condense(matcherOut,postMap);postFilter(temp,[],context,xml);i2=temp.length;while(i2--){if(elem=temp[i2]){matcherOut[postMap[i2]]=!(matcherIn[postMap[i2]]=elem)}}}if(seed){if(postFinder||preFilter){if(postFinder){temp=[];i2=matcherOut.length;while(i2--){if(elem=matcherOut[i2]){temp.push(matcherIn[i2]=elem)}}postFinder(null,matcherOut=[],temp,xml)}i2=matcherOut.length;while(i2--){if((elem=matcherOut[i2])&&(temp=postFinder?indexOf.call(seed,elem):preMap[i2])>-1){seed[temp]=!(results[temp]=elem)}}}}else{matcherOut=condense(matcherOut===results?matcherOut.splice(preexisting,matcherOut.length):matcherOut);if(postFinder){postFinder(null,results,matcherOut,xml)}else{push2.apply(results,matcherOut)}}})}function matcherFromTokens(tokens){var checkContext,matcher,j,len=tokens.length,leadingRelative=Expr.relative[tokens[0].type],implicitRelative=leadingRelative||Expr.relative[" "],i2=leadingRelative?1:0,matchContext=addCombinator(function(elem){return elem===checkContext},implicitRelative,true),matchAnyContext=addCombinator(function(elem){return indexOf.call(checkContext,elem)>-1},implicitRelative,true),matchers=[function(elem,context,xml){var ret=!leadingRelative&&(xml||context!=outermostContext)||((checkContext=context).nodeType?matchContext(elem,context,xml):matchAnyContext(elem,context,xml));checkContext=null;return ret}];for(;i2<len;i2++){if(matcher=Expr.relative[tokens[i2].type]){matchers=[addCombinator(elementMatcher(matchers),matcher)]}else{matcher=Expr.filter[tokens[i2].type].apply(null,tokens[i2].matches);if(matcher[expando]){j=++i2;for(;j<len;j++){if(Expr.relative[tokens[j].type]){break}}return setMatcher(i2>1&&elementMatcher(matchers),i2>1&&toSelector(tokens.slice(0,i2-1).concat({value:tokens[i2-2].type===" "?"*":""})).replace(rtrimCSS,"$1"),matcher,i2<j&&matcherFromTokens(tokens.slice(i2,j)),j<len&&matcherFromTokens(tokens=tokens.slice(j)),j<len&&toSelector(tokens))}matchers.push(matcher)}}return elementMatcher(matchers)}function matcherFromGroupMatchers(elementMatchers,setMatchers){var bySet=setMatchers.length>0,byElement=elementMatchers.length>0,superMatcher=function(seed,context,xml,results,outermost){var elem,j,matcher,matchedCount=0,i2="0",unmatched=seed&&[],setMatched=[],contextBackup=outermostContext,elems=seed||byElement&&Expr.find.TAG("*",outermost),dirrunsUnique=dirruns+=contextBackup==null?1:Math.random()||.1,len=elems.length;if(outermost){outermostContext=context==document3||context||outermost}for(;i2!==len&&(elem=elems[i2])!=null;i2++){if(byElement&&elem){j=0;if(!context&&elem.ownerDocument!=document3){setDocument(elem);xml=!documentIsHTML}while(matcher=elementMatchers[j++]){if(matcher(elem,context||document3,xml)){push2.call(results,elem);break}}if(outermost){dirruns=dirrunsUnique}}if(bySet){if(elem=!matcher&&elem){matchedCount--}if(seed){unmatched.push(elem)}}}matchedCount+=i2;if(bySet&&i2!==matchedCount){j=0;while(matcher=setMatchers[j++]){matcher(unmatched,setMatched,context,xml)}if(seed){if(matchedCount>0){while(i2--){if(!(unmatched[i2]||setMatched[i2])){setMatched[i2]=pop.call(results)}}}setMatched=condense(setMatched)}push2.apply(results,setMatched);if(outermost&&!seed&&setMatched.length>0&&matchedCount+setMatchers.length>1){jQuery.uniqueSort(results)}}if(outermost){dirruns=dirrunsUnique;outermostContext=contextBackup}return unmatched};return bySet?markFunction(superMatcher):superMatcher}function compile(selector,match){var i2,setMatchers=[],elementMatchers=[],cached=compilerCache[selector+" "];if(!cached){if(!match){match=tokenize(selector)}i2=match.length;while(i2--){cached=matcherFromTokens(match[i2]);if(cached[expando]){setMatchers.push(cached)}else{elementMatchers.push(cached)}}cached=compilerCache(selector,matcherFromGroupMatchers(elementMatchers,setMatchers));cached.selector=selector}return cached}function select(selector,context,results,seed){var i2,tokens,token,type,find3,compiled=typeof selector==="function"&&selector,match=!seed&&tokenize(selector=compiled.selector||selector);results=results||[];if(match.length===1){tokens=match[0]=match[0].slice(0);if(tokens.length>2&&(token=tokens[0]).type==="ID"&&context.nodeType===9&&documentIsHTML&&Expr.relative[tokens[1].type]){context=(Expr.find.ID(token.matches[0].replace(runescape,funescape),context)||[])[0];if(!context){return results}else if(compiled){context=context.parentNode}selector=selector.slice(tokens.shift().value.length)}i2=matchExpr.needsContext.test(selector)?0:tokens.length;while(i2--){token=tokens[i2];if(Expr.relative[type=token.type]){break}if(find3=Expr.find[type]){if(seed=find3(token.matches[0].replace(runescape,funescape),rsibling.test(tokens[0].type)&&testContext(context.parentNode)||context)){tokens.splice(i2,1);selector=seed.length&&toSelector(tokens);if(!selector){push2.apply(results,seed);return results}break}}}}(compiled||compile(selector,match))(seed,context,!documentIsHTML,results,!context||rsibling.test(selector)&&testContext(context.parentNode)||context);return results}support2.sortStable=expando.split("").sort(sortOrder).join("")===expando;setDocument();support2.sortDetached=assert(function(el){return el.compareDocumentPosition(document3.createElement("fieldset"))&1});jQuery.find=find2;jQuery.expr[":"]=jQuery.expr.pseudos;jQuery.unique=jQuery.uniqueSort;find2.compile=compile;find2.select=select;find2.setDocument=setDocument;find2.escape=jQuery.escapeSelector;find2.getText=jQuery.text;find2.isXML=jQuery.isXMLDoc;find2.selectors=jQuery.expr;find2.support=jQuery.support;find2.uniqueSort=jQuery.uniqueSort})();var dir=function(elem,dir2,until){var matched=[],truncate=until!==void 0;while((elem=elem[dir2])&&elem.nodeType!==9){if(elem.nodeType===1){if(truncate&&jQuery(elem).is(until)){break}matched.push(elem)}}return matched};var siblings=function(n,elem){var matched=[];for(;n;n=n.nextSibling){if(n.nodeType===1&&n!==elem){matched.push(n)}}return matched};var rneedsContext=jQuery.expr.match.needsContext;var rsingleTag=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function winnow(elements,qualifier,not){if(isFunction(qualifier)){return jQuery.grep(elements,function(elem,i){return!!qualifier.call(elem,i,elem)!==not})}if(qualifier.nodeType){return jQuery.grep(elements,function(elem){return elem===qualifier!==not})}if(typeof qualifier!=="string"){return jQuery.grep(elements,function(elem){return indexOf.call(qualifier,elem)>-1!==not})}return jQuery.filter(qualifier,elements,not)}jQuery.filter=function(expr,elems,not){var elem=elems[0];if(not){expr=":not("+expr+")"}if(elems.length===1&&elem.nodeType===1){return jQuery.find.matchesSelector(elem,expr)?[elem]:[]}return jQuery.find.matches(expr,jQuery.grep(elems,function(elem2){return elem2.nodeType===1}))};jQuery.fn.extend({find:function(selector){var i,ret,len=this.length,self=this;if(typeof selector!=="string"){return this.pushStack(jQuery(selector).filter(function(){for(i=0;i<len;i++){if(jQuery.contains(self[i],this)){return true}}}))}ret=this.pushStack([]);for(i=0;i<len;i++){jQuery.find(selector,self[i],ret)}return len>1?jQuery.uniqueSort(ret):ret},filter:function(selector){return this.pushStack(winnow(this,selector||[],false))},not:function(selector){return this.pushStack(winnow(this,selector||[],true))},is:function(selector){return!!winnow(this,typeof selector==="string"&&rneedsContext.test(selector)?jQuery(selector):selector||[],false).length}});var rootjQuery,rquickExpr=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,init6=jQuery.fn.init=function(selector,context,root){var match,elem;if(!selector){return this}root=root||rootjQuery;if(typeof selector==="string"){if(selector[0]==="<"&&selector[selector.length-1]===">"&&selector.length>=3){match=[null,selector,null]}else{match=rquickExpr.exec(selector)}if(match&&(match[1]||!context)){if(match[1]){context=context instanceof jQuery?context[0]:context;jQuery.merge(this,jQuery.parseHTML(match[1],context&&context.nodeType?context.ownerDocument||context:document2,true));if(rsingleTag.test(match[1])&&jQuery.isPlainObject(context)){for(match in context){if(isFunction(this[match])){this[match](context[match])}else{this.attr(match,context[match])}}}return this}else{elem=document2.getElementById(match[2]);if(elem){this[0]=elem;this.length=1}return this}}else if(!context||context.jquery){return(context||root).find(selector)}else{return this.constructor(context).find(selector)}}else if(selector.nodeType){this[0]=selector;this.length=1;return this}else if(isFunction(selector)){return root.ready!==void 0?root.ready(selector):selector(jQuery)}return jQuery.makeArray(selector,this)};init6.prototype=jQuery.fn;rootjQuery=jQuery(document2);var rparentsprev=/^(?:parents|prev(?:Until|All))/,guaranteedUnique={children:true,contents:true,next:true,prev:true};jQuery.fn.extend({has:function(target){var targets=jQuery(target,this),l=targets.length;return this.filter(function(){var i=0;for(;i<l;i++){if(jQuery.contains(this,targets[i])){return true}}})},closest:function(selectors,context){var cur,i=0,l=this.length,matched=[],targets=typeof selectors!=="string"&&jQuery(selectors);if(!rneedsContext.test(selectors)){for(;i<l;i++){for(cur=this[i];cur&&cur!==context;cur=cur.parentNode){if(cur.nodeType<11&&(targets?targets.index(cur)>-1:cur.nodeType===1&&jQuery.find.matchesSelector(cur,selectors))){matched.push(cur);break}}}}return this.pushStack(matched.length>1?jQuery.uniqueSort(matched):matched)},index:function(elem){if(!elem){return this[0]&&this[0].parentNode?this.first().prevAll().length:-1}if(typeof elem==="string"){return indexOf.call(jQuery(elem),this[0])}return indexOf.call(this,elem.jquery?elem[0]:elem)},add:function(selector,context){return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(),jQuery(selector,context))))},addBack:function(selector){return this.add(selector==null?this.prevObject:this.prevObject.filter(selector))}});function sibling(cur,dir2){while((cur=cur[dir2])&&cur.nodeType!==1){}return cur}jQuery.each({parent:function(elem){var parent2=elem.parentNode;return parent2&&parent2.nodeType!==11?parent2:null},parents:function(elem){return dir(elem,"parentNode")},parentsUntil:function(elem,_i,until){return dir(elem,"parentNode",until)},next:function(elem){return sibling(elem,"nextSibling")},prev:function(elem){return sibling(elem,"previousSibling")},nextAll:function(elem){return dir(elem,"nextSibling")},prevAll:function(elem){return dir(elem,"previousSibling")},nextUntil:function(elem,_i,until){return dir(elem,"nextSibling",until)},prevUntil:function(elem,_i,until){return dir(elem,"previousSibling",until)},siblings:function(elem){return siblings((elem.parentNode||{}).firstChild,elem)},children:function(elem){return siblings(elem.firstChild)},contents:function(elem){if(elem.contentDocument!=null&&getProto(elem.contentDocument)){return elem.contentDocument}if(nodeName(elem,"template")){elem=elem.content||elem}return jQuery.merge([],elem.childNodes)}},function(name,fn){jQuery.fn[name]=function(until,selector){var matched=jQuery.map(this,fn,until);if(name.slice(-5)!=="Until"){selector=until}if(selector&&typeof selector==="string"){matched=jQuery.filter(selector,matched)}if(this.length>1){if(!guaranteedUnique[name]){jQuery.uniqueSort(matched)}if(rparentsprev.test(name)){matched.reverse()}}return this.pushStack(matched)}});var rnothtmlwhite=/[^\x20\t\r\n\f]+/g;function createOptions(options){var object={};jQuery.each(options.match(rnothtmlwhite)||[],function(_,flag){object[flag]=true});return object}jQuery.Callbacks=function(options){options=typeof options==="string"?createOptions(options):jQuery.extend({},options);var firing,memory,fired,locked,list=[],queue=[],firingIndex=-1,fire=function(){locked=locked||options.once;fired=firing=true;for(;queue.length;firingIndex=-1){memory=queue.shift();while(++firingIndex<list.length){if(list[firingIndex].apply(memory[0],memory[1])===false&&options.stopOnFalse){firingIndex=list.length;memory=false}}}if(!options.memory){memory=false}firing=false;if(locked){if(memory){list=[]}else{list=""}}},self={add:function(){if(list){if(memory&&!firing){firingIndex=list.length-1;queue.push(memory)}(function add(args){jQuery.each(args,function(_,arg){if(isFunction(arg)){if(!options.unique||!self.has(arg)){list.push(arg)}}else if(arg&&arg.length&&toType(arg)!=="string"){add(arg)}})})(arguments);if(memory&&!firing){fire()}}return this},remove:function(){jQuery.each(arguments,function(_,arg){var index2;while((index2=jQuery.inArray(arg,list,index2))>-1){list.splice(index2,1);if(index2<=firingIndex){firingIndex--}}});return this},has:function(fn){return fn?jQuery.inArray(fn,list)>-1:list.length>0},empty:function(){if(list){list=[]}return this},disable:function(){locked=queue=[];list=memory="";return this},disabled:function(){return!list},lock:function(){locked=queue=[];if(!memory&&!firing){list=memory=""}return this},locked:function(){return!!locked},fireWith:function(context,args){if(!locked){args=args||[];args=[context,args.slice?args.slice():args];queue.push(args);if(!firing){fire()}}return this},fire:function(){self.fireWith(this,arguments);return this},fired:function(){return!!fired}};return self};function Identity(v){return v}function Thrower(ex){throw ex}function adoptValue(value,resolve,reject,noValue){var method;try{if(value&&isFunction(method=value.promise)){method.call(value).done(resolve).fail(reject)}else if(value&&isFunction(method=value.then)){method.call(value,resolve,reject)}else{resolve.apply(void 0,[value].slice(noValue))}}catch(value2){reject.apply(void 0,[value2])}}jQuery.extend({Deferred:function(func){var tuples=[["notify","progress",jQuery.Callbacks("memory"),jQuery.Callbacks("memory"),2],["resolve","done",jQuery.Callbacks("once memory"),jQuery.Callbacks("once memory"),0,"resolved"],["reject","fail",jQuery.Callbacks("once memory"),jQuery.Callbacks("once memory"),1,"rejected"]],state="pending",promise={state:function(){return state},always:function(){deferred.done(arguments).fail(arguments);return this},"catch":function(fn){return promise.then(null,fn)},pipe:function(){var fns=arguments;return jQuery.Deferred(function(newDefer){jQuery.each(tuples,function(_i,tuple){var fn=isFunction(fns[tuple[4]])&&fns[tuple[4]];deferred[tuple[1]](function(){var returned=fn&&fn.apply(this,arguments);if(returned&&isFunction(returned.promise)){returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject)}else{newDefer[tuple[0]+"With"](this,fn?[returned]:arguments)}})});fns=null}).promise()},then:function(onFulfilled,onRejected,onProgress){var maxDepth=0;function resolve(depth,deferred2,handler,special){return function(){var that=this,args=arguments,mightThrow=function(){var returned,then;if(depth<maxDepth){return}returned=handler.apply(that,args);if(returned===deferred2.promise()){throw new TypeError("Thenable self-resolution")}then=returned&&(typeof returned==="object"||typeof returned==="function")&&returned.then;if(isFunction(then)){if(special){then.call(returned,resolve(maxDepth,deferred2,Identity,special),resolve(maxDepth,deferred2,Thrower,special))}else{maxDepth++;then.call(returned,resolve(maxDepth,deferred2,Identity,special),resolve(maxDepth,deferred2,Thrower,special),resolve(maxDepth,deferred2,Identity,deferred2.notifyWith))}}else{if(handler!==Identity){that=void 0;args=[returned]}(special||deferred2.resolveWith)(that,args)}},process=special?mightThrow:function(){try{mightThrow()}catch(e){if(jQuery.Deferred.exceptionHook){jQuery.Deferred.exceptionHook(e,process.error)}if(depth+1>=maxDepth){if(handler!==Thrower){that=void 0;args=[e]}deferred2.rejectWith(that,args)}}};if(depth){process()}else{if(jQuery.Deferred.getErrorHook){process.error=jQuery.Deferred.getErrorHook()}else if(jQuery.Deferred.getStackHook){process.error=jQuery.Deferred.getStackHook()}window2.setTimeout(process)}}}return jQuery.Deferred(function(newDefer){tuples[0][3].add(resolve(0,newDefer,isFunction(onProgress)?onProgress:Identity,newDefer.notifyWith));tuples[1][3].add(resolve(0,newDefer,isFunction(onFulfilled)?onFulfilled:Identity));tuples[2][3].add(resolve(0,newDefer,isFunction(onRejected)?onRejected:Thrower))}).promise()},promise:function(obj){return obj!=null?jQuery.extend(obj,promise):promise}},deferred={};jQuery.each(tuples,function(i,tuple){var list=tuple[2],stateString=tuple[5];promise[tuple[1]]=list.add;if(stateString){list.add(function(){state=stateString},tuples[3-i][2].disable,tuples[3-i][3].disable,tuples[0][2].lock,tuples[0][3].lock)}list.add(tuple[3].fire);deferred[tuple[0]]=function(){deferred[tuple[0]+"With"](this===deferred?void 0:this,arguments);return this};deferred[tuple[0]+"With"]=list.fireWith});promise.promise(deferred);if(func){func.call(deferred,deferred)}return deferred},when:function(singleValue){var remaining=arguments.length,i=remaining,resolveContexts=Array(i),resolveValues=slice.call(arguments),primary=jQuery.Deferred(),updateFunc=function(i2){return function(value){resolveContexts[i2]=this;resolveValues[i2]=arguments.length>1?slice.call(arguments):value;if(!--remaining){primary.resolveWith(resolveContexts,resolveValues)}}};if(remaining<=1){adoptValue(singleValue,primary.done(updateFunc(i)).resolve,primary.reject,!remaining);if(primary.state()==="pending"||isFunction(resolveValues[i]&&resolveValues[i].then)){return primary.then()}}while(i--){adoptValue(resolveValues[i],updateFunc(i),primary.reject)}return primary.promise()}});var rerrorNames=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;jQuery.Deferred.exceptionHook=function(error,asyncError){if(window2.console&&window2.console.warn&&error&&rerrorNames.test(error.name)){window2.console.warn("jQuery.Deferred exception: "+error.message,error.stack,asyncError)}};jQuery.readyException=function(error){window2.setTimeout(function(){throw error})};var readyList=jQuery.Deferred();jQuery.fn.ready=function(fn){readyList.then(fn).catch(function(error){jQuery.readyException(error)});return this};jQuery.extend({isReady:false,readyWait:1,ready:function(wait){if(wait===true?--jQuery.readyWait:jQuery.isReady){return}jQuery.isReady=true;if(wait!==true&&--jQuery.readyWait>0){return}readyList.resolveWith(document2,[jQuery])}});jQuery.ready.then=readyList.then;function completed(){document2.removeEventListener("DOMContentLoaded",completed);window2.removeEventListener("load",completed);jQuery.ready()}if(document2.readyState==="complete"||document2.readyState!=="loading"&&!document2.documentElement.doScroll){window2.setTimeout(jQuery.ready)}else{document2.addEventListener("DOMContentLoaded",completed);window2.addEventListener("load",completed)}var access=function(elems,fn,key,value,chainable,emptyGet,raw){var i=0,len=elems.length,bulk=key==null;if(toType(key)==="object"){chainable=true;for(i in key){access(elems,fn,i,key[i],true,emptyGet,raw)}}else if(value!==void 0){chainable=true;if(!isFunction(value)){raw=true}if(bulk){if(raw){fn.call(elems,value);fn=null}else{bulk=fn;fn=function(elem,_key,value2){return bulk.call(jQuery(elem),value2)}}}if(fn){for(;i<len;i++){fn(elems[i],key,raw?value:value.call(elems[i],i,fn(elems[i],key)))}}}if(chainable){return elems}if(bulk){return fn.call(elems)}return len?fn(elems[0],key):emptyGet};var rmsPrefix=/^-ms-/,rdashAlpha=/-([a-z])/g;function fcamelCase(_all,letter){return letter.toUpperCase()}function camelCase(string){return string.replace(rmsPrefix,"ms-").replace(rdashAlpha,fcamelCase)}var acceptData=function(owner){return owner.nodeType===1||owner.nodeType===9||!+owner.nodeType};function Data(){this.expando=jQuery.expando+Data.uid++}Data.uid=1;Data.prototype={cache:function(owner){var value=owner[this.expando];if(!value){value={};if(acceptData(owner)){if(owner.nodeType){owner[this.expando]=value}else{Object.defineProperty(owner,this.expando,{value,configurable:true})}}}return value},set:function(owner,data,value){var prop,cache=this.cache(owner);if(typeof data==="string"){cache[camelCase(data)]=value}else{for(prop in data){cache[camelCase(prop)]=data[prop]}}return cache},get:function(owner,key){return key===void 0?this.cache(owner):owner[this.expando]&&owner[this.expando][camelCase(key)]},access:function(owner,key,value){if(key===void 0||key&&typeof key==="string"&&value===void 0){return this.get(owner,key)}this.set(owner,key,value);return value!==void 0?value:key},remove:function(owner,key){var i,cache=owner[this.expando];if(cache===void 0){return}if(key!==void 0){if(Array.isArray(key)){key=key.map(camelCase)}else{key=camelCase(key);key=key in cache?[key]:key.match(rnothtmlwhite)||[]}i=key.length;while(i--){delete cache[key[i]]}}if(key===void 0||jQuery.isEmptyObject(cache)){if(owner.nodeType){owner[this.expando]=void 0}else{delete owner[this.expando]}}},hasData:function(owner){var cache=owner[this.expando];return cache!==void 0&&!jQuery.isEmptyObject(cache)}};var dataPriv=new Data;var dataUser=new Data;var rbrace=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,rmultiDash=/[A-Z]/g;function getData(data){if(data==="true"){return true}if(data==="false"){return false}if(data==="null"){return null}if(data===+data+""){return+data}if(rbrace.test(data)){return JSON.parse(data)}return data}function dataAttr(elem,key,data){var name;if(data===void 0&&elem.nodeType===1){name="data-"+key.replace(rmultiDash,"-$&").toLowerCase();data=elem.getAttribute(name);if(typeof data==="string"){try{data=getData(data)}catch(e){}dataUser.set(elem,key,data)}else{data=void 0}}return data}jQuery.extend({hasData:function(elem){return dataUser.hasData(elem)||dataPriv.hasData(elem)},data:function(elem,name,data){return dataUser.access(elem,name,data)},removeData:function(elem,name){dataUser.remove(elem,name)},_data:function(elem,name,data){return dataPriv.access(elem,name,data)},_removeData:function(elem,name){dataPriv.remove(elem,name)}});jQuery.fn.extend({data:function(key,value){var i,name,data,elem=this[0],attrs=elem&&elem.attributes;if(key===void 0){if(this.length){data=dataUser.get(elem);if(elem.nodeType===1&&!dataPriv.get(elem,"hasDataAttrs")){i=attrs.length;while(i--){if(attrs[i]){name=attrs[i].name;if(name.indexOf("data-")===0){name=camelCase(name.slice(5));dataAttr(elem,name,data[name])}}}dataPriv.set(elem,"hasDataAttrs",true)}}return data}if(typeof key==="object"){return this.each(function(){dataUser.set(this,key)})}return access(this,function(value2){var data2;if(elem&&value2===void 0){data2=dataUser.get(elem,key);if(data2!==void 0){return data2}data2=dataAttr(elem,key);if(data2!==void 0){return data2}return}this.each(function(){dataUser.set(this,key,value2)})},null,value,arguments.length>1,null,true)},removeData:function(key){return this.each(function(){dataUser.remove(this,key)})}});jQuery.extend({queue:function(elem,type,data){var queue;if(elem){type=(type||"fx")+"queue";queue=dataPriv.get(elem,type);if(data){if(!queue||Array.isArray(data)){queue=dataPriv.access(elem,type,jQuery.makeArray(data))}else{queue.push(data)}}return queue||[]}},dequeue:function(elem,type){type=type||"fx";var queue=jQuery.queue(elem,type),startLength=queue.length,fn=queue.shift(),hooks=jQuery._queueHooks(elem,type),next2=function(){jQuery.dequeue(elem,type)};if(fn==="inprogress"){fn=queue.shift();startLength--}if(fn){if(type==="fx"){queue.unshift("inprogress")}delete hooks.stop;fn.call(elem,next2,hooks)}if(!startLength&&hooks){hooks.empty.fire()}},_queueHooks:function(elem,type){var key=type+"queueHooks";return dataPriv.get(elem,key)||dataPriv.access(elem,key,{empty:jQuery.Callbacks("once memory").add(function(){dataPriv.remove(elem,[type+"queue",key])})})}});jQuery.fn.extend({queue:function(type,data){var setter=2;if(typeof type!=="string"){data=type;type="fx";setter--}if(arguments.length<setter){return jQuery.queue(this[0],type)}return data===void 0?this:this.each(function(){var queue=jQuery.queue(this,type,data);jQuery._queueHooks(this,type);if(type==="fx"&&queue[0]!=="inprogress"){jQuery.dequeue(this,type)}})},dequeue:function(type){return this.each(function(){jQuery.dequeue(this,type)})},clearQueue:function(type){return this.queue(type||"fx",[])},promise:function(type,obj){var tmp,count=1,defer=jQuery.Deferred(),elements=this,i=this.length,resolve=function(){if(!--count){defer.resolveWith(elements,[elements])}};if(typeof type!=="string"){obj=type;type=void 0}type=type||"fx";while(i--){tmp=dataPriv.get(elements[i],type+"queueHooks");if(tmp&&tmp.empty){count++;tmp.empty.add(resolve)}}resolve();return defer.promise(obj)}});var pnum=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;var rcssNum=new RegExp("^(?:([+-])=|)("+pnum+")([a-z%]*)$","i");var cssExpand=["Top","Right","Bottom","Left"];var documentElement=document2.documentElement;var isAttached=function(elem){return jQuery.contains(elem.ownerDocument,elem)},composed={composed:true};if(documentElement.getRootNode){isAttached=function(elem){return jQuery.contains(elem.ownerDocument,elem)||elem.getRootNode(composed)===elem.ownerDocument}}var isHiddenWithinTree=function(elem,el){elem=el||elem;return elem.style.display==="none"||elem.style.display===""&&isAttached(elem)&&jQuery.css(elem,"display")==="none"};function adjustCSS(elem,prop,valueParts,tween){var adjusted,scale,maxIterations=20,currentValue=tween?function(){return tween.cur()}:function(){return jQuery.css(elem,prop,"")},initial=currentValue(),unit=valueParts&&valueParts[3]||(jQuery.cssNumber[prop]?"":"px"),initialInUnit=elem.nodeType&&(jQuery.cssNumber[prop]||unit!=="px"&&+initial)&&rcssNum.exec(jQuery.css(elem,prop));if(initialInUnit&&initialInUnit[3]!==unit){initial=initial/2;unit=unit||initialInUnit[3];initialInUnit=+initial||1;while(maxIterations--){jQuery.style(elem,prop,initialInUnit+unit);if((1-scale)*(1-(scale=currentValue()/initial||.5))<=0){maxIterations=0}initialInUnit=initialInUnit/scale}initialInUnit=initialInUnit*2;jQuery.style(elem,prop,initialInUnit+unit);valueParts=valueParts||[]}if(valueParts){initialInUnit=+initialInUnit||+initial||0;adjusted=valueParts[1]?initialInUnit+(valueParts[1]+1)*valueParts[2]:+valueParts[2];if(tween){tween.unit=unit;tween.start=initialInUnit;tween.end=adjusted}}return adjusted}var defaultDisplayMap={};function getDefaultDisplay(elem){var temp,doc=elem.ownerDocument,nodeName2=elem.nodeName,display=defaultDisplayMap[nodeName2];if(display){return display}temp=doc.body.appendChild(doc.createElement(nodeName2));display=jQuery.css(temp,"display");temp.parentNode.removeChild(temp);if(display==="none"){display="block"}defaultDisplayMap[nodeName2]=display;return display}function showHide(elements,show){var display,elem,values=[],index2=0,length=elements.length;for(;index2<length;index2++){elem=elements[index2];if(!elem.style){continue}display=elem.style.display;if(show){if(display==="none"){values[index2]=dataPriv.get(elem,"display")||null;if(!values[index2]){elem.style.display=""}}if(elem.style.display===""&&isHiddenWithinTree(elem)){values[index2]=getDefaultDisplay(elem)}}else{if(display!=="none"){values[index2]="none";dataPriv.set(elem,"display",display)}}}for(index2=0;index2<length;index2++){if(values[index2]!=null){elements[index2].style.display=values[index2]}}return elements}jQuery.fn.extend({show:function(){return showHide(this,true)},hide:function(){return showHide(this)},toggle:function(state){if(typeof state==="boolean"){return state?this.show():this.hide()}return this.each(function(){if(isHiddenWithinTree(this)){jQuery(this).show()}else{jQuery(this).hide()}})}});var rcheckableType=/^(?:checkbox|radio)$/i;var rtagName=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i;var rscriptType=/^$|^module$|\/(?:java|ecma)script/i;(function(){var fragment=document2.createDocumentFragment(),div=fragment.appendChild(document2.createElement("div")),input=document2.createElement("input");input.setAttribute("type","radio");input.setAttribute("checked","checked");input.setAttribute("name","t");div.appendChild(input);support2.checkClone=div.cloneNode(true).cloneNode(true).lastChild.checked;div.innerHTML="<textarea>x</textarea>";support2.noCloneChecked=!!div.cloneNode(true).lastChild.defaultValue;div.innerHTML="<option></option>";support2.option=!!div.lastChild})();var wrapMap={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};wrapMap.tbody=wrapMap.tfoot=wrapMap.colgroup=wrapMap.caption=wrapMap.thead;wrapMap.th=wrapMap.td;if(!support2.option){wrapMap.optgroup=wrapMap.option=[1,"<select multiple='multiple'>","</select>"]}function getAll(context,tag){var ret;if(typeof context.getElementsByTagName!=="undefined"){ret=context.getElementsByTagName(tag||"*")}else if(typeof context.querySelectorAll!=="undefined"){ret=context.querySelectorAll(tag||"*")}else{ret=[]}if(tag===void 0||tag&&nodeName(context,tag)){return jQuery.merge([context],ret)}return ret}function setGlobalEval(elems,refElements){var i=0,l=elems.length;for(;i<l;i++){dataPriv.set(elems[i],"globalEval",!refElements||dataPriv.get(refElements[i],"globalEval"))}}var rhtml=/<|&#?\w+;/;function buildFragment(elems,context,scripts,selection,ignored){var elem,tmp,tag,wrap,attached,j,fragment=context.createDocumentFragment(),nodes=[],i=0,l=elems.length;for(;i<l;i++){elem=elems[i];if(elem||elem===0){if(toType(elem)==="object"){jQuery.merge(nodes,elem.nodeType?[elem]:elem)}else if(!rhtml.test(elem)){nodes.push(context.createTextNode(elem))}else{tmp=tmp||fragment.appendChild(context.createElement("div"));tag=(rtagName.exec(elem)||["",""])[1].toLowerCase();wrap=wrapMap[tag]||wrapMap._default;tmp.innerHTML=wrap[1]+jQuery.htmlPrefilter(elem)+wrap[2];j=wrap[0];while(j--){tmp=tmp.lastChild}jQuery.merge(nodes,tmp.childNodes);tmp=fragment.firstChild;tmp.textContent=""}}}fragment.textContent="";i=0;while(elem=nodes[i++]){if(selection&&jQuery.inArray(elem,selection)>-1){if(ignored){ignored.push(elem)}continue}attached=isAttached(elem);tmp=getAll(fragment.appendChild(elem),"script");if(attached){setGlobalEval(tmp)}if(scripts){j=0;while(elem=tmp[j++]){if(rscriptType.test(elem.type||"")){scripts.push(elem)}}}}return fragment}var rtypenamespace=/^([^.]*)(?:\.(.+)|)/;function returnTrue(){return true}function returnFalse(){return false}function on3(elem,types,selector,data,fn,one){var origFn,type;if(typeof types==="object"){if(typeof selector!=="string"){data=data||selector;selector=void 0}for(type in types){on3(elem,type,selector,data,types[type],one)}return elem}if(data==null&&fn==null){fn=selector;data=selector=void 0}else if(fn==null){if(typeof selector==="string"){fn=data;data=void 0}else{fn=data;data=selector;selector=void 0}}if(fn===false){fn=returnFalse}else if(!fn){return elem}if(one===1){origFn=fn;fn=function(event){jQuery().off(event);return origFn.apply(this,arguments)};fn.guid=origFn.guid||(origFn.guid=jQuery.guid++)}return elem.each(function(){jQuery.event.add(this,types,fn,data,selector)})}jQuery.event={global:{},add:function(elem,types,handler,data,selector){var handleObjIn,eventHandle,tmp,events,t,handleObj,special,handlers,type,namespaces,origType,elemData=dataPriv.get(elem);if(!acceptData(elem)){return}if(handler.handler){handleObjIn=handler;handler=handleObjIn.handler;selector=handleObjIn.selector}if(selector){jQuery.find.matchesSelector(documentElement,selector)}if(!handler.guid){handler.guid=jQuery.guid++}if(!(events=elemData.events)){events=elemData.events=Object.create(null)}if(!(eventHandle=elemData.handle)){eventHandle=elemData.handle=function(e){return typeof jQuery!=="undefined"&&jQuery.event.triggered!==e.type?jQuery.event.dispatch.apply(elem,arguments):void 0}}types=(types||"").match(rnothtmlwhite)||[""];t=types.length;while(t--){tmp=rtypenamespace.exec(types[t])||[];type=origType=tmp[1];namespaces=(tmp[2]||"").split(".").sort();if(!type){continue}special=jQuery.event.special[type]||{};type=(selector?special.delegateType:special.bindType)||type;special=jQuery.event.special[type]||{};handleObj=jQuery.extend({type,origType,data,handler,guid:handler.guid,selector,needsContext:selector&&jQuery.expr.match.needsContext.test(selector),namespace:namespaces.join(".")},handleObjIn);if(!(handlers=events[type])){handlers=events[type]=[];handlers.delegateCount=0;if(!special.setup||special.setup.call(elem,data,namespaces,eventHandle)===false){if(elem.addEventListener){elem.addEventListener(type,eventHandle)}}}if(special.add){special.add.call(elem,handleObj);if(!handleObj.handler.guid){handleObj.handler.guid=handler.guid}}if(selector){handlers.splice(handlers.delegateCount++,0,handleObj)}else{handlers.push(handleObj)}jQuery.event.global[type]=true}},remove:function(elem,types,handler,selector,mappedTypes){var j,origCount,tmp,events,t,handleObj,special,handlers,type,namespaces,origType,elemData=dataPriv.hasData(elem)&&dataPriv.get(elem);if(!elemData||!(events=elemData.events)){return}types=(types||"").match(rnothtmlwhite)||[""];t=types.length;while(t--){tmp=rtypenamespace.exec(types[t])||[];type=origType=tmp[1];namespaces=(tmp[2]||"").split(".").sort();if(!type){for(type in events){jQuery.event.remove(elem,type+types[t],handler,selector,true)}continue}special=jQuery.event.special[type]||{};type=(selector?special.delegateType:special.bindType)||type;handlers=events[type]||[];tmp=tmp[2]&&new RegExp("(^|\\.)"+namespaces.join("\\.(?:.*\\.|)")+"(\\.|$)");origCount=j=handlers.length;while(j--){handleObj=handlers[j];if((mappedTypes||origType===handleObj.origType)&&(!handler||handler.guid===handleObj.guid)&&(!tmp||tmp.test(handleObj.namespace))&&(!selector||selector===handleObj.selector||selector==="**"&&handleObj.selector)){handlers.splice(j,1);if(handleObj.selector){handlers.delegateCount--}if(special.remove){special.remove.call(elem,handleObj)}}}if(origCount&&!handlers.length){if(!special.teardown||special.teardown.call(elem,namespaces,elemData.handle)===false){jQuery.removeEvent(elem,type,elemData.handle)}delete events[type]}}if(jQuery.isEmptyObject(events)){dataPriv.remove(elem,"handle events")}},dispatch:function(nativeEvent){var i,j,ret,matched,handleObj,handlerQueue,args=new Array(arguments.length),event=jQuery.event.fix(nativeEvent),handlers=(dataPriv.get(this,"events")||Object.create(null))[event.type]||[],special=jQuery.event.special[event.type]||{};args[0]=event;for(i=1;i<arguments.length;i++){args[i]=arguments[i]}event.delegateTarget=this;if(special.preDispatch&&special.preDispatch.call(this,event)===false){return}handlerQueue=jQuery.event.handlers.call(this,event,handlers);i=0;while((matched=handlerQueue[i++])&&!event.isPropagationStopped()){event.currentTarget=matched.elem;j=0;while((handleObj=matched.handlers[j++])&&!event.isImmediatePropagationStopped()){if(!event.rnamespace||handleObj.namespace===false||event.rnamespace.test(handleObj.namespace)){event.handleObj=handleObj;event.data=handleObj.data;ret=((jQuery.event.special[handleObj.origType]||{}).handle||handleObj.handler).apply(matched.elem,args);if(ret!==void 0){if((event.result=ret)===false){event.preventDefault();event.stopPropagation()}}}}}if(special.postDispatch){special.postDispatch.call(this,event)}return event.result},handlers:function(event,handlers){var i,handleObj,sel,matchedHandlers,matchedSelectors,handlerQueue=[],delegateCount=handlers.delegateCount,cur=event.target;if(delegateCount&&cur.nodeType&&!(event.type==="click"&&event.button>=1)){for(;cur!==this;cur=cur.parentNode||this){if(cur.nodeType===1&&!(event.type==="click"&&cur.disabled===true)){matchedHandlers=[];matchedSelectors={};for(i=0;i<delegateCount;i++){handleObj=handlers[i];sel=handleObj.selector+" ";if(matchedSelectors[sel]===void 0){matchedSelectors[sel]=handleObj.needsContext?jQuery(sel,this).index(cur)>-1:jQuery.find(sel,this,null,[cur]).length}if(matchedSelectors[sel]){matchedHandlers.push(handleObj)}}if(matchedHandlers.length){handlerQueue.push({elem:cur,handlers:matchedHandlers})}}}}cur=this;if(delegateCount<handlers.length){handlerQueue.push({elem:cur,handlers:handlers.slice(delegateCount)})}return handlerQueue},addProp:function(name,hook){Object.defineProperty(jQuery.Event.prototype,name,{enumerable:true,configurable:true,get:isFunction(hook)?function(){if(this.originalEvent){return hook(this.originalEvent)}}:function(){if(this.originalEvent){return this.originalEvent[name]}},set:function(value){Object.defineProperty(this,name,{enumerable:true,configurable:true,writable:true,value})}})},fix:function(originalEvent){return originalEvent[jQuery.expando]?originalEvent:new jQuery.Event(originalEvent)},special:{load:{noBubble:true},click:{setup:function(data){var el=this||data;if(rcheckableType.test(el.type)&&el.click&&nodeName(el,"input")){leverageNative(el,"click",true)}return false},trigger:function(data){var el=this||data;if(rcheckableType.test(el.type)&&el.click&&nodeName(el,"input")){leverageNative(el,"click")}return true},_default:function(event){var target=event.target;return rcheckableType.test(target.type)&&target.click&&nodeName(target,"input")&&dataPriv.get(target,"click")||nodeName(target,"a")}},beforeunload:{postDispatch:function(event){if(event.result!==void 0&&event.originalEvent){event.originalEvent.returnValue=event.result}}}}};function leverageNative(el,type,isSetup){if(!isSetup){if(dataPriv.get(el,type)===void 0){jQuery.event.add(el,type,returnTrue)}return}dataPriv.set(el,type,false);jQuery.event.add(el,type,{namespace:false,handler:function(event){var result,saved=dataPriv.get(this,type);if(event.isTrigger&1&&this[type]){if(!saved){saved=slice.call(arguments);dataPriv.set(this,type,saved);this[type]();result=dataPriv.get(this,type);dataPriv.set(this,type,false);if(saved!==result){event.stopImmediatePropagation();event.preventDefault();return result}}else if((jQuery.event.special[type]||{}).delegateType){event.stopPropagation()}}else if(saved){dataPriv.set(this,type,jQuery.event.trigger(saved[0],saved.slice(1),this));event.stopPropagation();event.isImmediatePropagationStopped=returnTrue}}})}jQuery.removeEvent=function(elem,type,handle){if(elem.removeEventListener){elem.removeEventListener(type,handle)}};jQuery.Event=function(src,props){if(!(this instanceof jQuery.Event)){return new jQuery.Event(src,props)}if(src&&src.type){this.originalEvent=src;this.type=src.type;this.isDefaultPrevented=src.defaultPrevented||src.defaultPrevented===void 0&&src.returnValue===false?returnTrue:returnFalse;this.target=src.target&&src.target.nodeType===3?src.target.parentNode:src.target;this.currentTarget=src.currentTarget;this.relatedTarget=src.relatedTarget}else{this.type=src}if(props){jQuery.extend(this,props)}this.timeStamp=src&&src.timeStamp||Date.now();this[jQuery.expando]=true};jQuery.Event.prototype={constructor:jQuery.Event,isDefaultPrevented:returnFalse,isPropagationStopped:returnFalse,isImmediatePropagationStopped:returnFalse,isSimulated:false,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=returnTrue;if(e&&!this.isSimulated){e.preventDefault()}},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=returnTrue;if(e&&!this.isSimulated){e.stopPropagation()}},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=returnTrue;if(e&&!this.isSimulated){e.stopImmediatePropagation()}this.stopPropagation()}};jQuery.each({altKey:true,bubbles:true,cancelable:true,changedTouches:true,ctrlKey:true,detail:true,eventPhase:true,metaKey:true,pageX:true,pageY:true,shiftKey:true,view:true,"char":true,code:true,charCode:true,key:true,keyCode:true,button:true,buttons:true,clientX:true,clientY:true,offsetX:true,offsetY:true,pointerId:true,pointerType:true,screenX:true,screenY:true,targetTouches:true,toElement:true,touches:true,which:true},jQuery.event.addProp);jQuery.each({focus:"focusin",blur:"focusout"},function(type,delegateType){function focusMappedHandler(nativeEvent){if(document2.documentMode){var handle=dataPriv.get(this,"handle"),event=jQuery.event.fix(nativeEvent);event.type=nativeEvent.type==="focusin"?"focus":"blur";event.isSimulated=true;handle(nativeEvent);if(event.target===event.currentTarget){handle(event)}}else{jQuery.event.simulate(delegateType,nativeEvent.target,jQuery.event.fix(nativeEvent))}}jQuery.event.special[type]={setup:function(){var attaches;leverageNative(this,type,true);if(document2.documentMode){attaches=dataPriv.get(this,delegateType);if(!attaches){this.addEventListener(delegateType,focusMappedHandler)}dataPriv.set(this,delegateType,(attaches||0)+1)}else{return false}},trigger:function(){leverageNative(this,type);return true},teardown:function(){var attaches;if(document2.documentMode){attaches=dataPriv.get(this,delegateType)-1;if(!attaches){this.removeEventListener(delegateType,focusMappedHandler);dataPriv.remove(this,delegateType)}else{dataPriv.set(this,delegateType,attaches)}}else{return false}},_default:function(event){return dataPriv.get(event.target,type)},delegateType};jQuery.event.special[delegateType]={setup:function(){var doc=this.ownerDocument||this.document||this,dataHolder=document2.documentMode?this:doc,attaches=dataPriv.get(dataHolder,delegateType);if(!attaches){if(document2.documentMode){this.addEventListener(delegateType,focusMappedHandler)}else{doc.addEventListener(type,focusMappedHandler,true)}}dataPriv.set(dataHolder,delegateType,(attaches||0)+1)},teardown:function(){var doc=this.ownerDocument||this.document||this,dataHolder=document2.documentMode?this:doc,attaches=dataPriv.get(dataHolder,delegateType)-1;if(!attaches){if(document2.documentMode){this.removeEventListener(delegateType,focusMappedHandler)}else{doc.removeEventListener(type,focusMappedHandler,true)}dataPriv.remove(dataHolder,delegateType)}else{dataPriv.set(dataHolder,delegateType,attaches)}}}});jQuery.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(orig,fix){jQuery.event.special[orig]={delegateType:fix,bindType:fix,handle:function(event){var ret,target=this,related=event.relatedTarget,handleObj=event.handleObj;if(!related||related!==target&&!jQuery.contains(target,related)){event.type=handleObj.origType;ret=handleObj.handler.apply(this,arguments);event.type=fix}return ret}}});jQuery.fn.extend({on:function(types,selector,data,fn){return on3(this,types,selector,data,fn)},one:function(types,selector,data,fn){return on3(this,types,selector,data,fn,1)},off:function(types,selector,fn){var handleObj,type;if(types&&types.preventDefault&&types.handleObj){handleObj=types.handleObj;jQuery(types.delegateTarget).off(handleObj.namespace?handleObj.origType+"."+handleObj.namespace:handleObj.origType,handleObj.selector,handleObj.handler);return this}if(typeof types==="object"){for(type in types){this.off(type,selector,types[type])}return this}if(selector===false||typeof selector==="function"){fn=selector;selector=void 0}if(fn===false){fn=returnFalse}return this.each(function(){jQuery.event.remove(this,types,fn,selector)})}});var rnoInnerhtml=/<script|<style|<link/i,rchecked=/checked\s*(?:[^=]|=\s*.checked.)/i,rcleanScript=/^\s*<!\[CDATA\[|\]\]>\s*$/g;function manipulationTarget(elem,content){if(nodeName(elem,"table")&&nodeName(content.nodeType!==11?content:content.firstChild,"tr")){return jQuery(elem).children("tbody")[0]||elem}return elem}function disableScript(elem){elem.type=(elem.getAttribute("type")!==null)+"/"+elem.type;return elem}function restoreScript(elem){if((elem.type||"").slice(0,5)==="true/"){elem.type=elem.type.slice(5)}else{elem.removeAttribute("type")}return elem}function cloneCopyEvent(src,dest){var i,l,type,pdataOld,udataOld,udataCur,events;if(dest.nodeType!==1){return}if(dataPriv.hasData(src)){pdataOld=dataPriv.get(src);events=pdataOld.events;if(events){dataPriv.remove(dest,"handle events");for(type in events){for(i=0,l=events[type].length;i<l;i++){jQuery.event.add(dest,type,events[type][i])}}}}if(dataUser.hasData(src)){udataOld=dataUser.access(src);udataCur=jQuery.extend({},udataOld);dataUser.set(dest,udataCur)}}function fixInput(src,dest){var nodeName2=dest.nodeName.toLowerCase();if(nodeName2==="input"&&rcheckableType.test(src.type)){dest.checked=src.checked}else if(nodeName2==="input"||nodeName2==="textarea"){dest.defaultValue=src.defaultValue}}function domManip(collection,args,callback,ignored){args=flat(args);var fragment,first,scripts,hasScripts,node,doc,i=0,l=collection.length,iNoClone=l-1,value=args[0],valueIsFunction=isFunction(value);if(valueIsFunction||l>1&&typeof value==="string"&&!support2.checkClone&&rchecked.test(value)){return collection.each(function(index2){var self=collection.eq(index2);if(valueIsFunction){args[0]=value.call(this,index2,self.html())}domManip(self,args,callback,ignored)})}if(l){fragment=buildFragment(args,collection[0].ownerDocument,false,collection,ignored);first=fragment.firstChild;if(fragment.childNodes.length===1){fragment=first}if(first||ignored){scripts=jQuery.map(getAll(fragment,"script"),disableScript);hasScripts=scripts.length;for(;i<l;i++){node=fragment;if(i!==iNoClone){node=jQuery.clone(node,true,true);if(hasScripts){jQuery.merge(scripts,getAll(node,"script"))}}callback.call(collection[i],node,i)}if(hasScripts){doc=scripts[scripts.length-1].ownerDocument;jQuery.map(scripts,restoreScript);for(i=0;i<hasScripts;i++){node=scripts[i];if(rscriptType.test(node.type||"")&&!dataPriv.access(node,"globalEval")&&jQuery.contains(doc,node)){if(node.src&&(node.type||"").toLowerCase()!=="module"){if(jQuery._evalUrl&&!node.noModule){jQuery._evalUrl(node.src,{nonce:node.nonce||node.getAttribute("nonce")},doc)}}else{DOMEval(node.textContent.replace(rcleanScript,""),node,doc)}}}}}}return collection}function remove2(elem,selector,keepData){var node,nodes=selector?jQuery.filter(selector,elem):elem,i=0;for(;(node=nodes[i])!=null;i++){if(!keepData&&node.nodeType===1){jQuery.cleanData(getAll(node))}if(node.parentNode){if(keepData&&isAttached(node)){setGlobalEval(getAll(node,"script"))}node.parentNode.removeChild(node)}}return elem}jQuery.extend({htmlPrefilter:function(html2){return html2},clone:function(elem,dataAndEvents,deepDataAndEvents){var i,l,srcElements,destElements,clone=elem.cloneNode(true),inPage=isAttached(elem);if(!support2.noCloneChecked&&(elem.nodeType===1||elem.nodeType===11)&&!jQuery.isXMLDoc(elem)){destElements=getAll(clone);srcElements=getAll(elem);for(i=0,l=srcElements.length;i<l;i++){fixInput(srcElements[i],destElements[i])}}if(dataAndEvents){if(deepDataAndEvents){srcElements=srcElements||getAll(elem);destElements=destElements||getAll(clone);for(i=0,l=srcElements.length;i<l;i++){cloneCopyEvent(srcElements[i],destElements[i])}}else{cloneCopyEvent(elem,clone)}}destElements=getAll(clone,"script");if(destElements.length>0){setGlobalEval(destElements,!inPage&&getAll(elem,"script"))}return clone},cleanData:function(elems){var data,elem,type,special=jQuery.event.special,i=0;for(;(elem=elems[i])!==void 0;i++){if(acceptData(elem)){if(data=elem[dataPriv.expando]){if(data.events){for(type in data.events){if(special[type]){jQuery.event.remove(elem,type)}else{jQuery.removeEvent(elem,type,data.handle)}}}elem[dataPriv.expando]=void 0}if(elem[dataUser.expando]){elem[dataUser.expando]=void 0}}}}});jQuery.fn.extend({detach:function(selector){return remove2(this,selector,true)},remove:function(selector){return remove2(this,selector)},text:function(value){return access(this,function(value2){return value2===void 0?jQuery.text(this):this.empty().each(function(){if(this.nodeType===1||this.nodeType===11||this.nodeType===9){this.textContent=value2}})},null,value,arguments.length)},append:function(){return domManip(this,arguments,function(elem){if(this.nodeType===1||this.nodeType===11||this.nodeType===9){var target=manipulationTarget(this,elem);target.appendChild(elem)}})},prepend:function(){return domManip(this,arguments,function(elem){if(this.nodeType===1||this.nodeType===11||this.nodeType===9){var target=manipulationTarget(this,elem);target.insertBefore(elem,target.firstChild)}})},before:function(){return domManip(this,arguments,function(elem){if(this.parentNode){this.parentNode.insertBefore(elem,this)}})},after:function(){return domManip(this,arguments,function(elem){if(this.parentNode){this.parentNode.insertBefore(elem,this.nextSibling)}})},empty:function(){var elem,i=0;for(;(elem=this[i])!=null;i++){if(elem.nodeType===1){jQuery.cleanData(getAll(elem,false));elem.textContent=""}}return this},clone:function(dataAndEvents,deepDataAndEvents){dataAndEvents=dataAndEvents==null?false:dataAndEvents;deepDataAndEvents=deepDataAndEvents==null?dataAndEvents:deepDataAndEvents;return this.map(function(){return jQuery.clone(this,dataAndEvents,deepDataAndEvents)})},html:function(value){return access(this,function(value2){var elem=this[0]||{},i=0,l=this.length;if(value2===void 0&&elem.nodeType===1){return elem.innerHTML}if(typeof value2==="string"&&!rnoInnerhtml.test(value2)&&!wrapMap[(rtagName.exec(value2)||["",""])[1].toLowerCase()]){value2=jQuery.htmlPrefilter(value2);try{for(;i<l;i++){elem=this[i]||{};if(elem.nodeType===1){jQuery.cleanData(getAll(elem,false));elem.innerHTML=value2}}elem=0}catch(e){}}if(elem){this.empty().append(value2)}},null,value,arguments.length)},replaceWith:function(){var ignored=[];return domManip(this,arguments,function(elem){var parent2=this.parentNode;if(jQuery.inArray(this,ignored)<0){jQuery.cleanData(getAll(this));if(parent2){parent2.replaceChild(elem,this)}}},ignored)}});jQuery.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(name,original){jQuery.fn[name]=function(selector){var elems,ret=[],insert=jQuery(selector),last=insert.length-1,i=0;for(;i<=last;i++){elems=i===last?this:this.clone(true);jQuery(insert[i])[original](elems);push.apply(ret,elems.get())}return this.pushStack(ret)}});var rnumnonpx=new RegExp("^("+pnum+")(?!px)[a-z%]+$","i");var rcustomProp=/^--/;var getStyles=function(elem){var view=elem.ownerDocument.defaultView;if(!view||!view.opener){view=window2}return view.getComputedStyle(elem)};var swap=function(elem,options,callback){var ret,name,old={};for(name in options){old[name]=elem.style[name];elem.style[name]=options[name]}ret=callback.call(elem);for(name in options){elem.style[name]=old[name]}return ret};var rboxStyle=new RegExp(cssExpand.join("|"),"i");(function(){function computeStyleTests(){if(!div){return}container.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0";div.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%";documentElement.appendChild(container).appendChild(div);var divStyle=window2.getComputedStyle(div);pixelPositionVal=divStyle.top!=="1%";reliableMarginLeftVal=roundPixelMeasures(divStyle.marginLeft)===12;div.style.right="60%";pixelBoxStylesVal=roundPixelMeasures(divStyle.right)===36;boxSizingReliableVal=roundPixelMeasures(divStyle.width)===36;div.style.position="absolute";scrollboxSizeVal=roundPixelMeasures(div.offsetWidth/3)===12;documentElement.removeChild(container);div=null}function roundPixelMeasures(measure){return Math.round(parseFloat(measure))}var pixelPositionVal,boxSizingReliableVal,scrollboxSizeVal,pixelBoxStylesVal,reliableTrDimensionsVal,reliableMarginLeftVal,container=document2.createElement("div"),div=document2.createElement("div");if(!div.style){return}div.style.backgroundClip="content-box";div.cloneNode(true).style.backgroundClip="";support2.clearCloneStyle=div.style.backgroundClip==="content-box";jQuery.extend(support2,{boxSizingReliable:function(){computeStyleTests();return boxSizingReliableVal},pixelBoxStyles:function(){computeStyleTests();return pixelBoxStylesVal},pixelPosition:function(){computeStyleTests();return pixelPositionVal},reliableMarginLeft:function(){computeStyleTests();return reliableMarginLeftVal},scrollboxSize:function(){computeStyleTests();return scrollboxSizeVal},reliableTrDimensions:function(){var table,tr,trChild,trStyle;if(reliableTrDimensionsVal==null){table=document2.createElement("table");tr=document2.createElement("tr");trChild=document2.createElement("div");table.style.cssText="position:absolute;left:-11111px;border-collapse:separate";tr.style.cssText="border:1px solid";tr.style.height="1px";trChild.style.height="9px";trChild.style.display="block";documentElement.appendChild(table).appendChild(tr).appendChild(trChild);trStyle=window2.getComputedStyle(tr);reliableTrDimensionsVal=parseInt(trStyle.height,10)+parseInt(trStyle.borderTopWidth,10)+parseInt(trStyle.borderBottomWidth,10)===tr.offsetHeight;documentElement.removeChild(table)}return reliableTrDimensionsVal}})})();function curCSS(elem,name,computed){var width,minWidth,maxWidth,ret,isCustomProp=rcustomProp.test(name),style=elem.style;computed=computed||getStyles(elem);if(computed){ret=computed.getPropertyValue(name)||computed[name];if(isCustomProp&&ret){ret=ret.replace(rtrimCSS,"$1")||void 0}if(ret===""&&!isAttached(elem)){ret=jQuery.style(elem,name)}if(!support2.pixelBoxStyles()&&rnumnonpx.test(ret)&&rboxStyle.test(name)){width=style.width;minWidth=style.minWidth;maxWidth=style.maxWidth;style.minWidth=style.maxWidth=style.width=ret;ret=computed.width;style.width=width;style.minWidth=minWidth;style.maxWidth=maxWidth}}return ret!==void 0?ret+"":ret}function addGetHookIf(conditionFn,hookFn){return{get:function(){if(conditionFn()){delete this.get;return}return(this.get=hookFn).apply(this,arguments)}}}var cssPrefixes=["Webkit","Moz","ms"],emptyStyle=document2.createElement("div").style,vendorProps={};function vendorPropName(name){var capName=name[0].toUpperCase()+name.slice(1),i=cssPrefixes.length;while(i--){name=cssPrefixes[i]+capName;if(name in emptyStyle){return name}}}function finalPropName(name){var final=jQuery.cssProps[name]||vendorProps[name];if(final){return final}if(name in emptyStyle){return name}return vendorProps[name]=vendorPropName(name)||name}var rdisplayswap=/^(none|table(?!-c[ea]).+)/,cssShow={position:"absolute",visibility:"hidden",display:"block"},cssNormalTransform={letterSpacing:"0",fontWeight:"400"};function setPositiveNumber(_elem,value,subtract){var matches=rcssNum.exec(value);return matches?Math.max(0,matches[2]-(subtract||0))+(matches[3]||"px"):value}function boxModelAdjustment(elem,dimension,box,isBorderBox,styles2,computedVal){var i=dimension==="width"?1:0,extra=0,delta=0,marginDelta=0;if(box===(isBorderBox?"border":"content")){return 0}for(;i<4;i+=2){if(box==="margin"){marginDelta+=jQuery.css(elem,box+cssExpand[i],true,styles2)}if(!isBorderBox){delta+=jQuery.css(elem,"padding"+cssExpand[i],true,styles2);if(box!=="padding"){delta+=jQuery.css(elem,"border"+cssExpand[i]+"Width",true,styles2)}else{extra+=jQuery.css(elem,"border"+cssExpand[i]+"Width",true,styles2)}}else{if(box==="content"){delta-=jQuery.css(elem,"padding"+cssExpand[i],true,styles2)}if(box!=="margin"){delta-=jQuery.css(elem,"border"+cssExpand[i]+"Width",true,styles2)}}}if(!isBorderBox&&computedVal>=0){delta+=Math.max(0,Math.ceil(elem["offset"+dimension[0].toUpperCase()+dimension.slice(1)]-computedVal-delta-extra-.5))||0}return delta+marginDelta}function getWidthOrHeight(elem,dimension,extra){var styles2=getStyles(elem),boxSizingNeeded=!support2.boxSizingReliable()||extra,isBorderBox=boxSizingNeeded&&jQuery.css(elem,"boxSizing",false,styles2)==="border-box",valueIsBorderBox=isBorderBox,val=curCSS(elem,dimension,styles2),offsetProp="offset"+dimension[0].toUpperCase()+dimension.slice(1);if(rnumnonpx.test(val)){if(!extra){return val}val="auto"}if((!support2.boxSizingReliable()&&isBorderBox||!support2.reliableTrDimensions()&&nodeName(elem,"tr")||val==="auto"||!parseFloat(val)&&jQuery.css(elem,"display",false,styles2)==="inline")&&elem.getClientRects().length){isBorderBox=jQuery.css(elem,"boxSizing",false,styles2)==="border-box";valueIsBorderBox=offsetProp in elem;if(valueIsBorderBox){val=elem[offsetProp]}}val=parseFloat(val)||0;return val+boxModelAdjustment(elem,dimension,extra||(isBorderBox?"border":"content"),valueIsBorderBox,styles2,val)+"px"}jQuery.extend({cssHooks:{opacity:{get:function(elem,computed){if(computed){var ret=curCSS(elem,"opacity");return ret===""?"1":ret}}}},cssNumber:{animationIterationCount:true,aspectRatio:true,borderImageSlice:true,columnCount:true,flexGrow:true,flexShrink:true,fontWeight:true,gridArea:true,gridColumn:true,gridColumnEnd:true,gridColumnStart:true,gridRow:true,gridRowEnd:true,gridRowStart:true,lineHeight:true,opacity:true,order:true,orphans:true,scale:true,widows:true,zIndex:true,zoom:true,fillOpacity:true,floodOpacity:true,stopOpacity:true,strokeMiterlimit:true,strokeOpacity:true},cssProps:{},style:function(elem,name,value,extra){if(!elem||elem.nodeType===3||elem.nodeType===8||!elem.style){return}var ret,type,hooks,origName=camelCase(name),isCustomProp=rcustomProp.test(name),style=elem.style;if(!isCustomProp){name=finalPropName(origName)}hooks=jQuery.cssHooks[name]||jQuery.cssHooks[origName];if(value!==void 0){type=typeof value;if(type==="string"&&(ret=rcssNum.exec(value))&&ret[1]){value=adjustCSS(elem,name,ret);type="number"}if(value==null||value!==value){return}if(type==="number"&&!isCustomProp){value+=ret&&ret[3]||(jQuery.cssNumber[origName]?"":"px")}if(!support2.clearCloneStyle&&value===""&&name.indexOf("background")===0){style[name]="inherit"}if(!hooks||!("set"in hooks)||(value=hooks.set(elem,value,extra))!==void 0){if(isCustomProp){style.setProperty(name,value)}else{style[name]=value}}}else{if(hooks&&"get"in hooks&&(ret=hooks.get(elem,false,extra))!==void 0){return ret}return style[name]}},css:function(elem,name,extra,styles2){var val,num,hooks,origName=camelCase(name),isCustomProp=rcustomProp.test(name);if(!isCustomProp){name=finalPropName(origName)}hooks=jQuery.cssHooks[name]||jQuery.cssHooks[origName];if(hooks&&"get"in hooks){val=hooks.get(elem,true,extra)}if(val===void 0){val=curCSS(elem,name,styles2)}if(val==="normal"&&name in cssNormalTransform){val=cssNormalTransform[name]}if(extra===""||extra){num=parseFloat(val);return extra===true||isFinite(num)?num||0:val}return val}});jQuery.each(["height","width"],function(_i,dimension){jQuery.cssHooks[dimension]={get:function(elem,computed,extra){if(computed){return rdisplayswap.test(jQuery.css(elem,"display"))&&(!elem.getClientRects().length||!elem.getBoundingClientRect().width)?swap(elem,cssShow,function(){return getWidthOrHeight(elem,dimension,extra)}):getWidthOrHeight(elem,dimension,extra)}},set:function(elem,value,extra){var matches,styles2=getStyles(elem),scrollboxSizeBuggy=!support2.scrollboxSize()&&styles2.position==="absolute",boxSizingNeeded=scrollboxSizeBuggy||extra,isBorderBox=boxSizingNeeded&&jQuery.css(elem,"boxSizing",false,styles2)==="border-box",subtract=extra?boxModelAdjustment(elem,dimension,extra,isBorderBox,styles2):0;if(isBorderBox&&scrollboxSizeBuggy){subtract-=Math.ceil(elem["offset"+dimension[0].toUpperCase()+dimension.slice(1)]-parseFloat(styles2[dimension])-boxModelAdjustment(elem,dimension,"border",false,styles2)-.5)}if(subtract&&(matches=rcssNum.exec(value))&&(matches[3]||"px")!=="px"){elem.style[dimension]=value;value=jQuery.css(elem,dimension)}return setPositiveNumber(elem,value,subtract)}}});jQuery.cssHooks.marginLeft=addGetHookIf(support2.reliableMarginLeft,function(elem,computed){if(computed){return(parseFloat(curCSS(elem,"marginLeft"))||elem.getBoundingClientRect().left-swap(elem,{marginLeft:0},function(){return elem.getBoundingClientRect().left}))+"px"}});jQuery.each({margin:"",padding:"",border:"Width"},function(prefix,suffix){jQuery.cssHooks[prefix+suffix]={expand:function(value){var i=0,expanded={},parts=typeof value==="string"?value.split(" "):[value];for(;i<4;i++){expanded[prefix+cssExpand[i]+suffix]=parts[i]||parts[i-2]||parts[0]}return expanded}};if(prefix!=="margin"){jQuery.cssHooks[prefix+suffix].set=setPositiveNumber}});jQuery.fn.extend({css:function(name,value){return access(this,function(elem,name2,value2){var styles2,len,map={},i=0;if(Array.isArray(name2)){styles2=getStyles(elem);len=name2.length;for(;i<len;i++){map[name2[i]]=jQuery.css(elem,name2[i],false,styles2)}return map}return value2!==void 0?jQuery.style(elem,name2,value2):jQuery.css(elem,name2)},name,value,arguments.length>1)}});function Tween(elem,options,prop,end,easing){return new Tween.prototype.init(elem,options,prop,end,easing)}jQuery.Tween=Tween;Tween.prototype={constructor:Tween,init:function(elem,options,prop,end,easing,unit){this.elem=elem;this.prop=prop;this.easing=easing||jQuery.easing._default;this.options=options;this.start=this.now=this.cur();this.end=end;this.unit=unit||(jQuery.cssNumber[prop]?"":"px")},cur:function(){var hooks=Tween.propHooks[this.prop];return hooks&&hooks.get?hooks.get(this):Tween.propHooks._default.get(this)},run:function(percent){var eased,hooks=Tween.propHooks[this.prop];if(this.options.duration){this.pos=eased=jQuery.easing[this.easing](percent,this.options.duration*percent,0,1,this.options.duration)}else{this.pos=eased=percent}this.now=(this.end-this.start)*eased+this.start;if(this.options.step){this.options.step.call(this.elem,this.now,this)}if(hooks&&hooks.set){hooks.set(this)}else{Tween.propHooks._default.set(this)}return this}};Tween.prototype.init.prototype=Tween.prototype;Tween.propHooks={_default:{get:function(tween){var result;if(tween.elem.nodeType!==1||tween.elem[tween.prop]!=null&&tween.elem.style[tween.prop]==null){return tween.elem[tween.prop]}result=jQuery.css(tween.elem,tween.prop,"");return!result||result==="auto"?0:result},set:function(tween){if(jQuery.fx.step[tween.prop]){jQuery.fx.step[tween.prop](tween)}else if(tween.elem.nodeType===1&&(jQuery.cssHooks[tween.prop]||tween.elem.style[finalPropName(tween.prop)]!=null)){jQuery.style(tween.elem,tween.prop,tween.now+tween.unit)}else{tween.elem[tween.prop]=tween.now}}}};Tween.propHooks.scrollTop=Tween.propHooks.scrollLeft={set:function(tween){if(tween.elem.nodeType&&tween.elem.parentNode){tween.elem[tween.prop]=tween.now}}};jQuery.easing={linear:function(p){return p},swing:function(p){return .5-Math.cos(p*Math.PI)/2},_default:"swing"};jQuery.fx=Tween.prototype.init;jQuery.fx.step={};var fxNow,inProgress,rfxtypes=/^(?:toggle|show|hide)$/,rrun=/queueHooks$/;function schedule(){if(inProgress){if(document2.hidden===false&&window2.requestAnimationFrame){window2.requestAnimationFrame(schedule)}else{window2.setTimeout(schedule,jQuery.fx.interval)}jQuery.fx.tick()}}function createFxNow(){window2.setTimeout(function(){fxNow=void 0});return fxNow=Date.now()}function genFx(type,includeWidth){var which,i=0,attrs={height:type};includeWidth=includeWidth?1:0;for(;i<4;i+=2-includeWidth){which=cssExpand[i];attrs["margin"+which]=attrs["padding"+which]=type}if(includeWidth){attrs.opacity=attrs.width=type}return attrs}function createTween(value,prop,animation){var tween,collection=(Animation.tweeners[prop]||[]).concat(Animation.tweeners["*"]),index2=0,length=collection.length;for(;index2<length;index2++){if(tween=collection[index2].call(animation,prop,value)){return tween}}}function defaultPrefilter(elem,props,opts){var prop,value,toggle,hooks,oldfire,propTween,restoreDisplay,display,isBox="width"in props||"height"in props,anim=this,orig={},style=elem.style,hidden=elem.nodeType&&isHiddenWithinTree(elem),dataShow=dataPriv.get(elem,"fxshow");if(!opts.queue){hooks=jQuery._queueHooks(elem,"fx");if(hooks.unqueued==null){hooks.unqueued=0;oldfire=hooks.empty.fire;hooks.empty.fire=function(){if(!hooks.unqueued){oldfire()}}}hooks.unqueued++;anim.always(function(){anim.always(function(){hooks.unqueued--;if(!jQuery.queue(elem,"fx").length){hooks.empty.fire()}})})}for(prop in props){value=props[prop];if(rfxtypes.test(value)){delete props[prop];toggle=toggle||value==="toggle";if(value===(hidden?"hide":"show")){if(value==="show"&&dataShow&&dataShow[prop]!==void 0){hidden=true}else{continue}}orig[prop]=dataShow&&dataShow[prop]||jQuery.style(elem,prop)}}propTween=!jQuery.isEmptyObject(props);if(!propTween&&jQuery.isEmptyObject(orig)){return}if(isBox&&elem.nodeType===1){opts.overflow=[style.overflow,style.overflowX,style.overflowY];restoreDisplay=dataShow&&dataShow.display;if(restoreDisplay==null){restoreDisplay=dataPriv.get(elem,"display")}display=jQuery.css(elem,"display");if(display==="none"){if(restoreDisplay){display=restoreDisplay}else{showHide([elem],true);restoreDisplay=elem.style.display||restoreDisplay;display=jQuery.css(elem,"display");showHide([elem])}}if(display==="inline"||display==="inline-block"&&restoreDisplay!=null){if(jQuery.css(elem,"float")==="none"){if(!propTween){anim.done(function(){style.display=restoreDisplay});if(restoreDisplay==null){display=style.display;restoreDisplay=display==="none"?"":display}}style.display="inline-block"}}}if(opts.overflow){style.overflow="hidden";anim.always(function(){style.overflow=opts.overflow[0];style.overflowX=opts.overflow[1];style.overflowY=opts.overflow[2]})}propTween=false;for(prop in orig){if(!propTween){if(dataShow){if("hidden"in dataShow){hidden=dataShow.hidden}}else{dataShow=dataPriv.access(elem,"fxshow",{display:restoreDisplay})}if(toggle){dataShow.hidden=!hidden}if(hidden){showHide([elem],true)}anim.done(function(){if(!hidden){showHide([elem])}dataPriv.remove(elem,"fxshow");for(prop in orig){jQuery.style(elem,prop,orig[prop])}})}propTween=createTween(hidden?dataShow[prop]:0,prop,anim);if(!(prop in dataShow)){dataShow[prop]=propTween.start;if(hidden){propTween.end=propTween.start;propTween.start=0}}}}function propFilter(props,specialEasing){var index2,name,easing,value,hooks;for(index2 in props){name=camelCase(index2);easing=specialEasing[name];value=props[index2];if(Array.isArray(value)){easing=value[1];value=props[index2]=value[0]}if(index2!==name){props[name]=value;delete props[index2]}hooks=jQuery.cssHooks[name];if(hooks&&"expand"in hooks){value=hooks.expand(value);delete props[name];for(index2 in value){if(!(index2 in props)){props[index2]=value[index2];specialEasing[index2]=easing}}}else{specialEasing[name]=easing}}}function Animation(elem,properties,options){var result,stopped,index2=0,length=Animation.prefilters.length,deferred=jQuery.Deferred().always(function(){delete tick.elem}),tick=function(){if(stopped){return false}var currentTime=fxNow||createFxNow(),remaining=Math.max(0,animation.startTime+animation.duration-currentTime),temp=remaining/animation.duration||0,percent=1-temp,index3=0,length2=animation.tweens.length;for(;index3<length2;index3++){animation.tweens[index3].run(percent)}deferred.notifyWith(elem,[animation,percent,remaining]);if(percent<1&&length2){return remaining}if(!length2){deferred.notifyWith(elem,[animation,1,0])}deferred.resolveWith(elem,[animation]);return false},animation=deferred.promise({elem,props:jQuery.extend({},properties),opts:jQuery.extend(true,{specialEasing:{},easing:jQuery.easing._default},options),originalProperties:properties,originalOptions:options,startTime:fxNow||createFxNow(),duration:options.duration,tweens:[],createTween:function(prop,end){var tween=jQuery.Tween(elem,animation.opts,prop,end,animation.opts.specialEasing[prop]||animation.opts.easing);animation.tweens.push(tween);return tween},stop:function(gotoEnd){var index3=0,length2=gotoEnd?animation.tweens.length:0;if(stopped){return this}stopped=true;for(;index3<length2;index3++){animation.tweens[index3].run(1)}if(gotoEnd){deferred.notifyWith(elem,[animation,1,0]);deferred.resolveWith(elem,[animation,gotoEnd])}else{deferred.rejectWith(elem,[animation,gotoEnd])}return this}}),props=animation.props;propFilter(props,animation.opts.specialEasing);for(;index2<length;index2++){result=Animation.prefilters[index2].call(animation,elem,props,animation.opts);if(result){if(isFunction(result.stop)){jQuery._queueHooks(animation.elem,animation.opts.queue).stop=result.stop.bind(result)}return result}}jQuery.map(props,createTween,animation);if(isFunction(animation.opts.start)){animation.opts.start.call(elem,animation)}animation.progress(animation.opts.progress).done(animation.opts.done,animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);jQuery.fx.timer(jQuery.extend(tick,{elem,anim:animation,queue:animation.opts.queue}));return animation}jQuery.Animation=jQuery.extend(Animation,{tweeners:{"*":[function(prop,value){var tween=this.createTween(prop,value);adjustCSS(tween.elem,prop,rcssNum.exec(value),tween);return tween}]},tweener:function(props,callback){if(isFunction(props)){callback=props;props=["*"]}else{props=props.match(rnothtmlwhite)}var prop,index2=0,length=props.length;for(;index2<length;index2++){prop=props[index2];Animation.tweeners[prop]=Animation.tweeners[prop]||[];Animation.tweeners[prop].unshift(callback)}},prefilters:[defaultPrefilter],prefilter:function(callback,prepend2){if(prepend2){Animation.prefilters.unshift(callback)}else{Animation.prefilters.push(callback)}}});jQuery.speed=function(speed,easing,fn){var opt=speed&&typeof speed==="object"?jQuery.extend({},speed):{complete:fn||!fn&&easing||isFunction(speed)&&speed,duration:speed,easing:fn&&easing||easing&&!isFunction(easing)&&easing};if(jQuery.fx.off){opt.duration=0}else{if(typeof opt.duration!=="number"){if(opt.duration in jQuery.fx.speeds){opt.duration=jQuery.fx.speeds[opt.duration]}else{opt.duration=jQuery.fx.speeds._default}}}if(opt.queue==null||opt.queue===true){opt.queue="fx"}opt.old=opt.complete;opt.complete=function(){if(isFunction(opt.old)){opt.old.call(this)}if(opt.queue){jQuery.dequeue(this,opt.queue)}};return opt};jQuery.fn.extend({fadeTo:function(speed,to,easing,callback){return this.filter(isHiddenWithinTree).css("opacity",0).show().end().animate({opacity:to},speed,easing,callback)},animate:function(prop,speed,easing,callback){var empty=jQuery.isEmptyObject(prop),optall=jQuery.speed(speed,easing,callback),doAnimation=function(){var anim=Animation(this,jQuery.extend({},prop),optall);if(empty||dataPriv.get(this,"finish")){anim.stop(true)}};doAnimation.finish=doAnimation;return empty||optall.queue===false?this.each(doAnimation):this.queue(optall.queue,doAnimation)},stop:function(type,clearQueue,gotoEnd){var stopQueue=function(hooks){var stop=hooks.stop;delete hooks.stop;stop(gotoEnd)};if(typeof type!=="string"){gotoEnd=clearQueue;clearQueue=type;type=void 0}if(clearQueue){this.queue(type||"fx",[])}return this.each(function(){var dequeue=true,index2=type!=null&&type+"queueHooks",timers=jQuery.timers,data=dataPriv.get(this);if(index2){if(data[index2]&&data[index2].stop){stopQueue(data[index2])}}else{for(index2 in data){if(data[index2]&&data[index2].stop&&rrun.test(index2)){stopQueue(data[index2])}}}for(index2=timers.length;index2--;){if(timers[index2].elem===this&&(type==null||timers[index2].queue===type)){timers[index2].anim.stop(gotoEnd);dequeue=false;timers.splice(index2,1)}}if(dequeue||!gotoEnd){jQuery.dequeue(this,type)}})},finish:function(type){if(type!==false){type=type||"fx"}return this.each(function(){var index2,data=dataPriv.get(this),queue=data[type+"queue"],hooks=data[type+"queueHooks"],timers=jQuery.timers,length=queue?queue.length:0;data.finish=true;jQuery.queue(this,type,[]);if(hooks&&hooks.stop){hooks.stop.call(this,true)}for(index2=timers.length;index2--;){if(timers[index2].elem===this&&timers[index2].queue===type){timers[index2].anim.stop(true);timers.splice(index2,1)}}for(index2=0;index2<length;index2++){if(queue[index2]&&queue[index2].finish){queue[index2].finish.call(this)}}delete data.finish})}});jQuery.each(["toggle","show","hide"],function(_i,name){var cssFn=jQuery.fn[name];jQuery.fn[name]=function(speed,easing,callback){return speed==null||typeof speed==="boolean"?cssFn.apply(this,arguments):this.animate(genFx(name,true),speed,easing,callback)}});jQuery.each({slideDown:genFx("show"),slideUp:genFx("hide"),slideToggle:genFx("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(name,props){jQuery.fn[name]=function(speed,easing,callback){return this.animate(props,speed,easing,callback)}});jQuery.timers=[];jQuery.fx.tick=function(){var timer,i=0,timers=jQuery.timers;fxNow=Date.now();for(;i<timers.length;i++){timer=timers[i];if(!timer()&&timers[i]===timer){timers.splice(i--,1)}}if(!timers.length){jQuery.fx.stop()}fxNow=void 0};jQuery.fx.timer=function(timer){jQuery.timers.push(timer);jQuery.fx.start()};jQuery.fx.interval=13;jQuery.fx.start=function(){if(inProgress){return}inProgress=true;schedule()};jQuery.fx.stop=function(){inProgress=null};jQuery.fx.speeds={slow:600,fast:200,_default:400};jQuery.fn.delay=function(time,type){time=jQuery.fx?jQuery.fx.speeds[time]||time:time;type=type||"fx";return this.queue(type,function(next2,hooks){var timeout=window2.setTimeout(next2,time);hooks.stop=function(){window2.clearTimeout(timeout)}})};(function(){var input=document2.createElement("input"),select=document2.createElement("select"),opt=select.appendChild(document2.createElement("option"));input.type="checkbox";support2.checkOn=input.value!=="";support2.optSelected=opt.selected;input=document2.createElement("input");input.value="t";input.type="radio";support2.radioValue=input.value==="t"})();var boolHook,attrHandle=jQuery.expr.attrHandle;jQuery.fn.extend({attr:function(name,value){return access(this,jQuery.attr,name,value,arguments.length>1)},removeAttr:function(name){return this.each(function(){jQuery.removeAttr(this,name)})}});jQuery.extend({attr:function(elem,name,value){var ret,hooks,nType=elem.nodeType;if(nType===3||nType===8||nType===2){return}if(typeof elem.getAttribute==="undefined"){return jQuery.prop(elem,name,value)}if(nType!==1||!jQuery.isXMLDoc(elem)){hooks=jQuery.attrHooks[name.toLowerCase()]||(jQuery.expr.match.bool.test(name)?boolHook:void 0)}if(value!==void 0){if(value===null){jQuery.removeAttr(elem,name);return}if(hooks&&"set"in hooks&&(ret=hooks.set(elem,value,name))!==void 0){return ret}elem.setAttribute(name,value+"");return value}if(hooks&&"get"in hooks&&(ret=hooks.get(elem,name))!==null){return ret}ret=jQuery.find.attr(elem,name);return ret==null?void 0:ret},attrHooks:{type:{set:function(elem,value){if(!support2.radioValue&&value==="radio"&&nodeName(elem,"input")){var val=elem.value;elem.setAttribute("type",value);if(val){elem.value=val}return value}}}},removeAttr:function(elem,value){var name,i=0,attrNames=value&&value.match(rnothtmlwhite);if(attrNames&&elem.nodeType===1){while(name=attrNames[i++]){elem.removeAttribute(name)}}}});boolHook={set:function(elem,value,name){if(value===false){jQuery.removeAttr(elem,name)}else{elem.setAttribute(name,name)}return name}};jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g),function(_i,name){var getter=attrHandle[name]||jQuery.find.attr;attrHandle[name]=function(elem,name2,isXML){var ret,handle,lowercaseName=name2.toLowerCase();if(!isXML){handle=attrHandle[lowercaseName];attrHandle[lowercaseName]=ret;ret=getter(elem,name2,isXML)!=null?lowercaseName:null;attrHandle[lowercaseName]=handle}return ret}});var rfocusable=/^(?:input|select|textarea|button)$/i,rclickable=/^(?:a|area)$/i;jQuery.fn.extend({prop:function(name,value){return access(this,jQuery.prop,name,value,arguments.length>1)},removeProp:function(name){return this.each(function(){delete this[jQuery.propFix[name]||name]})}});jQuery.extend({prop:function(elem,name,value){var ret,hooks,nType=elem.nodeType;if(nType===3||nType===8||nType===2){return}if(nType!==1||!jQuery.isXMLDoc(elem)){name=jQuery.propFix[name]||name;hooks=jQuery.propHooks[name]}if(value!==void 0){if(hooks&&"set"in hooks&&(ret=hooks.set(elem,value,name))!==void 0){return ret}return elem[name]=value}if(hooks&&"get"in hooks&&(ret=hooks.get(elem,name))!==null){return ret}return elem[name]},propHooks:{tabIndex:{get:function(elem){var tabindex=jQuery.find.attr(elem,"tabindex");if(tabindex){return parseInt(tabindex,10)}if(rfocusable.test(elem.nodeName)||rclickable.test(elem.nodeName)&&elem.href){return 0}return-1}}},propFix:{"for":"htmlFor","class":"className"}});if(!support2.optSelected){jQuery.propHooks.selected={get:function(elem){var parent2=elem.parentNode;if(parent2&&parent2.parentNode){parent2.parentNode.selectedIndex}return null},set:function(elem){var parent2=elem.parentNode;if(parent2){parent2.selectedIndex;if(parent2.parentNode){parent2.parentNode.selectedIndex}}}}}jQuery.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){jQuery.propFix[this.toLowerCase()]=this});function stripAndCollapse(value){var tokens=value.match(rnothtmlwhite)||[];return tokens.join(" ")}function getClass(elem){return elem.getAttribute&&elem.getAttribute("class")||""}function classesToArray(value){if(Array.isArray(value)){return value}if(typeof value==="string"){return value.match(rnothtmlwhite)||[]}return[]}jQuery.fn.extend({addClass:function(value){var classNames,cur,curValue,className,i,finalValue;if(isFunction(value)){return this.each(function(j){jQuery(this).addClass(value.call(this,j,getClass(this)))})}classNames=classesToArray(value);if(classNames.length){return this.each(function(){curValue=getClass(this);cur=this.nodeType===1&&" "+stripAndCollapse(curValue)+" ";if(cur){for(i=0;i<classNames.length;i++){className=classNames[i];if(cur.indexOf(" "+className+" ")<0){cur+=className+" "}}finalValue=stripAndCollapse(cur);if(curValue!==finalValue){this.setAttribute("class",finalValue)}}})}return this},removeClass:function(value){var classNames,cur,curValue,className,i,finalValue;if(isFunction(value)){return this.each(function(j){jQuery(this).removeClass(value.call(this,j,getClass(this)))})}if(!arguments.length){return this.attr("class","")}classNames=classesToArray(value);if(classNames.length){return this.each(function(){curValue=getClass(this);cur=this.nodeType===1&&" "+stripAndCollapse(curValue)+" ";if(cur){for(i=0;i<classNames.length;i++){className=classNames[i];while(cur.indexOf(" "+className+" ")>-1){cur=cur.replace(" "+className+" "," ")}}finalValue=stripAndCollapse(cur);if(curValue!==finalValue){this.setAttribute("class",finalValue)}}})}return this},toggleClass:function(value,stateVal){var classNames,className,i,self,type=typeof value,isValidValue=type==="string"||Array.isArray(value);if(isFunction(value)){return this.each(function(i2){jQuery(this).toggleClass(value.call(this,i2,getClass(this),stateVal),stateVal)})}if(typeof stateVal==="boolean"&&isValidValue){return stateVal?this.addClass(value):this.removeClass(value)}classNames=classesToArray(value);return this.each(function(){if(isValidValue){self=jQuery(this);for(i=0;i<classNames.length;i++){className=classNames[i];if(self.hasClass(className)){self.removeClass(className)}else{self.addClass(className)}}}else if(value===void 0||type==="boolean"){className=getClass(this);if(className){dataPriv.set(this,"__className__",className)}if(this.setAttribute){this.setAttribute("class",className||value===false?"":dataPriv.get(this,"__className__")||"")}}})},hasClass:function(selector){var className,elem,i=0;className=" "+selector+" ";while(elem=this[i++]){if(elem.nodeType===1&&(" "+stripAndCollapse(getClass(elem))+" ").indexOf(className)>-1){return true}}return false}});var rreturn=/\r/g;jQuery.fn.extend({val:function(value){var hooks,ret,valueIsFunction,elem=this[0];if(!arguments.length){if(elem){hooks=jQuery.valHooks[elem.type]||jQuery.valHooks[elem.nodeName.toLowerCase()];if(hooks&&"get"in hooks&&(ret=hooks.get(elem,"value"))!==void 0){return ret}ret=elem.value;if(typeof ret==="string"){return ret.replace(rreturn,"")}return ret==null?"":ret}return}valueIsFunction=isFunction(value);return this.each(function(i){var val;if(this.nodeType!==1){return}if(valueIsFunction){val=value.call(this,i,jQuery(this).val())}else{val=value}if(val==null){val=""}else if(typeof val==="number"){val+=""}else if(Array.isArray(val)){val=jQuery.map(val,function(value2){return value2==null?"":value2+""})}hooks=jQuery.valHooks[this.type]||jQuery.valHooks[this.nodeName.toLowerCase()];if(!hooks||!("set"in hooks)||hooks.set(this,val,"value")===void 0){this.value=val}})}});jQuery.extend({valHooks:{option:{get:function(elem){var val=jQuery.find.attr(elem,"value");return val!=null?val:stripAndCollapse(jQuery.text(elem))}},select:{get:function(elem){var value,option,i,options=elem.options,index2=elem.selectedIndex,one=elem.type==="select-one",values=one?null:[],max=one?index2+1:options.length;if(index2<0){i=max}else{i=one?index2:0}for(;i<max;i++){option=options[i];if((option.selected||i===index2)&&!option.disabled&&(!option.parentNode.disabled||!nodeName(option.parentNode,"optgroup"))){value=jQuery(option).val();if(one){return value}values.push(value)}}return values},set:function(elem,value){var optionSet,option,options=elem.options,values=jQuery.makeArray(value),i=options.length;while(i--){option=options[i];if(option.selected=jQuery.inArray(jQuery.valHooks.option.get(option),values)>-1){optionSet=true}}if(!optionSet){elem.selectedIndex=-1}return values}}}});jQuery.each(["radio","checkbox"],function(){jQuery.valHooks[this]={set:function(elem,value){if(Array.isArray(value)){return elem.checked=jQuery.inArray(jQuery(elem).val(),value)>-1}}};if(!support2.checkOn){jQuery.valHooks[this].get=function(elem){return elem.getAttribute("value")===null?"on":elem.value}}});var location=window2.location;var nonce={guid:Date.now()};var rquery=/\?/;jQuery.parseXML=function(data){var xml,parserErrorElem;if(!data||typeof data!=="string"){return null}try{xml=new window2.DOMParser().parseFromString(data,"text/xml")}catch(e){}parserErrorElem=xml&&xml.getElementsByTagName("parsererror")[0];if(!xml||parserErrorElem){jQuery.error("Invalid XML: "+(parserErrorElem?jQuery.map(parserErrorElem.childNodes,function(el){return el.textContent}).join("\n"):data))}return xml};var rfocusMorph=/^(?:focusinfocus|focusoutblur)$/,stopPropagationCallback=function(e){e.stopPropagation()};jQuery.extend(jQuery.event,{trigger:function(event,data,elem,onlyHandlers){var i,cur,tmp,bubbleType,ontype,handle,special,lastElement,eventPath=[elem||document2],type=hasOwn.call(event,"type")?event.type:event,namespaces=hasOwn.call(event,"namespace")?event.namespace.split("."):[];cur=lastElement=tmp=elem=elem||document2;if(elem.nodeType===3||elem.nodeType===8){return}if(rfocusMorph.test(type+jQuery.event.triggered)){return}if(type.indexOf(".")>-1){namespaces=type.split(".");type=namespaces.shift();namespaces.sort()}ontype=type.indexOf(":")<0&&"on"+type;event=event[jQuery.expando]?event:new jQuery.Event(type,typeof event==="object"&&event);event.isTrigger=onlyHandlers?2:3;event.namespace=namespaces.join(".");event.rnamespace=event.namespace?new RegExp("(^|\\.)"+namespaces.join("\\.(?:.*\\.|)")+"(\\.|$)"):null;event.result=void 0;if(!event.target){event.target=elem}data=data==null?[event]:jQuery.makeArray(data,[event]);special=jQuery.event.special[type]||{};if(!onlyHandlers&&special.trigger&&special.trigger.apply(elem,data)===false){return}if(!onlyHandlers&&!special.noBubble&&!isWindow(elem)){bubbleType=special.delegateType||type;if(!rfocusMorph.test(bubbleType+type)){cur=cur.parentNode}for(;cur;cur=cur.parentNode){eventPath.push(cur);tmp=cur}if(tmp===(elem.ownerDocument||document2)){eventPath.push(tmp.defaultView||tmp.parentWindow||window2)}}i=0;while((cur=eventPath[i++])&&!event.isPropagationStopped()){lastElement=cur;event.type=i>1?bubbleType:special.bindType||type;handle=(dataPriv.get(cur,"events")||Object.create(null))[event.type]&&dataPriv.get(cur,"handle");if(handle){handle.apply(cur,data)}handle=ontype&&cur[ontype];if(handle&&handle.apply&&acceptData(cur)){event.result=handle.apply(cur,data);if(event.result===false){event.preventDefault()}}}event.type=type;if(!onlyHandlers&&!event.isDefaultPrevented()){if((!special._default||special._default.apply(eventPath.pop(),data)===false)&&acceptData(elem)){if(ontype&&isFunction(elem[type])&&!isWindow(elem)){tmp=elem[ontype];if(tmp){elem[ontype]=null}jQuery.event.triggered=type;if(event.isPropagationStopped()){lastElement.addEventListener(type,stopPropagationCallback)}elem[type]();if(event.isPropagationStopped()){lastElement.removeEventListener(type,stopPropagationCallback)}jQuery.event.triggered=void 0;if(tmp){elem[ontype]=tmp}}}}return event.result},simulate:function(type,elem,event){var e=jQuery.extend(new jQuery.Event,event,{type,isSimulated:true});jQuery.event.trigger(e,null,elem)}});jQuery.fn.extend({trigger:function(type,data){return this.each(function(){jQuery.event.trigger(type,data,this)})},triggerHandler:function(type,data){var elem=this[0];if(elem){return jQuery.event.trigger(type,data,elem,true)}}});var rbracket=/\[\]$/,rCRLF=/\r?\n/g,rsubmitterTypes=/^(?:submit|button|image|reset|file)$/i,rsubmittable=/^(?:input|select|textarea|keygen)/i;function buildParams(prefix,obj,traditional,add){var name;if(Array.isArray(obj)){jQuery.each(obj,function(i,v){if(traditional||rbracket.test(prefix)){add(prefix,v)}else{buildParams(prefix+"["+(typeof v==="object"&&v!=null?i:"")+"]",v,traditional,add)}})}else if(!traditional&&toType(obj)==="object"){for(name in obj){buildParams(prefix+"["+name+"]",obj[name],traditional,add)}}else{add(prefix,obj)}}jQuery.param=function(a,traditional){var prefix,s=[],add=function(key,valueOrFunction){var value=isFunction(valueOrFunction)?valueOrFunction():valueOrFunction;s[s.length]=encodeURIComponent(key)+"="+encodeURIComponent(value==null?"":value)};if(a==null){return""}if(Array.isArray(a)||a.jquery&&!jQuery.isPlainObject(a)){jQuery.each(a,function(){add(this.name,this.value)})}else{for(prefix in a){buildParams(prefix,a[prefix],traditional,add)}}return s.join("&")};jQuery.fn.extend({serialize:function(){return jQuery.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var elements=jQuery.prop(this,"elements");return elements?jQuery.makeArray(elements):this}).filter(function(){var type=this.type;return this.name&&!jQuery(this).is(":disabled")&&rsubmittable.test(this.nodeName)&&!rsubmitterTypes.test(type)&&(this.checked||!rcheckableType.test(type))}).map(function(_i,elem){var val=jQuery(this).val();if(val==null){return null}if(Array.isArray(val)){return jQuery.map(val,function(val2){return{name:elem.name,value:val2.replace(rCRLF,"\r\n")}})}return{name:elem.name,value:val.replace(rCRLF,"\r\n")}}).get()}});var r20=/%20/g,rhash=/#.*$/,rantiCache=/([?&])_=[^&]*/,rheaders=/^(.*?):[ \t]*([^\r\n]*)$/mg,rlocalProtocol=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,rnoContent=/^(?:GET|HEAD)$/,rprotocol=/^\/\//,prefilters={},transports={},allTypes="*/".concat("*"),originAnchor=document2.createElement("a");originAnchor.href=location.href;function addToPrefiltersOrTransports(structure){return function(dataTypeExpression,func){if(typeof dataTypeExpression!=="string"){func=dataTypeExpression;dataTypeExpression="*"}var dataType,i=0,dataTypes=dataTypeExpression.toLowerCase().match(rnothtmlwhite)||[];if(isFunction(func)){while(dataType=dataTypes[i++]){if(dataType[0]==="+"){dataType=dataType.slice(1)||"*";(structure[dataType]=structure[dataType]||[]).unshift(func)}else{(structure[dataType]=structure[dataType]||[]).push(func)}}}}}function inspectPrefiltersOrTransports(structure,options,originalOptions,jqXHR){var inspected={},seekingTransport=structure===transports;function inspect(dataType){var selected;inspected[dataType]=true;jQuery.each(structure[dataType]||[],function(_,prefilterOrFactory){var dataTypeOrTransport=prefilterOrFactory(options,originalOptions,jqXHR);if(typeof dataTypeOrTransport==="string"&&!seekingTransport&&!inspected[dataTypeOrTransport]){options.dataTypes.unshift(dataTypeOrTransport);inspect(dataTypeOrTransport);return false}else if(seekingTransport){return!(selected=dataTypeOrTransport)}});return selected}return inspect(options.dataTypes[0])||!inspected["*"]&&inspect("*")}function ajaxExtend(target,src){var key,deep,flatOptions=jQuery.ajaxSettings.flatOptions||{};for(key in src){if(src[key]!==void 0){(flatOptions[key]?target:deep||(deep={}))[key]=src[key]}}if(deep){jQuery.extend(true,target,deep)}return target}function ajaxHandleResponses(s,jqXHR,responses){var ct,type,finalDataType,firstDataType,contents=s.contents,dataTypes=s.dataTypes;while(dataTypes[0]==="*"){dataTypes.shift();if(ct===void 0){ct=s.mimeType||jqXHR.getResponseHeader("Content-Type")}}if(ct){for(type in contents){if(contents[type]&&contents[type].test(ct)){dataTypes.unshift(type);break}}}if(dataTypes[0]in responses){finalDataType=dataTypes[0]}else{for(type in responses){if(!dataTypes[0]||s.converters[type+" "+dataTypes[0]]){finalDataType=type;break}if(!firstDataType){firstDataType=type}}finalDataType=finalDataType||firstDataType}if(finalDataType){if(finalDataType!==dataTypes[0]){dataTypes.unshift(finalDataType)}return responses[finalDataType]}}function ajaxConvert(s,response,jqXHR,isSuccess){var conv2,current,conv,tmp,prev2,converters={},dataTypes=s.dataTypes.slice();if(dataTypes[1]){for(conv in s.converters){converters[conv.toLowerCase()]=s.converters[conv]}}current=dataTypes.shift();while(current){if(s.responseFields[current]){jqXHR[s.responseFields[current]]=response}if(!prev2&&isSuccess&&s.dataFilter){response=s.dataFilter(response,s.dataType)}prev2=current;current=dataTypes.shift();if(current){if(current==="*"){current=prev2}else if(prev2!=="*"&&prev2!==current){conv=converters[prev2+" "+current]||converters["* "+current];if(!conv){for(conv2 in converters){tmp=conv2.split(" ");if(tmp[1]===current){conv=converters[prev2+" "+tmp[0]]||converters["* "+tmp[0]];if(conv){if(conv===true){conv=converters[conv2]}else if(converters[conv2]!==true){current=tmp[0];dataTypes.unshift(tmp[1])}break}}}}if(conv!==true){if(conv&&s.throws){response=conv(response)}else{try{response=conv(response)}catch(e){return{state:"parsererror",error:conv?e:"No conversion from "+prev2+" to "+current}}}}}}}return{state:"success",data:response}}jQuery.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:location.href,type:"GET",isLocal:rlocalProtocol.test(location.protocol),global:true,processData:true,async:true,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":allTypes,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":true,"text json":JSON.parse,"text xml":jQuery.parseXML},flatOptions:{url:true,context:true}},ajaxSetup:function(target,settings){return settings?ajaxExtend(ajaxExtend(target,jQuery.ajaxSettings),settings):ajaxExtend(jQuery.ajaxSettings,target)},ajaxPrefilter:addToPrefiltersOrTransports(prefilters),ajaxTransport:addToPrefiltersOrTransports(transports),ajax:function(url,options){if(typeof url==="object"){options=url;url=void 0}options=options||{};var transport,cacheURL,responseHeadersString,responseHeaders,timeoutTimer,urlAnchor,completed2,fireGlobals,i,uncached,s=jQuery.ajaxSetup({},options),callbackContext=s.context||s,globalEventContext=s.context&&(callbackContext.nodeType||callbackContext.jquery)?jQuery(callbackContext):jQuery.event,deferred=jQuery.Deferred(),completeDeferred=jQuery.Callbacks("once memory"),statusCode=s.statusCode||{},requestHeaders={},requestHeadersNames={},strAbort="canceled",jqXHR={readyState:0,getResponseHeader:function(key){var match;if(completed2){if(!responseHeaders){responseHeaders={};while(match=rheaders.exec(responseHeadersString)){responseHeaders[match[1].toLowerCase()+" "]=(responseHeaders[match[1].toLowerCase()+" "]||[]).concat(match[2])}}match=responseHeaders[key.toLowerCase()+" "]}return match==null?null:match.join(", ")},getAllResponseHeaders:function(){return completed2?responseHeadersString:null},setRequestHeader:function(name,value){if(completed2==null){name=requestHeadersNames[name.toLowerCase()]=requestHeadersNames[name.toLowerCase()]||name;requestHeaders[name]=value}return this},overrideMimeType:function(type){if(completed2==null){s.mimeType=type}return this},statusCode:function(map){var code;if(map){if(completed2){jqXHR.always(map[jqXHR.status])}else{for(code in map){statusCode[code]=[statusCode[code],map[code]]}}}return this},abort:function(statusText){var finalText=statusText||strAbort;if(transport){transport.abort(finalText)}done(0,finalText);return this}};deferred.promise(jqXHR);s.url=((url||s.url||location.href)+"").replace(rprotocol,location.protocol+"//");s.type=options.method||options.type||s.method||s.type;s.dataTypes=(s.dataType||"*").toLowerCase().match(rnothtmlwhite)||[""];if(s.crossDomain==null){urlAnchor=document2.createElement("a");try{urlAnchor.href=s.url;urlAnchor.href=urlAnchor.href;s.crossDomain=originAnchor.protocol+"//"+originAnchor.host!==urlAnchor.protocol+"//"+urlAnchor.host}catch(e){s.crossDomain=true}}if(s.data&&s.processData&&typeof s.data!=="string"){s.data=jQuery.param(s.data,s.traditional)}inspectPrefiltersOrTransports(prefilters,s,options,jqXHR);if(completed2){return jqXHR}fireGlobals=jQuery.event&&s.global;if(fireGlobals&&jQuery.active++===0){jQuery.event.trigger("ajaxStart")}s.type=s.type.toUpperCase();s.hasContent=!rnoContent.test(s.type);cacheURL=s.url.replace(rhash,"");if(!s.hasContent){uncached=s.url.slice(cacheURL.length);if(s.data&&(s.processData||typeof s.data==="string")){cacheURL+=(rquery.test(cacheURL)?"&":"?")+s.data;delete s.data}if(s.cache===false){cacheURL=cacheURL.replace(rantiCache,"$1");uncached=(rquery.test(cacheURL)?"&":"?")+"_="+nonce.guid+++uncached}s.url=cacheURL+uncached}else if(s.data&&s.processData&&(s.contentType||"").indexOf("application/x-www-form-urlencoded")===0){s.data=s.data.replace(r20,"+")}if(s.ifModified){if(jQuery.lastModified[cacheURL]){jqXHR.setRequestHeader("If-Modified-Since",jQuery.lastModified[cacheURL])}if(jQuery.etag[cacheURL]){jqXHR.setRequestHeader("If-None-Match",jQuery.etag[cacheURL])}}if(s.data&&s.hasContent&&s.contentType!==false||options.contentType){jqXHR.setRequestHeader("Content-Type",s.contentType)}jqXHR.setRequestHeader("Accept",s.dataTypes[0]&&s.accepts[s.dataTypes[0]]?s.accepts[s.dataTypes[0]]+(s.dataTypes[0]!=="*"?", "+allTypes+"; q=0.01":""):s.accepts["*"]);for(i in s.headers){jqXHR.setRequestHeader(i,s.headers[i])}if(s.beforeSend&&(s.beforeSend.call(callbackContext,jqXHR,s)===false||completed2)){return jqXHR.abort()}strAbort="abort";completeDeferred.add(s.complete);jqXHR.done(s.success);jqXHR.fail(s.error);transport=inspectPrefiltersOrTransports(transports,s,options,jqXHR);if(!transport){done(-1,"No Transport")}else{jqXHR.readyState=1;if(fireGlobals){globalEventContext.trigger("ajaxSend",[jqXHR,s])}if(completed2){return jqXHR}if(s.async&&s.timeout>0){timeoutTimer=window2.setTimeout(function(){jqXHR.abort("timeout")},s.timeout)}try{completed2=false;transport.send(requestHeaders,done)}catch(e){if(completed2){throw e}done(-1,e)}}function done(status,nativeStatusText,responses,headers){var isSuccess,success,error,response,modified,statusText=nativeStatusText;if(completed2){return}completed2=true;if(timeoutTimer){window2.clearTimeout(timeoutTimer)}transport=void 0;responseHeadersString=headers||"";jqXHR.readyState=status>0?4:0;isSuccess=status>=200&&status<300||status===304;if(responses){response=ajaxHandleResponses(s,jqXHR,responses)}if(!isSuccess&&jQuery.inArray("script",s.dataTypes)>-1&&jQuery.inArray("json",s.dataTypes)<0){s.converters["text script"]=function(){}}response=ajaxConvert(s,response,jqXHR,isSuccess);if(isSuccess){if(s.ifModified){modified=jqXHR.getResponseHeader("Last-Modified");if(modified){jQuery.lastModified[cacheURL]=modified}modified=jqXHR.getResponseHeader("etag");if(modified){jQuery.etag[cacheURL]=modified}}if(status===204||s.type==="HEAD"){statusText="nocontent"}else if(status===304){statusText="notmodified"}else{statusText=response.state;success=response.data;error=response.error;isSuccess=!error}}else{error=statusText;if(status||!statusText){statusText="error";if(status<0){status=0}}}jqXHR.status=status;jqXHR.statusText=(nativeStatusText||statusText)+"";if(isSuccess){deferred.resolveWith(callbackContext,[success,statusText,jqXHR])}else{deferred.rejectWith(callbackContext,[jqXHR,statusText,error])}jqXHR.statusCode(statusCode);statusCode=void 0;if(fireGlobals){globalEventContext.trigger(isSuccess?"ajaxSuccess":"ajaxError",[jqXHR,s,isSuccess?success:error])}completeDeferred.fireWith(callbackContext,[jqXHR,statusText]);if(fireGlobals){globalEventContext.trigger("ajaxComplete",[jqXHR,s]);if(!--jQuery.active){jQuery.event.trigger("ajaxStop")}}}return jqXHR},getJSON:function(url,data,callback){return jQuery.get(url,data,callback,"json")},getScript:function(url,callback){return jQuery.get(url,void 0,callback,"script")}});jQuery.each(["get","post"],function(_i,method){jQuery[method]=function(url,data,callback,type){if(isFunction(data)){type=type||callback;callback=data;data=void 0}return jQuery.ajax(jQuery.extend({url,type:method,dataType:type,data,success:callback},jQuery.isPlainObject(url)&&url))}});jQuery.ajaxPrefilter(function(s){var i;for(i in s.headers){if(i.toLowerCase()==="content-type"){s.contentType=s.headers[i]||""}}});jQuery._evalUrl=function(url,options,doc){return jQuery.ajax({url,type:"GET",dataType:"script",cache:true,async:false,global:false,converters:{"text script":function(){}},dataFilter:function(response){jQuery.globalEval(response,options,doc)}})};jQuery.fn.extend({wrapAll:function(html2){var wrap;if(this[0]){if(isFunction(html2)){html2=html2.call(this[0])}wrap=jQuery(html2,this[0].ownerDocument).eq(0).clone(true);if(this[0].parentNode){wrap.insertBefore(this[0])}wrap.map(function(){var elem=this;while(elem.firstElementChild){elem=elem.firstElementChild}return elem}).append(this)}return this},wrapInner:function(html2){if(isFunction(html2)){return this.each(function(i){jQuery(this).wrapInner(html2.call(this,i))})}return this.each(function(){var self=jQuery(this),contents=self.contents();if(contents.length){contents.wrapAll(html2)}else{self.append(html2)}})},wrap:function(html2){var htmlIsFunction=isFunction(html2);return this.each(function(i){jQuery(this).wrapAll(htmlIsFunction?html2.call(this,i):html2)})},unwrap:function(selector){this.parent(selector).not("body").each(function(){jQuery(this).replaceWith(this.childNodes)});return this}});jQuery.expr.pseudos.hidden=function(elem){return!jQuery.expr.pseudos.visible(elem)};jQuery.expr.pseudos.visible=function(elem){return!!(elem.offsetWidth||elem.offsetHeight||elem.getClientRects().length)};jQuery.ajaxSettings.xhr=function(){try{return new window2.XMLHttpRequest}catch(e){}};var xhrSuccessStatus={0:200,1223:204},xhrSupported=jQuery.ajaxSettings.xhr();support2.cors=!!xhrSupported&&"withCredentials"in xhrSupported;support2.ajax=xhrSupported=!!xhrSupported;jQuery.ajaxTransport(function(options){var callback,errorCallback;if(support2.cors||xhrSupported&&!options.crossDomain){return{send:function(headers,complete){var i,xhr=options.xhr();xhr.open(options.type,options.url,options.async,options.username,options.password);if(options.xhrFields){for(i in options.xhrFields){xhr[i]=options.xhrFields[i]}}if(options.mimeType&&xhr.overrideMimeType){xhr.overrideMimeType(options.mimeType)}if(!options.crossDomain&&!headers["X-Requested-With"]){headers["X-Requested-With"]="XMLHttpRequest"}for(i in headers){xhr.setRequestHeader(i,headers[i])}callback=function(type){return function(){if(callback){callback=errorCallback=xhr.onload=xhr.onerror=xhr.onabort=xhr.ontimeout=xhr.onreadystatechange=null;if(type==="abort"){xhr.abort()}else if(type==="error"){if(typeof xhr.status!=="number"){complete(0,"error")}else{complete(xhr.status,xhr.statusText)}}else{complete(xhrSuccessStatus[xhr.status]||xhr.status,xhr.statusText,(xhr.responseType||"text")!=="text"||typeof xhr.responseText!=="string"?{binary:xhr.response}:{text:xhr.responseText},xhr.getAllResponseHeaders())}}}};xhr.onload=callback();errorCallback=xhr.onerror=xhr.ontimeout=callback("error");if(xhr.onabort!==void 0){xhr.onabort=errorCallback}else{xhr.onreadystatechange=function(){if(xhr.readyState===4){window2.setTimeout(function(){if(callback){errorCallback()}})}}}callback=callback("abort");try{xhr.send(options.hasContent&&options.data||null)}catch(e){if(callback){throw e}}},abort:function(){if(callback){callback()}}}}});jQuery.ajaxPrefilter(function(s){if(s.crossDomain){s.contents.script=false}});jQuery.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(text2){jQuery.globalEval(text2);return text2}}});jQuery.ajaxPrefilter("script",function(s){if(s.cache===void 0){s.cache=false}if(s.crossDomain){s.type="GET"}});jQuery.ajaxTransport("script",function(s){if(s.crossDomain||s.scriptAttrs){var script,callback;return{send:function(_,complete){script=jQuery("<script>").attr(s.scriptAttrs||{}).prop({charset:s.scriptCharset,src:s.url}).on("load error",callback=function(evt){script.remove();callback=null;if(evt){complete(evt.type==="error"?404:200,evt.type)}});document2.head.appendChild(script[0])},abort:function(){if(callback){callback()}}}}});var oldCallbacks=[],rjsonp=/(=)\?(?=&|$)|\?\?/;jQuery.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var callback=oldCallbacks.pop()||jQuery.expando+"_"+nonce.guid++;this[callback]=true;return callback}});jQuery.ajaxPrefilter("json jsonp",function(s,originalSettings,jqXHR){var callbackName,overwritten,responseContainer,jsonProp=s.jsonp!==false&&(rjsonp.test(s.url)?"url":typeof s.data==="string"&&(s.contentType||"").indexOf("application/x-www-form-urlencoded")===0&&rjsonp.test(s.data)&&"data");if(jsonProp||s.dataTypes[0]==="jsonp"){callbackName=s.jsonpCallback=isFunction(s.jsonpCallback)?s.jsonpCallback():s.jsonpCallback;if(jsonProp){s[jsonProp]=s[jsonProp].replace(rjsonp,"$1"+callbackName)}else if(s.jsonp!==false){s.url+=(rquery.test(s.url)?"&":"?")+s.jsonp+"="+callbackName}s.converters["script json"]=function(){if(!responseContainer){jQuery.error(callbackName+" was not called")}return responseContainer[0]};s.dataTypes[0]="json";overwritten=window2[callbackName];window2[callbackName]=function(){responseContainer=arguments};jqXHR.always(function(){if(overwritten===void 0){jQuery(window2).removeProp(callbackName)}else{window2[callbackName]=overwritten}if(s[callbackName]){s.jsonpCallback=originalSettings.jsonpCallback;oldCallbacks.push(callbackName)}if(responseContainer&&isFunction(overwritten)){overwritten(responseContainer[0])}responseContainer=overwritten=void 0});return"script"}});support2.createHTMLDocument=function(){var body=document2.implementation.createHTMLDocument("").body;body.innerHTML="<form></form><form></form>";return body.childNodes.length===2}();jQuery.parseHTML=function(data,context,keepScripts){if(typeof data!=="string"){return[]}if(typeof context==="boolean"){keepScripts=context;context=false}var base,parsed,scripts;if(!context){if(support2.createHTMLDocument){context=document2.implementation.createHTMLDocument("");base=context.createElement("base");base.href=document2.location.href;context.head.appendChild(base)}else{context=document2}}parsed=rsingleTag.exec(data);scripts=!keepScripts&&[];if(parsed){return[context.createElement(parsed[1])]}parsed=buildFragment([data],context,scripts);if(scripts&&scripts.length){jQuery(scripts).remove()}return jQuery.merge([],parsed.childNodes)};jQuery.fn.load=function(url,params,callback){var selector,type,response,self=this,off3=url.indexOf(" ");if(off3>-1){selector=stripAndCollapse(url.slice(off3));url=url.slice(0,off3)}if(isFunction(params)){callback=params;params=void 0}else if(params&&typeof params==="object"){type="POST"}if(self.length>0){jQuery.ajax({url,type:type||"GET",dataType:"html",data:params}).done(function(responseText){response=arguments;self.html(selector?jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector):responseText)}).always(callback&&function(jqXHR,status){self.each(function(){callback.apply(this,response||[jqXHR.responseText,status,jqXHR])})})}return this};jQuery.expr.pseudos.animated=function(elem){return jQuery.grep(jQuery.timers,function(fn){return elem===fn.elem}).length};jQuery.offset={setOffset:function(elem,options,i){var curPosition,curLeft,curCSSTop,curTop,curOffset,curCSSLeft,calculatePosition,position=jQuery.css(elem,"position"),curElem=jQuery(elem),props={};if(position==="static"){elem.style.position="relative"}curOffset=curElem.offset();curCSSTop=jQuery.css(elem,"top");curCSSLeft=jQuery.css(elem,"left");calculatePosition=(position==="absolute"||position==="fixed")&&(curCSSTop+curCSSLeft).indexOf("auto")>-1;if(calculatePosition){curPosition=curElem.position();curTop=curPosition.top;curLeft=curPosition.left}else{curTop=parseFloat(curCSSTop)||0;curLeft=parseFloat(curCSSLeft)||0}if(isFunction(options)){options=options.call(elem,i,jQuery.extend({},curOffset))}if(options.top!=null){props.top=options.top-curOffset.top+curTop}if(options.left!=null){props.left=options.left-curOffset.left+curLeft}if("using"in options){options.using.call(elem,props)}else{curElem.css(props)}}};jQuery.fn.extend({offset:function(options){if(arguments.length){return options===void 0?this:this.each(function(i){jQuery.offset.setOffset(this,options,i)})}var rect,win,elem=this[0];if(!elem){return}if(!elem.getClientRects().length){return{top:0,left:0}}rect=elem.getBoundingClientRect();win=elem.ownerDocument.defaultView;return{top:rect.top+win.pageYOffset,left:rect.left+win.pageXOffset}},position:function(){if(!this[0]){return}var offsetParent,offset2,doc,elem=this[0],parentOffset={top:0,left:0};if(jQuery.css(elem,"position")==="fixed"){offset2=elem.getBoundingClientRect()}else{offset2=this.offset();doc=elem.ownerDocument;offsetParent=elem.offsetParent||doc.documentElement;while(offsetParent&&(offsetParent===doc.body||offsetParent===doc.documentElement)&&jQuery.css(offsetParent,"position")==="static"){offsetParent=offsetParent.parentNode}if(offsetParent&&offsetParent!==elem&&offsetParent.nodeType===1){parentOffset=jQuery(offsetParent).offset();parentOffset.top+=jQuery.css(offsetParent,"borderTopWidth",true);parentOffset.left+=jQuery.css(offsetParent,"borderLeftWidth",true)}}return{top:offset2.top-parentOffset.top-jQuery.css(elem,"marginTop",true),left:offset2.left-parentOffset.left-jQuery.css(elem,"marginLeft",true)}},offsetParent:function(){return this.map(function(){var offsetParent=this.offsetParent;while(offsetParent&&jQuery.css(offsetParent,"position")==="static"){offsetParent=offsetParent.offsetParent}return offsetParent||documentElement})}});jQuery.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(method,prop){var top=prop==="pageYOffset";jQuery.fn[method]=function(val){return access(this,function(elem,method2,val2){var win;if(isWindow(elem)){win=elem}else if(elem.nodeType===9){win=elem.defaultView}if(val2===void 0){return win?win[prop]:elem[method2]}if(win){win.scrollTo(!top?val2:win.pageXOffset,top?val2:win.pageYOffset)}else{elem[method2]=val2}},method,val,arguments.length)}});jQuery.each(["top","left"],function(_i,prop){jQuery.cssHooks[prop]=addGetHookIf(support2.pixelPosition,function(elem,computed){if(computed){computed=curCSS(elem,prop);return rnumnonpx.test(computed)?jQuery(elem).position()[prop]+"px":computed}})});jQuery.each({Height:"height",Width:"width"},function(name,type){jQuery.each({padding:"inner"+name,content:type,"":"outer"+name},function(defaultExtra,funcName){jQuery.fn[funcName]=function(margin,value){var chainable=arguments.length&&(defaultExtra||typeof margin!=="boolean"),extra=defaultExtra||(margin===true||value===true?"margin":"border");return access(this,function(elem,type2,value2){var doc;if(isWindow(elem)){return funcName.indexOf("outer")===0?elem["inner"+name]:elem.document.documentElement["client"+name]}if(elem.nodeType===9){doc=elem.documentElement;return Math.max(elem.body["scroll"+name],doc["scroll"+name],elem.body["offset"+name],doc["offset"+name],doc["client"+name])}return value2===void 0?jQuery.css(elem,type2,extra):jQuery.style(elem,type2,value2,extra)},type,chainable?margin:void 0,chainable)}})});jQuery.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(_i,type){jQuery.fn[type]=function(fn){return this.on(type,fn)}});jQuery.fn.extend({bind:function(types,data,fn){return this.on(types,null,data,fn)},unbind:function(types,fn){return this.off(types,null,fn)},delegate:function(selector,types,data,fn){return this.on(types,selector,data,fn)},undelegate:function(selector,types,fn){return arguments.length===1?this.off(selector,"**"):this.off(types,selector||"**",fn)},hover:function(fnOver,fnOut){return this.mouseenter(fnOver).mouseleave(fnOut||fnOver)}});jQuery.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(_i,name){jQuery.fn[name]=function(data,fn){return arguments.length>0?this.on(name,null,data,fn):this.trigger(name)}});var rtrim=/^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;jQuery.proxy=function(fn,context){var tmp,args,proxy;if(typeof context==="string"){tmp=fn[context];context=fn;fn=tmp}if(!isFunction(fn)){return void 0}args=slice.call(arguments,2);proxy=function(){return fn.apply(context||this,args.concat(slice.call(arguments)))};proxy.guid=fn.guid=fn.guid||jQuery.guid++;return proxy};jQuery.holdReady=function(hold){if(hold){jQuery.readyWait++}else{jQuery.ready(true)}};jQuery.isArray=Array.isArray;jQuery.parseJSON=JSON.parse;jQuery.nodeName=nodeName;jQuery.isFunction=isFunction;jQuery.isWindow=isWindow;jQuery.camelCase=camelCase;jQuery.type=toType;jQuery.now=Date.now;jQuery.isNumeric=function(obj){var type=jQuery.type(obj);return(type==="number"||type==="string")&&!isNaN(obj-parseFloat(obj))};jQuery.trim=function(text2){return text2==null?"":(text2+"").replace(rtrim,"$1")};if(typeof define==="function"&&define.amd){define("jquery",[],function(){return jQuery})}var _jQuery=window2.jQuery,_$=window2.$;jQuery.noConflict=function(deep){if(window2.$===jQuery){window2.$=_$}if(deep&&window2.jQuery===jQuery){window2.jQuery=_jQuery}return jQuery};if(typeof noGlobal==="undefined"){window2.jQuery=window2.$=jQuery}return jQuery})}});var import_jquery=__toModule(require_jquery());function isObject(obj){return obj!==null&&typeof obj==="object"&&"constructor"in obj&&obj.constructor===Object}function extend(target,src){if(target===void 0){target={}}if(src===void 0){src={}}Object.keys(src).forEach(function(key){if(typeof target[key]==="undefined")target[key]=src[key];else if(isObject(src[key])&&isObject(target[key])&&Object.keys(src[key]).length>0){extend(target[key],src[key])}})}var ssrDocument={body:{},addEventListener:function(){},removeEventListener:function(){},activeElement:{blur:function(){},nodeName:""},querySelector:function(){return null},querySelectorAll:function(){return[]},getElementById:function(){return null},createEvent:function(){return{initEvent:function(){}}},createElement:function(){return{children:[],childNodes:[],style:{},setAttribute:function(){},getElementsByTagName:function(){return[]}}},createElementNS:function(){return{}},importNode:function(){return null},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function getDocument(){var doc=typeof document!=="undefined"?document:{};extend(doc,ssrDocument);return doc}var ssrWindow={document:ssrDocument,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState:function(){},pushState:function(){},go:function(){},back:function(){}},CustomEvent:function CustomEvent(){return this},addEventListener:function(){},removeEventListener:function(){},getComputedStyle:function(){return{getPropertyValue:function(){return""}}},Image:function(){},Date:function(){},screen:{},setTimeout:function(){},clearTimeout:function(){},matchMedia:function(){return{}},requestAnimationFrame:function(callback){if(typeof setTimeout==="undefined"){callback();return null}return setTimeout(callback,0)},cancelAnimationFrame:function(id){if(typeof setTimeout==="undefined"){return}clearTimeout(id)}};function getWindow(){var win=typeof window!=="undefined"?window:{};extend(win,ssrWindow);return win}function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype);subClass.prototype.constructor=subClass;subClass.__proto__=superClass}function _getPrototypeOf(o){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf2(o2){return o2.__proto__||Object.getPrototypeOf(o2)};return _getPrototypeOf(o)}function _setPrototypeOf(o,p){_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf2(o2,p2){o2.__proto__=p2;return o2};return _setPrototypeOf(o,p)}function _isNativeReflectConstruct(){if(typeof Reflect==="undefined"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy==="function")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true}catch(e){return false}}function _construct(Parent,args,Class){if(_isNativeReflectConstruct()){_construct=Reflect.construct}else{_construct=function _construct2(Parent2,args2,Class2){var a=[null];a.push.apply(a,args2);var Constructor=Function.bind.apply(Parent2,a);var instance=new Constructor;if(Class2)_setPrototypeOf(instance,Class2.prototype);return instance}}return _construct.apply(null,arguments)}function _isNativeFunction(fn){return Function.toString.call(fn).indexOf("[native code]")!==-1}function _wrapNativeSuper(Class){var _cache=typeof Map==="function"?new Map:void 0;_wrapNativeSuper=function _wrapNativeSuper2(Class2){if(Class2===null||!_isNativeFunction(Class2))return Class2;if(typeof Class2!=="function"){throw new TypeError("Super expression must either be null or a function")}if(typeof _cache!=="undefined"){if(_cache.has(Class2))return _cache.get(Class2);_cache.set(Class2,Wrapper)}function Wrapper(){return _construct(Class2,arguments,_getPrototypeOf(this).constructor)}Wrapper.prototype=Object.create(Class2.prototype,{constructor:{value:Wrapper,enumerable:false,writable:true,configurable:true}});return _setPrototypeOf(Wrapper,Class2)};return _wrapNativeSuper(Class)}function _assertThisInitialized(self){if(self===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return self}function makeReactive(obj){var proto=obj.__proto__;Object.defineProperty(obj,"__proto__",{get:function get(){return proto},set:function set(value){proto.__proto__=value}})}var Dom7=function(_Array){_inheritsLoose(Dom72,_Array);function Dom72(items){var _this;_this=_Array.call.apply(_Array,[this].concat(items))||this;makeReactive(_assertThisInitialized(_this));return _this}return Dom72}(_wrapNativeSuper(Array));function arrayFlat(arr){if(arr===void 0){arr=[]}var res=[];arr.forEach(function(el){if(Array.isArray(el)){res.push.apply(res,arrayFlat(el))}else{res.push(el)}});return res}function arrayFilter(arr,callback){return Array.prototype.filter.call(arr,callback)}function arrayUnique(arr){var uniqueArray=[];for(var i=0;i<arr.length;i+=1){if(uniqueArray.indexOf(arr[i])===-1)uniqueArray.push(arr[i])}return uniqueArray}function qsa(selector,context){if(typeof selector!=="string"){return[selector]}var a=[];var res=context.querySelectorAll(selector);for(var i=0;i<res.length;i+=1){a.push(res[i])}return a}function $(selector,context){var window2=getWindow();var document2=getDocument();var arr=[];if(!context&&selector instanceof Dom7){return selector}if(!selector){return new Dom7(arr)}if(typeof selector==="string"){var html2=selector.trim();if(html2.indexOf("<")>=0&&html2.indexOf(">")>=0){var toCreate="div";if(html2.indexOf("<li")===0)toCreate="ul";if(html2.indexOf("<tr")===0)toCreate="tbody";if(html2.indexOf("<td")===0||html2.indexOf("<th")===0)toCreate="tr";if(html2.indexOf("<tbody")===0)toCreate="table";if(html2.indexOf("<option")===0)toCreate="select";var tempParent=document2.createElement(toCreate);tempParent.innerHTML=html2;for(var i=0;i<tempParent.childNodes.length;i+=1){arr.push(tempParent.childNodes[i])}}else{arr=qsa(selector.trim(),context||document2)}}else if(selector.nodeType||selector===window2||selector===document2){arr.push(selector)}else if(Array.isArray(selector)){if(selector instanceof Dom7)return selector;arr=selector}return new Dom7(arrayUnique(arr))}$.fn=Dom7.prototype;function addClass(){for(var _len=arguments.length,classes=new Array(_len),_key=0;_key<_len;_key++){classes[_key]=arguments[_key]}var classNames=arrayFlat(classes.map(function(c){return c.split(" ")}));this.forEach(function(el){var _el$classList;(_el$classList=el.classList).add.apply(_el$classList,classNames)});return this}function removeClass(){for(var _len2=arguments.length,classes=new Array(_len2),_key2=0;_key2<_len2;_key2++){classes[_key2]=arguments[_key2]}var classNames=arrayFlat(classes.map(function(c){return c.split(" ")}));this.forEach(function(el){var _el$classList2;(_el$classList2=el.classList).remove.apply(_el$classList2,classNames)});return this}function toggleClass(){for(var _len3=arguments.length,classes=new Array(_len3),_key3=0;_key3<_len3;_key3++){classes[_key3]=arguments[_key3]}var classNames=arrayFlat(classes.map(function(c){return c.split(" ")}));this.forEach(function(el){classNames.forEach(function(className){el.classList.toggle(className)})})}function hasClass(){for(var _len4=arguments.length,classes=new Array(_len4),_key4=0;_key4<_len4;_key4++){classes[_key4]=arguments[_key4]}var classNames=arrayFlat(classes.map(function(c){return c.split(" ")}));return arrayFilter(this,function(el){return classNames.filter(function(className){return el.classList.contains(className)}).length>0}).length>0}function attr(attrs,value){if(arguments.length===1&&typeof attrs==="string"){if(this[0])return this[0].getAttribute(attrs);return void 0}for(var i=0;i<this.length;i+=1){if(arguments.length===2){this[i].setAttribute(attrs,value)}else{for(var attrName in attrs){this[i][attrName]=attrs[attrName];this[i].setAttribute(attrName,attrs[attrName])}}}return this}function removeAttr(attr2){for(var i=0;i<this.length;i+=1){this[i].removeAttribute(attr2)}return this}function transform(transform2){for(var i=0;i<this.length;i+=1){this[i].style.transform=transform2}return this}function transition(duration){for(var i=0;i<this.length;i+=1){this[i].style.transitionDuration=typeof duration!=="string"?duration+"ms":duration}return this}function on(){for(var _len5=arguments.length,args=new Array(_len5),_key5=0;_key5<_len5;_key5++){args[_key5]=arguments[_key5]}var eventType=args[0],targetSelector=args[1],listener=args[2],capture=args[3];if(typeof args[1]==="function"){eventType=args[0];listener=args[1];capture=args[2];targetSelector=void 0}if(!capture)capture=false;function handleLiveEvent(e){var target=e.target;if(!target)return;var eventData=e.target.dom7EventData||[];if(eventData.indexOf(e)<0){eventData.unshift(e)}if($(target).is(targetSelector))listener.apply(target,eventData);else{var _parents=$(target).parents();for(var k=0;k<_parents.length;k+=1){if($(_parents[k]).is(targetSelector))listener.apply(_parents[k],eventData)}}}function handleEvent(e){var eventData=e&&e.target?e.target.dom7EventData||[]:[];if(eventData.indexOf(e)<0){eventData.unshift(e)}listener.apply(this,eventData)}var events=eventType.split(" ");var j;for(var i=0;i<this.length;i+=1){var el=this[i];if(!targetSelector){for(j=0;j<events.length;j+=1){var event=events[j];if(!el.dom7Listeners)el.dom7Listeners={};if(!el.dom7Listeners[event])el.dom7Listeners[event]=[];el.dom7Listeners[event].push({listener,proxyListener:handleEvent});el.addEventListener(event,handleEvent,capture)}}else{for(j=0;j<events.length;j+=1){var _event=events[j];if(!el.dom7LiveListeners)el.dom7LiveListeners={};if(!el.dom7LiveListeners[_event])el.dom7LiveListeners[_event]=[];el.dom7LiveListeners[_event].push({listener,proxyListener:handleLiveEvent});el.addEventListener(_event,handleLiveEvent,capture)}}}return this}function off(){for(var _len6=arguments.length,args=new Array(_len6),_key6=0;_key6<_len6;_key6++){args[_key6]=arguments[_key6]}var eventType=args[0],targetSelector=args[1],listener=args[2],capture=args[3];if(typeof args[1]==="function"){eventType=args[0];listener=args[1];capture=args[2];targetSelector=void 0}if(!capture)capture=false;var events=eventType.split(" ");for(var i=0;i<events.length;i+=1){var event=events[i];for(var j=0;j<this.length;j+=1){var el=this[j];var handlers=void 0;if(!targetSelector&&el.dom7Listeners){handlers=el.dom7Listeners[event]}else if(targetSelector&&el.dom7LiveListeners){handlers=el.dom7LiveListeners[event]}if(handlers&&handlers.length){for(var k=handlers.length-1;k>=0;k-=1){var handler=handlers[k];if(listener&&handler.listener===listener){el.removeEventListener(event,handler.proxyListener,capture);handlers.splice(k,1)}else if(listener&&handler.listener&&handler.listener.dom7proxy&&handler.listener.dom7proxy===listener){el.removeEventListener(event,handler.proxyListener,capture);handlers.splice(k,1)}else if(!listener){el.removeEventListener(event,handler.proxyListener,capture);handlers.splice(k,1)}}}}}return this}function trigger(){var window2=getWindow();for(var _len9=arguments.length,args=new Array(_len9),_key9=0;_key9<_len9;_key9++){args[_key9]=arguments[_key9]}var events=args[0].split(" ");var eventData=args[1];for(var i=0;i<events.length;i+=1){var event=events[i];for(var j=0;j<this.length;j+=1){var el=this[j];if(window2.CustomEvent){var evt=new window2.CustomEvent(event,{detail:eventData,bubbles:true,cancelable:true});el.dom7EventData=args.filter(function(data,dataIndex){return dataIndex>0});el.dispatchEvent(evt);el.dom7EventData=[];delete el.dom7EventData}}}return this}function transitionEnd(callback){var dom=this;function fireCallBack(e){if(e.target!==this)return;callback.call(this,e);dom.off("transitionend",fireCallBack)}if(callback){dom.on("transitionend",fireCallBack)}return this}function outerWidth(includeMargins){if(this.length>0){if(includeMargins){var _styles=this.styles();return this[0].offsetWidth+parseFloat(_styles.getPropertyValue("margin-right"))+parseFloat(_styles.getPropertyValue("margin-left"))}return this[0].offsetWidth}return null}function outerHeight(includeMargins){if(this.length>0){if(includeMargins){var _styles2=this.styles();return this[0].offsetHeight+parseFloat(_styles2.getPropertyValue("margin-top"))+parseFloat(_styles2.getPropertyValue("margin-bottom"))}return this[0].offsetHeight}return null}function offset(){if(this.length>0){var window2=getWindow();var document2=getDocument();var el=this[0];var box=el.getBoundingClientRect();var body=document2.body;var clientTop=el.clientTop||body.clientTop||0;var clientLeft=el.clientLeft||body.clientLeft||0;var scrollTop=el===window2?window2.scrollY:el.scrollTop;var scrollLeft=el===window2?window2.scrollX:el.scrollLeft;return{top:box.top+scrollTop-clientTop,left:box.left+scrollLeft-clientLeft}}return null}function styles(){var window2=getWindow();if(this[0])return window2.getComputedStyle(this[0],null);return{}}function css(props,value){var window2=getWindow();var i;if(arguments.length===1){if(typeof props==="string"){if(this[0])return window2.getComputedStyle(this[0],null).getPropertyValue(props)}else{for(i=0;i<this.length;i+=1){for(var _prop in props){this[i].style[_prop]=props[_prop]}}return this}}if(arguments.length===2&&typeof props==="string"){for(i=0;i<this.length;i+=1){this[i].style[props]=value}return this}return this}function each(callback){if(!callback)return this;this.forEach(function(el,index2){callback.apply(el,[el,index2])});return this}function filter(callback){var result=arrayFilter(this,callback);return $(result)}function html(html2){if(typeof html2==="undefined"){return this[0]?this[0].innerHTML:null}for(var i=0;i<this.length;i+=1){this[i].innerHTML=html2}return this}function text(text2){if(typeof text2==="undefined"){return this[0]?this[0].textContent.trim():null}for(var i=0;i<this.length;i+=1){this[i].textContent=text2}return this}function is(selector){var window2=getWindow();var document2=getDocument();var el=this[0];var compareWith;var i;if(!el||typeof selector==="undefined")return false;if(typeof selector==="string"){if(el.matches)return el.matches(selector);if(el.webkitMatchesSelector)return el.webkitMatchesSelector(selector);if(el.msMatchesSelector)return el.msMatchesSelector(selector);compareWith=$(selector);for(i=0;i<compareWith.length;i+=1){if(compareWith[i]===el)return true}return false}if(selector===document2){return el===document2}if(selector===window2){return el===window2}if(selector.nodeType||selector instanceof Dom7){compareWith=selector.nodeType?[selector]:selector;for(i=0;i<compareWith.length;i+=1){if(compareWith[i]===el)return true}return false}return false}function index(){var child=this[0];var i;if(child){i=0;while((child=child.previousSibling)!==null){if(child.nodeType===1)i+=1}return i}return void 0}function eq(index2){if(typeof index2==="undefined")return this;var length=this.length;if(index2>length-1){return $([])}if(index2<0){var returnIndex=length+index2;if(returnIndex<0)return $([]);return $([this[returnIndex]])}return $([this[index2]])}function append(){var newChild;var document2=getDocument();for(var k=0;k<arguments.length;k+=1){newChild=k<0||arguments.length<=k?void 0:arguments[k];for(var i=0;i<this.length;i+=1){if(typeof newChild==="string"){var tempDiv=document2.createElement("div");tempDiv.innerHTML=newChild;while(tempDiv.firstChild){this[i].appendChild(tempDiv.firstChild)}}else if(newChild instanceof Dom7){for(var j=0;j<newChild.length;j+=1){this[i].appendChild(newChild[j])}}else{this[i].appendChild(newChild)}}}return this}function prepend(newChild){var document2=getDocument();var i;var j;for(i=0;i<this.length;i+=1){if(typeof newChild==="string"){var tempDiv=document2.createElement("div");tempDiv.innerHTML=newChild;for(j=tempDiv.childNodes.length-1;j>=0;j-=1){this[i].insertBefore(tempDiv.childNodes[j],this[i].childNodes[0])}}else if(newChild instanceof Dom7){for(j=0;j<newChild.length;j+=1){this[i].insertBefore(newChild[j],this[i].childNodes[0])}}else{this[i].insertBefore(newChild,this[i].childNodes[0])}}return this}function next(selector){if(this.length>0){if(selector){if(this[0].nextElementSibling&&$(this[0].nextElementSibling).is(selector)){return $([this[0].nextElementSibling])}return $([])}if(this[0].nextElementSibling)return $([this[0].nextElementSibling]);return $([])}return $([])}function nextAll(selector){var nextEls=[];var el=this[0];if(!el)return $([]);while(el.nextElementSibling){var _next=el.nextElementSibling;if(selector){if($(_next).is(selector))nextEls.push(_next)}else nextEls.push(_next);el=_next}return $(nextEls)}function prev(selector){if(this.length>0){var el=this[0];if(selector){if(el.previousElementSibling&&$(el.previousElementSibling).is(selector)){return $([el.previousElementSibling])}return $([])}if(el.previousElementSibling)return $([el.previousElementSibling]);return $([])}return $([])}function prevAll(selector){var prevEls=[];var el=this[0];if(!el)return $([]);while(el.previousElementSibling){var _prev=el.previousElementSibling;if(selector){if($(_prev).is(selector))prevEls.push(_prev)}else prevEls.push(_prev);el=_prev}return $(prevEls)}function parent(selector){var parents2=[];for(var i=0;i<this.length;i+=1){if(this[i].parentNode!==null){if(selector){if($(this[i].parentNode).is(selector))parents2.push(this[i].parentNode)}else{parents2.push(this[i].parentNode)}}}return $(parents2)}function parents(selector){var parents2=[];for(var i=0;i<this.length;i+=1){var _parent=this[i].parentNode;while(_parent){if(selector){if($(_parent).is(selector))parents2.push(_parent)}else{parents2.push(_parent)}_parent=_parent.parentNode}}return $(parents2)}function closest(selector){var closest2=this;if(typeof selector==="undefined"){return $([])}if(!closest2.is(selector)){closest2=closest2.parents(selector).eq(0)}return closest2}function find(selector){var foundElements=[];for(var i=0;i<this.length;i+=1){var found=this[i].querySelectorAll(selector);for(var j=0;j<found.length;j+=1){foundElements.push(found[j])}}return $(foundElements)}function children(selector){var children2=[];for(var i=0;i<this.length;i+=1){var childNodes=this[i].children;for(var j=0;j<childNodes.length;j+=1){if(!selector||$(childNodes[j]).is(selector)){children2.push(childNodes[j])}}}return $(children2)}function remove(){for(var i=0;i<this.length;i+=1){if(this[i].parentNode)this[i].parentNode.removeChild(this[i])}return this}var noTrigger="resize scroll".split(" ");function shortcut(name){function eventHandler(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key]}if(typeof args[0]==="undefined"){for(var i=0;i<this.length;i+=1){if(noTrigger.indexOf(name)<0){if(name in this[i])this[i][name]();else{$(this[i]).trigger(name)}}}return this}return this.on.apply(this,[name].concat(args))}return eventHandler}var click=shortcut("click");var blur=shortcut("blur");var focus=shortcut("focus");var focusin=shortcut("focusin");var focusout=shortcut("focusout");var keyup=shortcut("keyup");var keydown=shortcut("keydown");var keypress=shortcut("keypress");var submit=shortcut("submit");var change=shortcut("change");var mousedown=shortcut("mousedown");var mousemove=shortcut("mousemove");var mouseup=shortcut("mouseup");var mouseenter=shortcut("mouseenter");var mouseleave=shortcut("mouseleave");var mouseout=shortcut("mouseout");var mouseover=shortcut("mouseover");var touchstart=shortcut("touchstart");var touchend=shortcut("touchend");var touchmove=shortcut("touchmove");var resize=shortcut("resize");var scroll=shortcut("scroll");var Methods={addClass,removeClass,hasClass,toggleClass,attr,removeAttr,transform,transition,on,off,trigger,transitionEnd,outerWidth,outerHeight,styles,offset,css,each,html,text,is,index,eq,append,prepend,next,nextAll,prev,prevAll,parent,parents,closest,find,children,filter,remove};Object.keys(Methods).forEach(function(methodName){Object.defineProperty($.fn,methodName,{value:Methods[methodName],writable:true})});var dom_default=$;function deleteProps(obj){var object=obj;Object.keys(object).forEach(function(key){try{object[key]=null}catch(e){}try{delete object[key]}catch(e){}})}function nextTick(callback,delay){if(delay===void 0){delay=0}return setTimeout(callback,delay)}function now(){return Date.now()}function getComputedStyle2(el){var window2=getWindow();var style;if(window2.getComputedStyle){style=window2.getComputedStyle(el,null)}if(!style&&el.currentStyle){style=el.currentStyle}if(!style){style=el.style}return style}function getTranslate(el,axis){if(axis===void 0){axis="x"}var window2=getWindow();var matrix;var curTransform;var transformMatrix;var curStyle=getComputedStyle2(el,null);if(window2.WebKitCSSMatrix){curTransform=curStyle.transform||curStyle.webkitTransform;if(curTransform.split(",").length>6){curTransform=curTransform.split(", ").map(function(a){return a.replace(",",".")}).join(", ")}transformMatrix=new window2.WebKitCSSMatrix(curTransform==="none"?"":curTransform)}else{transformMatrix=curStyle.MozTransform||curStyle.OTransform||curStyle.MsTransform||curStyle.msTransform||curStyle.transform||curStyle.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,");matrix=transformMatrix.toString().split(",")}if(axis==="x"){if(window2.WebKitCSSMatrix)curTransform=transformMatrix.m41;else if(matrix.length===16)curTransform=parseFloat(matrix[12]);else curTransform=parseFloat(matrix[4])}if(axis==="y"){if(window2.WebKitCSSMatrix)curTransform=transformMatrix.m42;else if(matrix.length===16)curTransform=parseFloat(matrix[13]);else curTransform=parseFloat(matrix[5])}return curTransform||0}function isObject2(o){return typeof o==="object"&&o!==null&&o.constructor&&Object.prototype.toString.call(o).slice(8,-1)==="Object"}function isNode(node){if(typeof window!=="undefined"&&typeof window.HTMLElement!=="undefined"){return node instanceof HTMLElement}return node&&(node.nodeType===1||node.nodeType===11)}function extend2(){var to=Object(arguments.length<=0?void 0:arguments[0]);var noExtend=["__proto__","constructor","prototype"];for(var i=1;i<arguments.length;i+=1){var nextSource=i<0||arguments.length<=i?void 0:arguments[i];if(nextSource!==void 0&&nextSource!==null&&!isNode(nextSource)){var keysArray=Object.keys(Object(nextSource)).filter(function(key){return noExtend.indexOf(key)<0});for(var nextIndex=0,len=keysArray.length;nextIndex<len;nextIndex+=1){var nextKey=keysArray[nextIndex];var desc=Object.getOwnPropertyDescriptor(nextSource,nextKey);if(desc!==void 0&&desc.enumerable){if(isObject2(to[nextKey])&&isObject2(nextSource[nextKey])){if(nextSource[nextKey].__swiper__){to[nextKey]=nextSource[nextKey]}else{extend2(to[nextKey],nextSource[nextKey])}}else if(!isObject2(to[nextKey])&&isObject2(nextSource[nextKey])){to[nextKey]={};if(nextSource[nextKey].__swiper__){to[nextKey]=nextSource[nextKey]}else{extend2(to[nextKey],nextSource[nextKey])}}else{to[nextKey]=nextSource[nextKey]}}}}}return to}function bindModuleMethods(instance,obj){Object.keys(obj).forEach(function(key){if(isObject2(obj[key])){Object.keys(obj[key]).forEach(function(subKey){if(typeof obj[key][subKey]==="function"){obj[key][subKey]=obj[key][subKey].bind(instance)}})}instance[key]=obj[key]})}function createElementIfNotDefined($container,params,createElements,checkProps){var document2=getDocument();if(createElements){Object.keys(checkProps).forEach(function(key){if(!params[key]&&params.auto===true){var element=document2.createElement("div");element.className=checkProps[key];$container.append(element);params[key]=element}})}return params}var support;function calcSupport(){var window2=getWindow();var document2=getDocument();return{touch:!!("ontouchstart"in window2||window2.DocumentTouch&&document2 instanceof window2.DocumentTouch),pointerEvents:!!window2.PointerEvent&&"maxTouchPoints"in window2.navigator&&window2.navigator.maxTouchPoints>=0,observer:function checkObserver(){return"MutationObserver"in window2||"WebkitMutationObserver"in window2}(),passiveListener:function checkPassiveListener(){var supportsPassive=false;try{var opts=Object.defineProperty({},"passive",{get:function get(){supportsPassive=true}});window2.addEventListener("testPassiveListener",null,opts)}catch(e){}return supportsPassive}(),gestures:function checkGestures(){return"ongesturestart"in window2}()}}function getSupport(){if(!support){support=calcSupport()}return support}var device;function calcDevice(_temp){var _ref=_temp===void 0?{}:_temp,userAgent=_ref.userAgent;var support2=getSupport();var window2=getWindow();var platform=window2.navigator.platform;var ua=userAgent||window2.navigator.userAgent;var device2={ios:false,android:false};var screenWidth=window2.screen.width;var screenHeight=window2.screen.height;var android=ua.match(/(Android);?[\s\/]+([\d.]+)?/);var ipad=ua.match(/(iPad).*OS\s([\d_]+)/);var ipod=ua.match(/(iPod)(.*OS\s([\d_]+))?/);var iphone=!ipad&&ua.match(/(iPhone\sOS|iOS)\s([\d_]+)/);var windows=platform==="Win32";var macos=platform==="MacIntel";var iPadScreens=["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"];if(!ipad&&macos&&support2.touch&&iPadScreens.indexOf(screenWidth+"x"+screenHeight)>=0){ipad=ua.match(/(Version)\/([\d.]+)/);if(!ipad)ipad=[0,1,"13_0_0"];macos=false}if(android&&!windows){device2.os="android";device2.android=true}if(ipad||iphone||ipod){device2.os="ios";device2.ios=true}return device2}function getDevice(overrides){if(overrides===void 0){overrides={}}if(!device){device=calcDevice(overrides)}return device}var browser;function calcBrowser(){var window2=getWindow();function isSafari(){var ua=window2.navigator.userAgent.toLowerCase();return ua.indexOf("safari")>=0&&ua.indexOf("chrome")<0&&ua.indexOf("android")<0}return{isEdge:!!window2.navigator.userAgent.match(/Edge/g),isSafari:isSafari(),isWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(window2.navigator.userAgent)}}function getBrowser(){if(!browser){browser=calcBrowser()}return browser}var supportsResizeObserver=function supportsResizeObserver2(){var window2=getWindow();return typeof window2.ResizeObserver!=="undefined"};var resize_default={name:"resize",create:function create(){var swiper=this;extend2(swiper,{resize:{observer:null,createObserver:function createObserver(){if(!swiper||swiper.destroyed||!swiper.initialized)return;swiper.resize.observer=new ResizeObserver(function(entries){var width=swiper.width,height=swiper.height;var newWidth=width;var newHeight=height;entries.forEach(function(_ref){var contentBoxSize=_ref.contentBoxSize,contentRect=_ref.contentRect,target=_ref.target;if(target&&target!==swiper.el)return;newWidth=contentRect?contentRect.width:(contentBoxSize[0]||contentBoxSize).inlineSize;newHeight=contentRect?contentRect.height:(contentBoxSize[0]||contentBoxSize).blockSize});if(newWidth!==width||newHeight!==height){swiper.resize.resizeHandler()}});swiper.resize.observer.observe(swiper.el)},removeObserver:function removeObserver(){if(swiper.resize.observer&&swiper.resize.observer.unobserve&&swiper.el){swiper.resize.observer.unobserve(swiper.el);swiper.resize.observer=null}},resizeHandler:function resizeHandler(){if(!swiper||swiper.destroyed||!swiper.initialized)return;swiper.emit("beforeResize");swiper.emit("resize")},orientationChangeHandler:function orientationChangeHandler(){if(!swiper||swiper.destroyed||!swiper.initialized)return;swiper.emit("orientationchange")}}})},on:{init:function init(swiper){var window2=getWindow();if(swiper.params.resizeObserver&&supportsResizeObserver()){swiper.resize.createObserver();return}window2.addEventListener("resize",swiper.resize.resizeHandler);window2.addEventListener("orientationchange",swiper.resize.orientationChangeHandler)},destroy:function destroy(swiper){var window2=getWindow();swiper.resize.removeObserver();window2.removeEventListener("resize",swiper.resize.resizeHandler);window2.removeEventListener("orientationchange",swiper.resize.orientationChangeHandler)}}};function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return _extends.apply(this,arguments)}var Observer={attach:function attach(target,options){if(options===void 0){options={}}var window2=getWindow();var swiper=this;var ObserverFunc=window2.MutationObserver||window2.WebkitMutationObserver;var observer=new ObserverFunc(function(mutations){if(mutations.length===1){swiper.emit("observerUpdate",mutations[0]);return}var observerUpdate=function observerUpdate2(){swiper.emit("observerUpdate",mutations[0])};if(window2.requestAnimationFrame){window2.requestAnimationFrame(observerUpdate)}else{window2.setTimeout(observerUpdate,0)}});observer.observe(target,{attributes:typeof options.attributes==="undefined"?true:options.attributes,childList:typeof options.childList==="undefined"?true:options.childList,characterData:typeof options.characterData==="undefined"?true:options.characterData});swiper.observer.observers.push(observer)},init:function init2(){var swiper=this;if(!swiper.support.observer||!swiper.params.observer)return;if(swiper.params.observeParents){var containerParents=swiper.$el.parents();for(var i=0;i<containerParents.length;i+=1){swiper.observer.attach(containerParents[i])}}swiper.observer.attach(swiper.$el[0],{childList:swiper.params.observeSlideChildren});swiper.observer.attach(swiper.$wrapperEl[0],{attributes:false})},destroy:function destroy2(){var swiper=this;swiper.observer.observers.forEach(function(observer){observer.disconnect()});swiper.observer.observers=[]}};var observer_default={name:"observer",params:{observer:false,observeParents:false,observeSlideChildren:false},create:function create2(){var swiper=this;bindModuleMethods(swiper,{observer:_extends({},Observer,{observers:[]})})},on:{init:function init3(swiper){swiper.observer.init()},destroy:function destroy3(swiper){swiper.observer.destroy()}}};var modular_default={useParams:function useParams(instanceParams){var instance=this;if(!instance.modules)return;Object.keys(instance.modules).forEach(function(moduleName){var module=instance.modules[moduleName];if(module.params){extend2(instanceParams,module.params)}})},useModules:function useModules(modulesParams){if(modulesParams===void 0){modulesParams={}}var instance=this;if(!instance.modules)return;Object.keys(instance.modules).forEach(function(moduleName){var module=instance.modules[moduleName];var moduleParams=modulesParams[moduleName]||{};if(module.on&&instance.on){Object.keys(module.on).forEach(function(moduleEventName){instance.on(moduleEventName,module.on[moduleEventName])})}if(module.create){module.create.bind(instance)(moduleParams)}})}};var events_emitter_default={on:function on2(events,handler,priority){var self=this;if(typeof handler!=="function")return self;var method=priority?"unshift":"push";events.split(" ").forEach(function(event){if(!self.eventsListeners[event])self.eventsListeners[event]=[];self.eventsListeners[event][method](handler)});return self},once:function once(events,handler,priority){var self=this;if(typeof handler!=="function")return self;function onceHandler(){self.off(events,onceHandler);if(onceHandler.__emitterProxy){delete onceHandler.__emitterProxy}for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key]}handler.apply(self,args)}onceHandler.__emitterProxy=handler;return self.on(events,onceHandler,priority)},onAny:function onAny(handler,priority){var self=this;if(typeof handler!=="function")return self;var method=priority?"unshift":"push";if(self.eventsAnyListeners.indexOf(handler)<0){self.eventsAnyListeners[method](handler)}return self},offAny:function offAny(handler){var self=this;if(!self.eventsAnyListeners)return self;var index2=self.eventsAnyListeners.indexOf(handler);if(index2>=0){self.eventsAnyListeners.splice(index2,1)}return self},off:function off2(events,handler){var self=this;if(!self.eventsListeners)return self;events.split(" ").forEach(function(event){if(typeof handler==="undefined"){self.eventsListeners[event]=[]}else if(self.eventsListeners[event]){self.eventsListeners[event].forEach(function(eventHandler,index2){if(eventHandler===handler||eventHandler.__emitterProxy&&eventHandler.__emitterProxy===handler){self.eventsListeners[event].splice(index2,1)}})}});return self},emit:function emit(){var self=this;if(!self.eventsListeners)return self;var events;var data;var context;for(var _len2=arguments.length,args=new Array(_len2),_key2=0;_key2<_len2;_key2++){args[_key2]=arguments[_key2]}if(typeof args[0]==="string"||Array.isArray(args[0])){events=args[0];data=args.slice(1,args.length);context=self}else{events=args[0].events;data=args[0].data;context=args[0].context||self}data.unshift(context);var eventsArray=Array.isArray(events)?events:events.split(" ");eventsArray.forEach(function(event){if(self.eventsAnyListeners&&self.eventsAnyListeners.length){self.eventsAnyListeners.forEach(function(eventHandler){eventHandler.apply(context,[event].concat(data))})}if(self.eventsListeners&&self.eventsListeners[event]){self.eventsListeners[event].forEach(function(eventHandler){eventHandler.apply(context,data)})}});return self}};function updateSize(){var swiper=this;var width;var height;var $el=swiper.$el;if(typeof swiper.params.width!=="undefined"&&swiper.params.width!==null){width=swiper.params.width}else{width=$el[0].clientWidth}if(typeof swiper.params.height!=="undefined"&&swiper.params.height!==null){height=swiper.params.height}else{height=$el[0].clientHeight}if(width===0&&swiper.isHorizontal()||height===0&&swiper.isVertical()){return}width=width-parseInt($el.css("padding-left")||0,10)-parseInt($el.css("padding-right")||0,10);height=height-parseInt($el.css("padding-top")||0,10)-parseInt($el.css("padding-bottom")||0,10);if(Number.isNaN(width))width=0;if(Number.isNaN(height))height=0;extend2(swiper,{width,height,size:swiper.isHorizontal()?width:height})}function updateSlides(){var swiper=this;function getDirectionLabel(property){if(swiper.isHorizontal()){return property}return{"width":"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom","marginRight":"marginBottom"}[property]}function getDirectionPropertyValue(node,label){return parseFloat(node.getPropertyValue(getDirectionLabel(label))||0)}var params=swiper.params;var $wrapperEl=swiper.$wrapperEl,swiperSize=swiper.size,rtl=swiper.rtlTranslate,wrongRTL=swiper.wrongRTL;var isVirtual=swiper.virtual&&params.virtual.enabled;var previousSlidesLength=isVirtual?swiper.virtual.slides.length:swiper.slides.length;var slides=$wrapperEl.children("."+swiper.params.slideClass);var slidesLength=isVirtual?swiper.virtual.slides.length:slides.length;var snapGrid=[];var slidesGrid=[];var slidesSizesGrid=[];var offsetBefore=params.slidesOffsetBefore;if(typeof offsetBefore==="function"){offsetBefore=params.slidesOffsetBefore.call(swiper)}var offsetAfter=params.slidesOffsetAfter;if(typeof offsetAfter==="function"){offsetAfter=params.slidesOffsetAfter.call(swiper)}var previousSnapGridLength=swiper.snapGrid.length;var previousSlidesGridLength=swiper.slidesGrid.length;var spaceBetween=params.spaceBetween;var slidePosition=-offsetBefore;var prevSlideSize=0;var index2=0;if(typeof swiperSize==="undefined"){return}if(typeof spaceBetween==="string"&&spaceBetween.indexOf("%")>=0){spaceBetween=parseFloat(spaceBetween.replace("%",""))/100*swiperSize}swiper.virtualSize=-spaceBetween;if(rtl)slides.css({marginLeft:"",marginBottom:"",marginTop:""});else slides.css({marginRight:"",marginBottom:"",marginTop:""});var slidesNumberEvenToRows;if(params.slidesPerColumn>1){if(Math.floor(slidesLength/params.slidesPerColumn)===slidesLength/swiper.params.slidesPerColumn){slidesNumberEvenToRows=slidesLength}else{slidesNumberEvenToRows=Math.ceil(slidesLength/params.slidesPerColumn)*params.slidesPerColumn}if(params.slidesPerView!=="auto"&&params.slidesPerColumnFill==="row"){slidesNumberEvenToRows=Math.max(slidesNumberEvenToRows,params.slidesPerView*params.slidesPerColumn)}}var slideSize;var slidesPerColumn=params.slidesPerColumn;var slidesPerRow=slidesNumberEvenToRows/slidesPerColumn;var numFullColumns=Math.floor(slidesLength/params.slidesPerColumn);for(var i=0;i<slidesLength;i+=1){slideSize=0;var slide=slides.eq(i);if(params.slidesPerColumn>1){var newSlideOrderIndex=void 0;var column=void 0;var row=void 0;if(params.slidesPerColumnFill==="row"&&params.slidesPerGroup>1){var groupIndex=Math.floor(i/(params.slidesPerGroup*params.slidesPerColumn));var slideIndexInGroup=i-params.slidesPerColumn*params.slidesPerGroup*groupIndex;var columnsInGroup=groupIndex===0?params.slidesPerGroup:Math.min(Math.ceil((slidesLength-groupIndex*slidesPerColumn*params.slidesPerGroup)/slidesPerColumn),params.slidesPerGroup);row=Math.floor(slideIndexInGroup/columnsInGroup);column=slideIndexInGroup-row*columnsInGroup+groupIndex*params.slidesPerGroup;newSlideOrderIndex=column+row*slidesNumberEvenToRows/slidesPerColumn;slide.css({"-webkit-box-ordinal-group":newSlideOrderIndex,"-moz-box-ordinal-group":newSlideOrderIndex,"-ms-flex-order":newSlideOrderIndex,"-webkit-order":newSlideOrderIndex,order:newSlideOrderIndex})}else if(params.slidesPerColumnFill==="column"){column=Math.floor(i/slidesPerColumn);row=i-column*slidesPerColumn;if(column>numFullColumns||column===numFullColumns&&row===slidesPerColumn-1){row+=1;if(row>=slidesPerColumn){row=0;column+=1}}}else{row=Math.floor(i/slidesPerRow);column=i-row*slidesPerRow}slide.css(getDirectionLabel("margin-top"),row!==0?params.spaceBetween&&params.spaceBetween+"px":"")}if(slide.css("display")==="none")continue;if(params.slidesPerView==="auto"){var slideStyles=getComputedStyle(slide[0]);var currentTransform=slide[0].style.transform;var currentWebKitTransform=slide[0].style.webkitTransform;if(currentTransform){slide[0].style.transform="none"}if(currentWebKitTransform){slide[0].style.webkitTransform="none"}if(params.roundLengths){slideSize=swiper.isHorizontal()?slide.outerWidth(true):slide.outerHeight(true)}else{var width=getDirectionPropertyValue(slideStyles,"width");var paddingLeft=getDirectionPropertyValue(slideStyles,"padding-left");var paddingRight=getDirectionPropertyValue(slideStyles,"padding-right");var marginLeft=getDirectionPropertyValue(slideStyles,"margin-left");var marginRight=getDirectionPropertyValue(slideStyles,"margin-right");var boxSizing=slideStyles.getPropertyValue("box-sizing");if(boxSizing&&boxSizing==="border-box"){slideSize=width+marginLeft+marginRight}else{var _slide$=slide[0],clientWidth=_slide$.clientWidth,offsetWidth=_slide$.offsetWidth;slideSize=width+paddingLeft+paddingRight+marginLeft+marginRight+(offsetWidth-clientWidth)}}if(currentTransform){slide[0].style.transform=currentTransform}if(currentWebKitTransform){slide[0].style.webkitTransform=currentWebKitTransform}if(params.roundLengths)slideSize=Math.floor(slideSize)}else{slideSize=(swiperSize-(params.slidesPerView-1)*spaceBetween)/params.slidesPerView;if(params.roundLengths)slideSize=Math.floor(slideSize);if(slides[i]){slides[i].style[getDirectionLabel("width")]=slideSize+"px"}}if(slides[i]){slides[i].swiperSlideSize=slideSize}slidesSizesGrid.push(slideSize);if(params.centeredSlides){slidePosition=slidePosition+slideSize/2+prevSlideSize/2+spaceBetween;if(prevSlideSize===0&&i!==0)slidePosition=slidePosition-swiperSize/2-spaceBetween;if(i===0)slidePosition=slidePosition-swiperSize/2-spaceBetween;if(Math.abs(slidePosition)<1/1e3)slidePosition=0;if(params.roundLengths)slidePosition=Math.floor(slidePosition);if(index2%params.slidesPerGroup===0)snapGrid.push(slidePosition);slidesGrid.push(slidePosition)}else{if(params.roundLengths)slidePosition=Math.floor(slidePosition);if((index2-Math.min(swiper.params.slidesPerGroupSkip,index2))%swiper.params.slidesPerGroup===0)snapGrid.push(slidePosition);slidesGrid.push(slidePosition);slidePosition=slidePosition+slideSize+spaceBetween}swiper.virtualSize+=slideSize+spaceBetween;prevSlideSize=slideSize;index2+=1}swiper.virtualSize=Math.max(swiper.virtualSize,swiperSize)+offsetAfter;var newSlidesGrid;if(rtl&&wrongRTL&&(params.effect==="slide"||params.effect==="coverflow")){$wrapperEl.css({width:swiper.virtualSize+params.spaceBetween+"px"})}if(params.setWrapperSize){var _$wrapperEl$css;$wrapperEl.css((_$wrapperEl$css={},_$wrapperEl$css[getDirectionLabel("width")]=swiper.virtualSize+params.spaceBetween+"px",_$wrapperEl$css))}if(params.slidesPerColumn>1){var _$wrapperEl$css2;swiper.virtualSize=(slideSize+params.spaceBetween)*slidesNumberEvenToRows;swiper.virtualSize=Math.ceil(swiper.virtualSize/params.slidesPerColumn)-params.spaceBetween;$wrapperEl.css((_$wrapperEl$css2={},_$wrapperEl$css2[getDirectionLabel("width")]=swiper.virtualSize+params.spaceBetween+"px",_$wrapperEl$css2));if(params.centeredSlides){newSlidesGrid=[];for(var _i=0;_i<snapGrid.length;_i+=1){var slidesGridItem=snapGrid[_i];if(params.roundLengths)slidesGridItem=Math.floor(slidesGridItem);if(snapGrid[_i]<swiper.virtualSize+snapGrid[0])newSlidesGrid.push(slidesGridItem)}snapGrid=newSlidesGrid}}if(!params.centeredSlides){newSlidesGrid=[];for(var _i2=0;_i2<snapGrid.length;_i2+=1){var _slidesGridItem=snapGrid[_i2];if(params.roundLengths)_slidesGridItem=Math.floor(_slidesGridItem);if(snapGrid[_i2]<=swiper.virtualSize-swiperSize){newSlidesGrid.push(_slidesGridItem)}}snapGrid=newSlidesGrid;if(Math.floor(swiper.virtualSize-swiperSize)-Math.floor(snapGrid[snapGrid.length-1])>1){snapGrid.push(swiper.virtualSize-swiperSize)}}if(snapGrid.length===0)snapGrid=[0];if(params.spaceBetween!==0){var _slides$filter$css;var key=swiper.isHorizontal()&&rtl?"marginLeft":getDirectionLabel("marginRight");slides.filter(function(_,slideIndex){if(!params.cssMode)return true;if(slideIndex===slides.length-1){return false}return true}).css((_slides$filter$css={},_slides$filter$css[key]=spaceBetween+"px",_slides$filter$css))}if(params.centeredSlides&&params.centeredSlidesBounds){var allSlidesSize=0;slidesSizesGrid.forEach(function(slideSizeValue){allSlidesSize+=slideSizeValue+(params.spaceBetween?params.spaceBetween:0)});allSlidesSize-=params.spaceBetween;var maxSnap=allSlidesSize-swiperSize;snapGrid=snapGrid.map(function(snap){if(snap<0)return-offsetBefore;if(snap>maxSnap)return maxSnap+offsetAfter;return snap})}if(params.centerInsufficientSlides){var _allSlidesSize=0;slidesSizesGrid.forEach(function(slideSizeValue){_allSlidesSize+=slideSizeValue+(params.spaceBetween?params.spaceBetween:0)});_allSlidesSize-=params.spaceBetween;if(_allSlidesSize<swiperSize){var allSlidesOffset=(swiperSize-_allSlidesSize)/2;snapGrid.forEach(function(snap,snapIndex){snapGrid[snapIndex]=snap-allSlidesOffset});slidesGrid.forEach(function(snap,snapIndex){slidesGrid[snapIndex]=snap+allSlidesOffset})}}extend2(swiper,{slides,snapGrid,slidesGrid,slidesSizesGrid});if(slidesLength!==previousSlidesLength){swiper.emit("slidesLengthChange")}if(snapGrid.length!==previousSnapGridLength){if(swiper.params.watchOverflow)swiper.checkOverflow();swiper.emit("snapGridLengthChange")}if(slidesGrid.length!==previousSlidesGridLength){swiper.emit("slidesGridLengthChange")}if(params.watchSlidesProgress||params.watchSlidesVisibility){swiper.updateSlidesOffset()}}function updateAutoHeight(speed){var swiper=this;var activeSlides=[];var isVirtual=swiper.virtual&&swiper.params.virtual.enabled;var newHeight=0;var i;if(typeof speed==="number"){swiper.setTransition(speed)}else if(speed===true){swiper.setTransition(swiper.params.speed)}var getSlideByIndex=function getSlideByIndex2(index3){if(isVirtual){return swiper.slides.filter(function(el){return parseInt(el.getAttribute("data-swiper-slide-index"),10)===index3})[0]}return swiper.slides.eq(index3)[0]};if(swiper.params.slidesPerView!=="auto"&&swiper.params.slidesPerView>1){if(swiper.params.centeredSlides){swiper.visibleSlides.each(function(slide){activeSlides.push(slide)})}else{for(i=0;i<Math.ceil(swiper.params.slidesPerView);i+=1){var index2=swiper.activeIndex+i;if(index2>swiper.slides.length&&!isVirtual)break;activeSlides.push(getSlideByIndex(index2))}}}else{activeSlides.push(getSlideByIndex(swiper.activeIndex))}for(i=0;i<activeSlides.length;i+=1){if(typeof activeSlides[i]!=="undefined"){var height=activeSlides[i].offsetHeight;newHeight=height>newHeight?height:newHeight}}if(newHeight)swiper.$wrapperEl.css("height",newHeight+"px")}function updateSlidesOffset(){var swiper=this;var slides=swiper.slides;for(var i=0;i<slides.length;i+=1){slides[i].swiperSlideOffset=swiper.isHorizontal()?slides[i].offsetLeft:slides[i].offsetTop}}function updateSlidesProgress(translate){if(translate===void 0){translate=this&&this.translate||0}var swiper=this;var params=swiper.params;var slides=swiper.slides,rtl=swiper.rtlTranslate;if(slides.length===0)return;if(typeof slides[0].swiperSlideOffset==="undefined")swiper.updateSlidesOffset();var offsetCenter=-translate;if(rtl)offsetCenter=translate;slides.removeClass(params.slideVisibleClass);swiper.visibleSlidesIndexes=[];swiper.visibleSlides=[];for(var i=0;i<slides.length;i+=1){var slide=slides[i];var slideProgress=(offsetCenter+(params.centeredSlides?swiper.minTranslate():0)-slide.swiperSlideOffset)/(slide.swiperSlideSize+params.spaceBetween);if(params.watchSlidesVisibility||params.centeredSlides&&params.autoHeight){var slideBefore=-(offsetCenter-slide.swiperSlideOffset);var slideAfter=slideBefore+swiper.slidesSizesGrid[i];var isVisible=slideBefore>=0&&slideBefore<swiper.size-1||slideAfter>1&&slideAfter<=swiper.size||slideBefore<=0&&slideAfter>=swiper.size;if(isVisible){swiper.visibleSlides.push(slide);swiper.visibleSlidesIndexes.push(i);slides.eq(i).addClass(params.slideVisibleClass)}}slide.progress=rtl?-slideProgress:slideProgress}swiper.visibleSlides=dom_default(swiper.visibleSlides)}function updateProgress(translate){var swiper=this;if(typeof translate==="undefined"){var multiplier=swiper.rtlTranslate?-1:1;translate=swiper&&swiper.translate&&swiper.translate*multiplier||0}var params=swiper.params;var translatesDiff=swiper.maxTranslate()-swiper.minTranslate();var progress=swiper.progress,isBeginning=swiper.isBeginning,isEnd=swiper.isEnd;var wasBeginning=isBeginning;var wasEnd=isEnd;if(translatesDiff===0){progress=0;isBeginning=true;isEnd=true}else{progress=(translate-swiper.minTranslate())/translatesDiff;isBeginning=progress<=0;isEnd=progress>=1}extend2(swiper,{progress,isBeginning,isEnd});if(params.watchSlidesProgress||params.watchSlidesVisibility||params.centeredSlides&&params.autoHeight)swiper.updateSlidesProgress(translate);if(isBeginning&&!wasBeginning){swiper.emit("reachBeginning toEdge")}if(isEnd&&!wasEnd){swiper.emit("reachEnd toEdge")}if(wasBeginning&&!isBeginning||wasEnd&&!isEnd){swiper.emit("fromEdge")}swiper.emit("progress",progress)}function updateSlidesClasses(){var swiper=this;var slides=swiper.slides,params=swiper.params,$wrapperEl=swiper.$wrapperEl,activeIndex=swiper.activeIndex,realIndex=swiper.realIndex;var isVirtual=swiper.virtual&&params.virtual.enabled;slides.removeClass(params.slideActiveClass+" "+params.slideNextClass+" "+params.slidePrevClass+" "+params.slideDuplicateActiveClass+" "+params.slideDuplicateNextClass+" "+params.slideDuplicatePrevClass);var activeSlide;if(isVirtual){activeSlide=swiper.$wrapperEl.find("."+params.slideClass+'[data-swiper-slide-index="'+activeIndex+'"]')}else{activeSlide=slides.eq(activeIndex)}activeSlide.addClass(params.slideActiveClass);if(params.loop){if(activeSlide.hasClass(params.slideDuplicateClass)){$wrapperEl.children("."+params.slideClass+":not(."+params.slideDuplicateClass+')[data-swiper-slide-index="'+realIndex+'"]').addClass(params.slideDuplicateActiveClass)}else{$wrapperEl.children("."+params.slideClass+"."+params.slideDuplicateClass+'[data-swiper-slide-index="'+realIndex+'"]').addClass(params.slideDuplicateActiveClass)}}var nextSlide=activeSlide.nextAll("."+params.slideClass).eq(0).addClass(params.slideNextClass);if(params.loop&&nextSlide.length===0){nextSlide=slides.eq(0);nextSlide.addClass(params.slideNextClass)}var prevSlide=activeSlide.prevAll("."+params.slideClass).eq(0).addClass(params.slidePrevClass);if(params.loop&&prevSlide.length===0){prevSlide=slides.eq(-1);prevSlide.addClass(params.slidePrevClass)}if(params.loop){if(nextSlide.hasClass(params.slideDuplicateClass)){$wrapperEl.children("."+params.slideClass+":not(."+params.slideDuplicateClass+')[data-swiper-slide-index="'+nextSlide.attr("data-swiper-slide-index")+'"]').addClass(params.slideDuplicateNextClass)}else{$wrapperEl.children("."+params.slideClass+"."+params.slideDuplicateClass+'[data-swiper-slide-index="'+nextSlide.attr("data-swiper-slide-index")+'"]').addClass(params.slideDuplicateNextClass)}if(prevSlide.hasClass(params.slideDuplicateClass)){$wrapperEl.children("."+params.slideClass+":not(."+params.slideDuplicateClass+')[data-swiper-slide-index="'+prevSlide.attr("data-swiper-slide-index")+'"]').addClass(params.slideDuplicatePrevClass)}else{$wrapperEl.children("."+params.slideClass+"."+params.slideDuplicateClass+'[data-swiper-slide-index="'+prevSlide.attr("data-swiper-slide-index")+'"]').addClass(params.slideDuplicatePrevClass)}}swiper.emitSlidesClasses()}function updateActiveIndex(newActiveIndex){var swiper=this;var translate=swiper.rtlTranslate?swiper.translate:-swiper.translate;var slidesGrid=swiper.slidesGrid,snapGrid=swiper.snapGrid,params=swiper.params,previousIndex=swiper.activeIndex,previousRealIndex=swiper.realIndex,previousSnapIndex=swiper.snapIndex;var activeIndex=newActiveIndex;var snapIndex;if(typeof activeIndex==="undefined"){for(var i=0;i<slidesGrid.length;i+=1){if(typeof slidesGrid[i+1]!=="undefined"){if(translate>=slidesGrid[i]&&translate<slidesGrid[i+1]-(slidesGrid[i+1]-slidesGrid[i])/2){activeIndex=i}else if(translate>=slidesGrid[i]&&translate<slidesGrid[i+1]){activeIndex=i+1}}else if(translate>=slidesGrid[i]){activeIndex=i}}if(params.normalizeSlideIndex){if(activeIndex<0||typeof activeIndex==="undefined")activeIndex=0}}if(snapGrid.indexOf(translate)>=0){snapIndex=snapGrid.indexOf(translate)}else{var skip=Math.min(params.slidesPerGroupSkip,activeIndex);snapIndex=skip+Math.floor((activeIndex-skip)/params.slidesPerGroup)}if(snapIndex>=snapGrid.length)snapIndex=snapGrid.length-1;if(activeIndex===previousIndex){if(snapIndex!==previousSnapIndex){swiper.snapIndex=snapIndex;swiper.emit("snapIndexChange")}return}var realIndex=parseInt(swiper.slides.eq(activeIndex).attr("data-swiper-slide-index")||activeIndex,10);extend2(swiper,{snapIndex,realIndex,previousIndex,activeIndex});swiper.emit("activeIndexChange");swiper.emit("snapIndexChange");if(previousRealIndex!==realIndex){swiper.emit("realIndexChange")}if(swiper.initialized||swiper.params.runCallbacksOnInit){swiper.emit("slideChange")}}function updateClickedSlide(e){var swiper=this;var params=swiper.params;var slide=dom_default(e.target).closest("."+params.slideClass)[0];var slideFound=false;var slideIndex;if(slide){for(var i=0;i<swiper.slides.length;i+=1){if(swiper.slides[i]===slide){slideFound=true;slideIndex=i;break}}}if(slide&&slideFound){swiper.clickedSlide=slide;if(swiper.virtual&&swiper.params.virtual.enabled){swiper.clickedIndex=parseInt(dom_default(slide).attr("data-swiper-slide-index"),10)}else{swiper.clickedIndex=slideIndex}}else{swiper.clickedSlide=void 0;swiper.clickedIndex=void 0;return}if(params.slideToClickedSlide&&swiper.clickedIndex!==void 0&&swiper.clickedIndex!==swiper.activeIndex){swiper.slideToClickedSlide()}}var update_default={updateSize,updateSlides,updateAutoHeight,updateSlidesOffset,updateSlidesProgress,updateProgress,updateSlidesClasses,updateActiveIndex,updateClickedSlide};function getSwiperTranslate(axis){if(axis===void 0){axis=this.isHorizontal()?"x":"y"}var swiper=this;var params=swiper.params,rtl=swiper.rtlTranslate,translate=swiper.translate,$wrapperEl=swiper.$wrapperEl;if(params.virtualTranslate){return rtl?-translate:translate}if(params.cssMode){return translate}var currentTranslate=getTranslate($wrapperEl[0],axis);if(rtl)currentTranslate=-currentTranslate;return currentTranslate||0}function setTranslate(translate,byController){var swiper=this;var rtl=swiper.rtlTranslate,params=swiper.params,$wrapperEl=swiper.$wrapperEl,wrapperEl=swiper.wrapperEl,progress=swiper.progress;var x=0;var y=0;var z=0;if(swiper.isHorizontal()){x=rtl?-translate:translate}else{y=translate}if(params.roundLengths){x=Math.floor(x);y=Math.floor(y)}if(params.cssMode){wrapperEl[swiper.isHorizontal()?"scrollLeft":"scrollTop"]=swiper.isHorizontal()?-x:-y}else if(!params.virtualTranslate){$wrapperEl.transform("translate3d("+x+"px, "+y+"px, "+z+"px)")}swiper.previousTranslate=swiper.translate;swiper.translate=swiper.isHorizontal()?x:y;var newProgress;var translatesDiff=swiper.maxTranslate()-swiper.minTranslate();if(translatesDiff===0){newProgress=0}else{newProgress=(translate-swiper.minTranslate())/translatesDiff}if(newProgress!==progress){swiper.updateProgress(translate)}swiper.emit("setTranslate",swiper.translate,byController)}function minTranslate(){return-this.snapGrid[0]}function maxTranslate(){return-this.snapGrid[this.snapGrid.length-1]}function translateTo(translate,speed,runCallbacks,translateBounds,internal){if(translate===void 0){translate=0}if(speed===void 0){speed=this.params.speed}if(runCallbacks===void 0){runCallbacks=true}if(translateBounds===void 0){translateBounds=true}var swiper=this;var params=swiper.params,wrapperEl=swiper.wrapperEl;if(swiper.animating&&params.preventInteractionOnTransition){return false}var minTranslate2=swiper.minTranslate();var maxTranslate2=swiper.maxTranslate();var newTranslate;if(translateBounds&&translate>minTranslate2)newTranslate=minTranslate2;else if(translateBounds&&translate<maxTranslate2)newTranslate=maxTranslate2;else newTranslate=translate;swiper.updateProgress(newTranslate);if(params.cssMode){var isH=swiper.isHorizontal();if(speed===0){wrapperEl[isH?"scrollLeft":"scrollTop"]=-newTranslate}else{if(wrapperEl.scrollTo){var _wrapperEl$scrollTo;wrapperEl.scrollTo((_wrapperEl$scrollTo={},_wrapperEl$scrollTo[isH?"left":"top"]=-newTranslate,_wrapperEl$scrollTo.behavior="smooth",_wrapperEl$scrollTo))}else{wrapperEl[isH?"scrollLeft":"scrollTop"]=-newTranslate}}return true}if(speed===0){swiper.setTransition(0);swiper.setTranslate(newTranslate);if(runCallbacks){swiper.emit("beforeTransitionStart",speed,internal);swiper.emit("transitionEnd")}}else{swiper.setTransition(speed);swiper.setTranslate(newTranslate);if(runCallbacks){swiper.emit("beforeTransitionStart",speed,internal);swiper.emit("transitionStart")}if(!swiper.animating){swiper.animating=true;if(!swiper.onTranslateToWrapperTransitionEnd){swiper.onTranslateToWrapperTransitionEnd=function transitionEnd3(e){if(!swiper||swiper.destroyed)return;if(e.target!==this)return;swiper.$wrapperEl[0].removeEventListener("transitionend",swiper.onTranslateToWrapperTransitionEnd);swiper.$wrapperEl[0].removeEventListener("webkitTransitionEnd",swiper.onTranslateToWrapperTransitionEnd);swiper.onTranslateToWrapperTransitionEnd=null;delete swiper.onTranslateToWrapperTransitionEnd;if(runCallbacks){swiper.emit("transitionEnd")}}}swiper.$wrapperEl[0].addEventListener("transitionend",swiper.onTranslateToWrapperTransitionEnd);swiper.$wrapperEl[0].addEventListener("webkitTransitionEnd",swiper.onTranslateToWrapperTransitionEnd)}}return true}var translate_default={getTranslate:getSwiperTranslate,setTranslate,minTranslate,maxTranslate,translateTo};function setTransition(duration,byController){var swiper=this;if(!swiper.params.cssMode){swiper.$wrapperEl.transition(duration)}swiper.emit("setTransition",duration,byController)}function transitionStart(runCallbacks,direction){if(runCallbacks===void 0){runCallbacks=true}var swiper=this;var activeIndex=swiper.activeIndex,params=swiper.params,previousIndex=swiper.previousIndex;if(params.cssMode)return;if(params.autoHeight){swiper.updateAutoHeight()}var dir=direction;if(!dir){if(activeIndex>previousIndex)dir="next";else if(activeIndex<previousIndex)dir="prev";else dir="reset"}swiper.emit("transitionStart");if(runCallbacks&&activeIndex!==previousIndex){if(dir==="reset"){swiper.emit("slideResetTransitionStart");return}swiper.emit("slideChangeTransitionStart");if(dir==="next"){swiper.emit("slideNextTransitionStart")}else{swiper.emit("slidePrevTransitionStart")}}}function transitionEnd2(runCallbacks,direction){if(runCallbacks===void 0){runCallbacks=true}var swiper=this;var activeIndex=swiper.activeIndex,previousIndex=swiper.previousIndex,params=swiper.params;swiper.animating=false;if(params.cssMode)return;swiper.setTransition(0);var dir=direction;if(!dir){if(activeIndex>previousIndex)dir="next";else if(activeIndex<previousIndex)dir="prev";else dir="reset"}swiper.emit("transitionEnd");if(runCallbacks&&activeIndex!==previousIndex){if(dir==="reset"){swiper.emit("slideResetTransitionEnd");return}swiper.emit("slideChangeTransitionEnd");if(dir==="next"){swiper.emit("slideNextTransitionEnd")}else{swiper.emit("slidePrevTransitionEnd")}}}var transition_default={setTransition,transitionStart,transitionEnd:transitionEnd2};function slideTo(index2,speed,runCallbacks,internal,initial){if(index2===void 0){index2=0}if(speed===void 0){speed=this.params.speed}if(runCallbacks===void 0){runCallbacks=true}if(typeof index2!=="number"&&typeof index2!=="string"){throw new Error("The 'index' argument cannot have type other than 'number' or 'string'. ["+typeof index2+"] given.")}if(typeof index2==="string"){var indexAsNumber=parseInt(index2,10);var isValidNumber=isFinite(indexAsNumber);if(!isValidNumber){throw new Error("The passed-in 'index' (string) couldn't be converted to 'number'. ["+index2+"] given.")}index2=indexAsNumber}var swiper=this;var slideIndex=index2;if(slideIndex<0)slideIndex=0;var params=swiper.params,snapGrid=swiper.snapGrid,slidesGrid=swiper.slidesGrid,previousIndex=swiper.previousIndex,activeIndex=swiper.activeIndex,rtl=swiper.rtlTranslate,wrapperEl=swiper.wrapperEl,enabled=swiper.enabled;if(swiper.animating&&params.preventInteractionOnTransition||!enabled&&!internal&&!initial){return false}var skip=Math.min(swiper.params.slidesPerGroupSkip,slideIndex);var snapIndex=skip+Math.floor((slideIndex-skip)/swiper.params.slidesPerGroup);if(snapIndex>=snapGrid.length)snapIndex=snapGrid.length-1;if((activeIndex||params.initialSlide||0)===(previousIndex||0)&&runCallbacks){swiper.emit("beforeSlideChangeStart")}var translate=-snapGrid[snapIndex];swiper.updateProgress(translate);if(params.normalizeSlideIndex){for(var i=0;i<slidesGrid.length;i+=1){var normalizedTranslate=-Math.floor(translate*100);var normalizedGird=Math.floor(slidesGrid[i]*100);var normalizedGridNext=Math.floor(slidesGrid[i+1]*100);if(typeof slidesGrid[i+1]!=="undefined"){if(normalizedTranslate>=normalizedGird&&normalizedTranslate<normalizedGridNext-(normalizedGridNext-normalizedGird)/2){slideIndex=i}else if(normalizedTranslate>=normalizedGird&&normalizedTranslate<normalizedGridNext){slideIndex=i+1}}else if(normalizedTranslate>=normalizedGird){slideIndex=i}}}if(swiper.initialized&&slideIndex!==activeIndex){if(!swiper.allowSlideNext&&translate<swiper.translate&&translate<swiper.minTranslate()){return false}if(!swiper.allowSlidePrev&&translate>swiper.translate&&translate>swiper.maxTranslate()){if((activeIndex||0)!==slideIndex)return false}}var direction;if(slideIndex>activeIndex)direction="next";else if(slideIndex<activeIndex)direction="prev";else direction="reset";if(rtl&&-translate===swiper.translate||!rtl&&translate===swiper.translate){swiper.updateActiveIndex(slideIndex);if(params.autoHeight){swiper.updateAutoHeight()}swiper.updateSlidesClasses();if(params.effect!=="slide"){swiper.setTranslate(translate)}if(direction!=="reset"){swiper.transitionStart(runCallbacks,direction);swiper.transitionEnd(runCallbacks,direction)}return false}if(params.cssMode){var isH=swiper.isHorizontal();var t=-translate;if(rtl){t=wrapperEl.scrollWidth-wrapperEl.offsetWidth-t}if(speed===0){wrapperEl[isH?"scrollLeft":"scrollTop"]=t}else{if(wrapperEl.scrollTo){var _wrapperEl$scrollTo;wrapperEl.scrollTo((_wrapperEl$scrollTo={},_wrapperEl$scrollTo[isH?"left":"top"]=t,_wrapperEl$scrollTo.behavior="smooth",_wrapperEl$scrollTo))}else{wrapperEl[isH?"scrollLeft":"scrollTop"]=t}}return true}if(speed===0){swiper.setTransition(0);swiper.setTranslate(translate);swiper.updateActiveIndex(slideIndex);swiper.updateSlidesClasses();swiper.emit("beforeTransitionStart",speed,internal);swiper.transitionStart(runCallbacks,direction);swiper.transitionEnd(runCallbacks,direction)}else{swiper.setTransition(speed);swiper.setTranslate(translate);swiper.updateActiveIndex(slideIndex);swiper.updateSlidesClasses();swiper.emit("beforeTransitionStart",speed,internal);swiper.transitionStart(runCallbacks,direction);if(!swiper.animating){swiper.animating=true;if(!swiper.onSlideToWrapperTransitionEnd){swiper.onSlideToWrapperTransitionEnd=function transitionEnd3(e){if(!swiper||swiper.destroyed)return;if(e.target!==this)return;swiper.$wrapperEl[0].removeEventListener("transitionend",swiper.onSlideToWrapperTransitionEnd);swiper.$wrapperEl[0].removeEventListener("webkitTransitionEnd",swiper.onSlideToWrapperTransitionEnd);swiper.onSlideToWrapperTransitionEnd=null;delete swiper.onSlideToWrapperTransitionEnd;swiper.transitionEnd(runCallbacks,direction)}}swiper.$wrapperEl[0].addEventListener("transitionend",swiper.onSlideToWrapperTransitionEnd);swiper.$wrapperEl[0].addEventListener("webkitTransitionEnd",swiper.onSlideToWrapperTransitionEnd)}}return true}function slideToLoop(index2,speed,runCallbacks,internal){if(index2===void 0){index2=0}if(speed===void 0){speed=this.params.speed}if(runCallbacks===void 0){runCallbacks=true}var swiper=this;var newIndex=index2;if(swiper.params.loop){newIndex+=swiper.loopedSlides}return swiper.slideTo(newIndex,speed,runCallbacks,internal)}function slideNext(speed,runCallbacks,internal){if(speed===void 0){speed=this.params.speed}if(runCallbacks===void 0){runCallbacks=true}var swiper=this;var params=swiper.params,animating=swiper.animating,enabled=swiper.enabled;if(!enabled)return swiper;var increment=swiper.activeIndex<params.slidesPerGroupSkip?1:params.slidesPerGroup;if(params.loop){if(animating&&params.loopPreventsSlide)return false;swiper.loopFix();swiper._clientLeft=swiper.$wrapperEl[0].clientLeft}return swiper.slideTo(swiper.activeIndex+increment,speed,runCallbacks,internal)}function slidePrev(speed,runCallbacks,internal){if(speed===void 0){speed=this.params.speed}if(runCallbacks===void 0){runCallbacks=true}var swiper=this;var params=swiper.params,animating=swiper.animating,snapGrid=swiper.snapGrid,slidesGrid=swiper.slidesGrid,rtlTranslate=swiper.rtlTranslate,enabled=swiper.enabled;if(!enabled)return swiper;if(params.loop){if(animating&&params.loopPreventsSlide)return false;swiper.loopFix();swiper._clientLeft=swiper.$wrapperEl[0].clientLeft}var translate=rtlTranslate?swiper.translate:-swiper.translate;function normalize(val){if(val<0)return-Math.floor(Math.abs(val));return Math.floor(val)}var normalizedTranslate=normalize(translate);var normalizedSnapGrid=snapGrid.map(function(val){return normalize(val)});var prevSnap=snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate)-1];if(typeof prevSnap==="undefined"&&params.cssMode){snapGrid.forEach(function(snap){if(!prevSnap&&normalizedTranslate>=snap)prevSnap=snap})}var prevIndex;if(typeof prevSnap!=="undefined"){prevIndex=slidesGrid.indexOf(prevSnap);if(prevIndex<0)prevIndex=swiper.activeIndex-1}return swiper.slideTo(prevIndex,speed,runCallbacks,internal)}function slideReset(speed,runCallbacks,internal){if(speed===void 0){speed=this.params.speed}if(runCallbacks===void 0){runCallbacks=true}var swiper=this;return swiper.slideTo(swiper.activeIndex,speed,runCallbacks,internal)}function slideToClosest(speed,runCallbacks,internal,threshold){if(speed===void 0){speed=this.params.speed}if(runCallbacks===void 0){runCallbacks=true}if(threshold===void 0){threshold=.5}var swiper=this;var index2=swiper.activeIndex;var skip=Math.min(swiper.params.slidesPerGroupSkip,index2);var snapIndex=skip+Math.floor((index2-skip)/swiper.params.slidesPerGroup);var translate=swiper.rtlTranslate?swiper.translate:-swiper.translate;if(translate>=swiper.snapGrid[snapIndex]){var currentSnap=swiper.snapGrid[snapIndex];var nextSnap=swiper.snapGrid[snapIndex+1];if(translate-currentSnap>(nextSnap-currentSnap)*threshold){index2+=swiper.params.slidesPerGroup}}else{var prevSnap=swiper.snapGrid[snapIndex-1];var _currentSnap=swiper.snapGrid[snapIndex];if(translate-prevSnap<=(_currentSnap-prevSnap)*threshold){index2-=swiper.params.slidesPerGroup}}index2=Math.max(index2,0);index2=Math.min(index2,swiper.slidesGrid.length-1);return swiper.slideTo(index2,speed,runCallbacks,internal)}function slideToClickedSlide(){var swiper=this;var params=swiper.params,$wrapperEl=swiper.$wrapperEl;var slidesPerView=params.slidesPerView==="auto"?swiper.slidesPerViewDynamic():params.slidesPerView;var slideToIndex=swiper.clickedIndex;var realIndex;if(params.loop){if(swiper.animating)return;realIndex=parseInt(dom_default(swiper.clickedSlide).attr("data-swiper-slide-index"),10);if(params.centeredSlides){if(slideToIndex<swiper.loopedSlides-slidesPerView/2||slideToIndex>swiper.slides.length-swiper.loopedSlides+slidesPerView/2){swiper.loopFix();slideToIndex=$wrapperEl.children("."+params.slideClass+'[data-swiper-slide-index="'+realIndex+'"]:not(.'+params.slideDuplicateClass+")").eq(0).index();nextTick(function(){swiper.slideTo(slideToIndex)})}else{swiper.slideTo(slideToIndex)}}else if(slideToIndex>swiper.slides.length-slidesPerView){swiper.loopFix();slideToIndex=$wrapperEl.children("."+params.slideClass+'[data-swiper-slide-index="'+realIndex+'"]:not(.'+params.slideDuplicateClass+")").eq(0).index();nextTick(function(){swiper.slideTo(slideToIndex)})}else{swiper.slideTo(slideToIndex)}}else{swiper.slideTo(slideToIndex)}}var slide_default={slideTo,slideToLoop,slideNext,slidePrev,slideReset,slideToClosest,slideToClickedSlide};function loopCreate(){var swiper=this;var document2=getDocument();var params=swiper.params,$wrapperEl=swiper.$wrapperEl;$wrapperEl.children("."+params.slideClass+"."+params.slideDuplicateClass).remove();var slides=$wrapperEl.children("."+params.slideClass);if(params.loopFillGroupWithBlank){var blankSlidesNum=params.slidesPerGroup-slides.length%params.slidesPerGroup;if(blankSlidesNum!==params.slidesPerGroup){for(var i=0;i<blankSlidesNum;i+=1){var blankNode=dom_default(document2.createElement("div")).addClass(params.slideClass+" "+params.slideBlankClass);$wrapperEl.append(blankNode)}slides=$wrapperEl.children("."+params.slideClass)}}if(params.slidesPerView==="auto"&&!params.loopedSlides)params.loopedSlides=slides.length;swiper.loopedSlides=Math.ceil(parseFloat(params.loopedSlides||params.slidesPerView,10));swiper.loopedSlides+=params.loopAdditionalSlides;if(swiper.loopedSlides>slides.length){swiper.loopedSlides=slides.length}var prependSlides=[];var appendSlides=[];slides.each(function(el,index2){var slide=dom_default(el);if(index2<swiper.loopedSlides){appendSlides.push(el)}if(index2<slides.length&&index2>=slides.length-swiper.loopedSlides){prependSlides.push(el)}slide.attr("data-swiper-slide-index",index2)});for(var _i=0;_i<appendSlides.length;_i+=1){$wrapperEl.append(dom_default(appendSlides[_i].cloneNode(true)).addClass(params.slideDuplicateClass))}for(var _i2=prependSlides.length-1;_i2>=0;_i2-=1){$wrapperEl.prepend(dom_default(prependSlides[_i2].cloneNode(true)).addClass(params.slideDuplicateClass))}}function loopFix(){var swiper=this;swiper.emit("beforeLoopFix");var activeIndex=swiper.activeIndex,slides=swiper.slides,loopedSlides=swiper.loopedSlides,allowSlidePrev=swiper.allowSlidePrev,allowSlideNext=swiper.allowSlideNext,snapGrid=swiper.snapGrid,rtl=swiper.rtlTranslate;var newIndex;swiper.allowSlidePrev=true;swiper.allowSlideNext=true;var snapTranslate=-snapGrid[activeIndex];var diff=snapTranslate-swiper.getTranslate();if(activeIndex<loopedSlides){newIndex=slides.length-loopedSlides*3+activeIndex;newIndex+=loopedSlides;var slideChanged=swiper.slideTo(newIndex,0,false,true);if(slideChanged&&diff!==0){swiper.setTranslate((rtl?-swiper.translate:swiper.translate)-diff)}}else if(activeIndex>=slides.length-loopedSlides){newIndex=-slides.length+activeIndex+loopedSlides;newIndex+=loopedSlides;var _slideChanged=swiper.slideTo(newIndex,0,false,true);if(_slideChanged&&diff!==0){swiper.setTranslate((rtl?-swiper.translate:swiper.translate)-diff)}}swiper.allowSlidePrev=allowSlidePrev;swiper.allowSlideNext=allowSlideNext;swiper.emit("loopFix")}function loopDestroy(){var swiper=this;var $wrapperEl=swiper.$wrapperEl,params=swiper.params,slides=swiper.slides;$wrapperEl.children("."+params.slideClass+"."+params.slideDuplicateClass+",."+params.slideClass+"."+params.slideBlankClass).remove();slides.removeAttr("data-swiper-slide-index")}var loop_default={loopCreate,loopFix,loopDestroy};function setGrabCursor(moving){var swiper=this;if(swiper.support.touch||!swiper.params.simulateTouch||swiper.params.watchOverflow&&swiper.isLocked||swiper.params.cssMode)return;var el=swiper.el;el.style.cursor="move";el.style.cursor=moving?"-webkit-grabbing":"-webkit-grab";el.style.cursor=moving?"-moz-grabbin":"-moz-grab";el.style.cursor=moving?"grabbing":"grab"}function unsetGrabCursor(){var swiper=this;if(swiper.support.touch||swiper.params.watchOverflow&&swiper.isLocked||swiper.params.cssMode){return}swiper.el.style.cursor=""}var grab_cursor_default={setGrabCursor,unsetGrabCursor};function appendSlide(slides){var swiper=this;var $wrapperEl=swiper.$wrapperEl,params=swiper.params;if(params.loop){swiper.loopDestroy()}if(typeof slides==="object"&&"length"in slides){for(var i=0;i<slides.length;i+=1){if(slides[i])$wrapperEl.append(slides[i])}}else{$wrapperEl.append(slides)}if(params.loop){swiper.loopCreate()}if(!(params.observer&&swiper.support.observer)){swiper.update()}}function prependSlide(slides){var swiper=this;var params=swiper.params,$wrapperEl=swiper.$wrapperEl,activeIndex=swiper.activeIndex;if(params.loop){swiper.loopDestroy()}var newActiveIndex=activeIndex+1;if(typeof slides==="object"&&"length"in slides){for(var i=0;i<slides.length;i+=1){if(slides[i])$wrapperEl.prepend(slides[i])}newActiveIndex=activeIndex+slides.length}else{$wrapperEl.prepend(slides)}if(params.loop){swiper.loopCreate()}if(!(params.observer&&swiper.support.observer)){swiper.update()}swiper.slideTo(newActiveIndex,0,false)}function addSlide(index2,slides){var swiper=this;var $wrapperEl=swiper.$wrapperEl,params=swiper.params,activeIndex=swiper.activeIndex;var activeIndexBuffer=activeIndex;if(params.loop){activeIndexBuffer-=swiper.loopedSlides;swiper.loopDestroy();swiper.slides=$wrapperEl.children("."+params.slideClass)}var baseLength=swiper.slides.length;if(index2<=0){swiper.prependSlide(slides);return}if(index2>=baseLength){swiper.appendSlide(slides);return}var newActiveIndex=activeIndexBuffer>index2?activeIndexBuffer+1:activeIndexBuffer;var slidesBuffer=[];for(var i=baseLength-1;i>=index2;i-=1){var currentSlide=swiper.slides.eq(i);currentSlide.remove();slidesBuffer.unshift(currentSlide)}if(typeof slides==="object"&&"length"in slides){for(var _i=0;_i<slides.length;_i+=1){if(slides[_i])$wrapperEl.append(slides[_i])}newActiveIndex=activeIndexBuffer>index2?activeIndexBuffer+slides.length:activeIndexBuffer}else{$wrapperEl.append(slides)}for(var _i2=0;_i2<slidesBuffer.length;_i2+=1){$wrapperEl.append(slidesBuffer[_i2])}if(params.loop){swiper.loopCreate()}if(!(params.observer&&swiper.support.observer)){swiper.update()}if(params.loop){swiper.slideTo(newActiveIndex+swiper.loopedSlides,0,false)}else{swiper.slideTo(newActiveIndex,0,false)}}function removeSlide(slidesIndexes){var swiper=this;var params=swiper.params,$wrapperEl=swiper.$wrapperEl,activeIndex=swiper.activeIndex;var activeIndexBuffer=activeIndex;if(params.loop){activeIndexBuffer-=swiper.loopedSlides;swiper.loopDestroy();swiper.slides=$wrapperEl.children("."+params.slideClass)}var newActiveIndex=activeIndexBuffer;var indexToRemove;if(typeof slidesIndexes==="object"&&"length"in slidesIndexes){for(var i=0;i<slidesIndexes.length;i+=1){indexToRemove=slidesIndexes[i];if(swiper.slides[indexToRemove])swiper.slides.eq(indexToRemove).remove();if(indexToRemove<newActiveIndex)newActiveIndex-=1}newActiveIndex=Math.max(newActiveIndex,0)}else{indexToRemove=slidesIndexes;if(swiper.slides[indexToRemove])swiper.slides.eq(indexToRemove).remove();if(indexToRemove<newActiveIndex)newActiveIndex-=1;newActiveIndex=Math.max(newActiveIndex,0)}if(params.loop){swiper.loopCreate()}if(!(params.observer&&swiper.support.observer)){swiper.update()}if(params.loop){swiper.slideTo(newActiveIndex+swiper.loopedSlides,0,false)}else{swiper.slideTo(newActiveIndex,0,false)}}function removeAllSlides(){var swiper=this;var slidesIndexes=[];for(var i=0;i<swiper.slides.length;i+=1){slidesIndexes.push(i)}swiper.removeSlide(slidesIndexes)}var manipulation_default={appendSlide,prependSlide,addSlide,removeSlide,removeAllSlides};function closestElement(selector,base){if(base===void 0){base=this}function __closestFrom(el){if(!el||el===getDocument()||el===getWindow())return null;if(el.assignedSlot)el=el.assignedSlot;var found=el.closest(selector);return found||__closestFrom(el.getRootNode().host)}return __closestFrom(base)}function onTouchStart(event){var swiper=this;var document2=getDocument();var window2=getWindow();var data=swiper.touchEventsData;var params=swiper.params,touches=swiper.touches,enabled=swiper.enabled;if(!enabled)return;if(swiper.animating&&params.preventInteractionOnTransition){return}var e=event;if(e.originalEvent)e=e.originalEvent;var $targetEl=dom_default(e.target);if(params.touchEventsTarget==="wrapper"){if(!$targetEl.closest(swiper.wrapperEl).length)return}data.isTouchEvent=e.type==="touchstart";if(!data.isTouchEvent&&"which"in e&&e.which===3)return;if(!data.isTouchEvent&&"button"in e&&e.button>0)return;if(data.isTouched&&data.isMoved)return;var swipingClassHasValue=!!params.noSwipingClass&&params.noSwipingClass!=="";if(swipingClassHasValue&&e.target&&e.target.shadowRoot&&event.path&&event.path[0]){$targetEl=dom_default(event.path[0])}var noSwipingSelector=params.noSwipingSelector?params.noSwipingSelector:"."+params.noSwipingClass;var isTargetShadow=!!(e.target&&e.target.shadowRoot);if(params.noSwiping&&(isTargetShadow?closestElement(noSwipingSelector,e.target):$targetEl.closest(noSwipingSelector)[0])){swiper.allowClick=true;return}if(params.swipeHandler){if(!$targetEl.closest(params.swipeHandler)[0])return}touches.currentX=e.type==="touchstart"?e.targetTouches[0].pageX:e.pageX;touches.currentY=e.type==="touchstart"?e.targetTouches[0].pageY:e.pageY;var startX=touches.currentX;var startY=touches.currentY;var edgeSwipeDetection=params.edgeSwipeDetection||params.iOSEdgeSwipeDetection;var edgeSwipeThreshold=params.edgeSwipeThreshold||params.iOSEdgeSwipeThreshold;if(edgeSwipeDetection&&(startX<=edgeSwipeThreshold||startX>=window2.innerWidth-edgeSwipeThreshold)){if(edgeSwipeDetection==="prevent"){event.preventDefault()}else{return}}extend2(data,{isTouched:true,isMoved:false,allowTouchCallbacks:true,isScrolling:void 0,startMoving:void 0});touches.startX=startX;touches.startY=startY;data.touchStartTime=now();swiper.allowClick=true;swiper.updateSize();swiper.swipeDirection=void 0;if(params.threshold>0)data.allowThresholdMove=false;if(e.type!=="touchstart"){var preventDefault=true;if($targetEl.is(data.focusableElements))preventDefault=false;if(document2.activeElement&&dom_default(document2.activeElement).is(data.focusableElements)&&document2.activeElement!==$targetEl[0]){document2.activeElement.blur()}var shouldPreventDefault=preventDefault&&swiper.allowTouchMove&&params.touchStartPreventDefault;if((params.touchStartForcePreventDefault||shouldPreventDefault)&&!$targetEl[0].isContentEditable){e.preventDefault()}}swiper.emit("touchStart",e)}function onTouchMove(event){var document2=getDocument();var swiper=this;var data=swiper.touchEventsData;var params=swiper.params,touches=swiper.touches,rtl=swiper.rtlTranslate,enabled=swiper.enabled;if(!enabled)return;var e=event;if(e.originalEvent)e=e.originalEvent;if(!data.isTouched){if(data.startMoving&&data.isScrolling){swiper.emit("touchMoveOpposite",e)}return}if(data.isTouchEvent&&e.type!=="touchmove")return;var targetTouch=e.type==="touchmove"&&e.targetTouches&&(e.targetTouches[0]||e.changedTouches[0]);var pageX=e.type==="touchmove"?targetTouch.pageX:e.pageX;var pageY=e.type==="touchmove"?targetTouch.pageY:e.pageY;if(e.preventedByNestedSwiper){touches.startX=pageX;touches.startY=pageY;return}if(!swiper.allowTouchMove){swiper.allowClick=false;if(data.isTouched){extend2(touches,{startX:pageX,startY:pageY,currentX:pageX,currentY:pageY});data.touchStartTime=now()}return}if(data.isTouchEvent&&params.touchReleaseOnEdges&&!params.loop){if(swiper.isVertical()){if(pageY<touches.startY&&swiper.translate<=swiper.maxTranslate()||pageY>touches.startY&&swiper.translate>=swiper.minTranslate()){data.isTouched=false;data.isMoved=false;return}}else if(pageX<touches.startX&&swiper.translate<=swiper.maxTranslate()||pageX>touches.startX&&swiper.translate>=swiper.minTranslate()){return}}if(data.isTouchEvent&&document2.activeElement){if(e.target===document2.activeElement&&dom_default(e.target).is(data.focusableElements)){data.isMoved=true;swiper.allowClick=false;return}}if(data.allowTouchCallbacks){swiper.emit("touchMove",e)}if(e.targetTouches&&e.targetTouches.length>1)return;touches.currentX=pageX;touches.currentY=pageY;var diffX=touches.currentX-touches.startX;var diffY=touches.currentY-touches.startY;if(swiper.params.threshold&&Math.sqrt(Math.pow(diffX,2)+Math.pow(diffY,2))<swiper.params.threshold)return;if(typeof data.isScrolling==="undefined"){var touchAngle;if(swiper.isHorizontal()&&touches.currentY===touches.startY||swiper.isVertical()&&touches.currentX===touches.startX){data.isScrolling=false}else{if(diffX*diffX+diffY*diffY>=25){touchAngle=Math.atan2(Math.abs(diffY),Math.abs(diffX))*180/Math.PI;data.isScrolling=swiper.isHorizontal()?touchAngle>params.touchAngle:90-touchAngle>params.touchAngle}}}if(data.isScrolling){swiper.emit("touchMoveOpposite",e)}if(typeof data.startMoving==="undefined"){if(touches.currentX!==touches.startX||touches.currentY!==touches.startY){data.startMoving=true}}if(data.isScrolling){data.isTouched=false;return}if(!data.startMoving){return}swiper.allowClick=false;if(!params.cssMode&&e.cancelable){e.preventDefault()}if(params.touchMoveStopPropagation&&!params.nested){e.stopPropagation()}if(!data.isMoved){if(params.loop){swiper.loopFix()}data.startTranslate=swiper.getTranslate();swiper.setTransition(0);if(swiper.animating){swiper.$wrapperEl.trigger("webkitTransitionEnd transitionend")}data.allowMomentumBounce=false;if(params.grabCursor&&(swiper.allowSlideNext===true||swiper.allowSlidePrev===true)){swiper.setGrabCursor(true)}swiper.emit("sliderFirstMove",e)}swiper.emit("sliderMove",e);data.isMoved=true;var diff=swiper.isHorizontal()?diffX:diffY;touches.diff=diff;diff*=params.touchRatio;if(rtl)diff=-diff;swiper.swipeDirection=diff>0?"prev":"next";data.currentTranslate=diff+data.startTranslate;var disableParentSwiper=true;var resistanceRatio=params.resistanceRatio;if(params.touchReleaseOnEdges){resistanceRatio=0}if(diff>0&&data.currentTranslate>swiper.minTranslate()){disableParentSwiper=false;if(params.resistance)data.currentTranslate=swiper.minTranslate()-1+Math.pow(-swiper.minTranslate()+data.startTranslate+diff,resistanceRatio)}else if(diff<0&&data.currentTranslate<swiper.maxTranslate()){disableParentSwiper=false;if(params.resistance)data.currentTranslate=swiper.maxTranslate()+1-Math.pow(swiper.maxTranslate()-data.startTranslate-diff,resistanceRatio)}if(disableParentSwiper){e.preventedByNestedSwiper=true}if(!swiper.allowSlideNext&&swiper.swipeDirection==="next"&&data.currentTranslate<data.startTranslate){data.currentTranslate=data.startTranslate}if(!swiper.allowSlidePrev&&swiper.swipeDirection==="prev"&&data.currentTranslate>data.startTranslate){data.currentTranslate=data.startTranslate}if(!swiper.allowSlidePrev&&!swiper.allowSlideNext){data.currentTranslate=data.startTranslate}if(params.threshold>0){if(Math.abs(diff)>params.threshold||data.allowThresholdMove){if(!data.allowThresholdMove){data.allowThresholdMove=true;touches.startX=touches.currentX;touches.startY=touches.currentY;data.currentTranslate=data.startTranslate;touches.diff=swiper.isHorizontal()?touches.currentX-touches.startX:touches.currentY-touches.startY;return}}else{data.currentTranslate=data.startTranslate;return}}if(!params.followFinger||params.cssMode)return;if(params.freeMode||params.watchSlidesProgress||params.watchSlidesVisibility){swiper.updateActiveIndex();swiper.updateSlidesClasses()}if(params.freeMode){if(data.velocities.length===0){data.velocities.push({position:touches[swiper.isHorizontal()?"startX":"startY"],time:data.touchStartTime})}data.velocities.push({position:touches[swiper.isHorizontal()?"currentX":"currentY"],time:now()})}swiper.updateProgress(data.currentTranslate);swiper.setTranslate(data.currentTranslate)}function onTouchEnd(event){var swiper=this;var data=swiper.touchEventsData;var params=swiper.params,touches=swiper.touches,rtl=swiper.rtlTranslate,$wrapperEl=swiper.$wrapperEl,slidesGrid=swiper.slidesGrid,snapGrid=swiper.snapGrid,enabled=swiper.enabled;if(!enabled)return;var e=event;if(e.originalEvent)e=e.originalEvent;if(data.allowTouchCallbacks){swiper.emit("touchEnd",e)}data.allowTouchCallbacks=false;if(!data.isTouched){if(data.isMoved&&params.grabCursor){swiper.setGrabCursor(false)}data.isMoved=false;data.startMoving=false;return}if(params.grabCursor&&data.isMoved&&data.isTouched&&(swiper.allowSlideNext===true||swiper.allowSlidePrev===true)){swiper.setGrabCursor(false)}var touchEndTime=now();var timeDiff=touchEndTime-data.touchStartTime;if(swiper.allowClick){swiper.updateClickedSlide(e);swiper.emit("tap click",e);if(timeDiff<300&&touchEndTime-data.lastClickTime<300){swiper.emit("doubleTap doubleClick",e)}}data.lastClickTime=now();nextTick(function(){if(!swiper.destroyed)swiper.allowClick=true});if(!data.isTouched||!data.isMoved||!swiper.swipeDirection||touches.diff===0||data.currentTranslate===data.startTranslate){data.isTouched=false;data.isMoved=false;data.startMoving=false;return}data.isTouched=false;data.isMoved=false;data.startMoving=false;var currentPos;if(params.followFinger){currentPos=rtl?swiper.translate:-swiper.translate}else{currentPos=-data.currentTranslate}if(params.cssMode){return}if(params.freeMode){if(currentPos<-swiper.minTranslate()){swiper.slideTo(swiper.activeIndex);return}if(currentPos>-swiper.maxTranslate()){if(swiper.slides.length<snapGrid.length){swiper.slideTo(snapGrid.length-1)}else{swiper.slideTo(swiper.slides.length-1)}return}if(params.freeModeMomentum){if(data.velocities.length>1){var lastMoveEvent=data.velocities.pop();var velocityEvent=data.velocities.pop();var distance=lastMoveEvent.position-velocityEvent.position;var time=lastMoveEvent.time-velocityEvent.time;swiper.velocity=distance/time;swiper.velocity/=2;if(Math.abs(swiper.velocity)<params.freeModeMinimumVelocity){swiper.velocity=0}if(time>150||now()-lastMoveEvent.time>300){swiper.velocity=0}}else{swiper.velocity=0}swiper.velocity*=params.freeModeMomentumVelocityRatio;data.velocities.length=0;var momentumDuration=1e3*params.freeModeMomentumRatio;var momentumDistance=swiper.velocity*momentumDuration;var newPosition=swiper.translate+momentumDistance;if(rtl)newPosition=-newPosition;var doBounce=false;var afterBouncePosition;var bounceAmount=Math.abs(swiper.velocity)*20*params.freeModeMomentumBounceRatio;var needsLoopFix;if(newPosition<swiper.maxTranslate()){if(params.freeModeMomentumBounce){if(newPosition+swiper.maxTranslate()<-bounceAmount){newPosition=swiper.maxTranslate()-bounceAmount}afterBouncePosition=swiper.maxTranslate();doBounce=true;data.allowMomentumBounce=true}else{newPosition=swiper.maxTranslate()}if(params.loop&&params.centeredSlides)needsLoopFix=true}else if(newPosition>swiper.minTranslate()){if(params.freeModeMomentumBounce){if(newPosition-swiper.minTranslate()>bounceAmount){newPosition=swiper.minTranslate()+bounceAmount}afterBouncePosition=swiper.minTranslate();doBounce=true;data.allowMomentumBounce=true}else{newPosition=swiper.minTranslate()}if(params.loop&&params.centeredSlides)needsLoopFix=true}else if(params.freeModeSticky){var nextSlide;for(var j=0;j<snapGrid.length;j+=1){if(snapGrid[j]>-newPosition){nextSlide=j;break}}if(Math.abs(snapGrid[nextSlide]-newPosition)<Math.abs(snapGrid[nextSlide-1]-newPosition)||swiper.swipeDirection==="next"){newPosition=snapGrid[nextSlide]}else{newPosition=snapGrid[nextSlide-1]}newPosition=-newPosition}if(needsLoopFix){swiper.once("transitionEnd",function(){swiper.loopFix()})}if(swiper.velocity!==0){if(rtl){momentumDuration=Math.abs((-newPosition-swiper.translate)/swiper.velocity)}else{momentumDuration=Math.abs((newPosition-swiper.translate)/swiper.velocity)}if(params.freeModeSticky){var moveDistance=Math.abs((rtl?-newPosition:newPosition)-swiper.translate);var currentSlideSize=swiper.slidesSizesGrid[swiper.activeIndex];if(moveDistance<currentSlideSize){momentumDuration=params.speed}else if(moveDistance<2*currentSlideSize){momentumDuration=params.speed*1.5}else{momentumDuration=params.speed*2.5}}}else if(params.freeModeSticky){swiper.slideToClosest();return}if(params.freeModeMomentumBounce&&doBounce){swiper.updateProgress(afterBouncePosition);swiper.setTransition(momentumDuration);swiper.setTranslate(newPosition);swiper.transitionStart(true,swiper.swipeDirection);swiper.animating=true;$wrapperEl.transitionEnd(function(){if(!swiper||swiper.destroyed||!data.allowMomentumBounce)return;swiper.emit("momentumBounce");swiper.setTransition(params.speed);setTimeout(function(){swiper.setTranslate(afterBouncePosition);$wrapperEl.transitionEnd(function(){if(!swiper||swiper.destroyed)return;swiper.transitionEnd()})},0)})}else if(swiper.velocity){swiper.updateProgress(newPosition);swiper.setTransition(momentumDuration);swiper.setTranslate(newPosition);swiper.transitionStart(true,swiper.swipeDirection);if(!swiper.animating){swiper.animating=true;$wrapperEl.transitionEnd(function(){if(!swiper||swiper.destroyed)return;swiper.transitionEnd()})}}else{swiper.emit("_freeModeNoMomentumRelease");swiper.updateProgress(newPosition)}swiper.updateActiveIndex();swiper.updateSlidesClasses()}else if(params.freeModeSticky){swiper.slideToClosest();return}else if(params.freeMode){swiper.emit("_freeModeNoMomentumRelease")}if(!params.freeModeMomentum||timeDiff>=params.longSwipesMs){swiper.updateProgress();swiper.updateActiveIndex();swiper.updateSlidesClasses()}return}var stopIndex=0;var groupSize=swiper.slidesSizesGrid[0];for(var i=0;i<slidesGrid.length;i+=i<params.slidesPerGroupSkip?1:params.slidesPerGroup){var _increment=i<params.slidesPerGroupSkip-1?1:params.slidesPerGroup;if(typeof slidesGrid[i+_increment]!=="undefined"){if(currentPos>=slidesGrid[i]&&currentPos<slidesGrid[i+_increment]){stopIndex=i;groupSize=slidesGrid[i+_increment]-slidesGrid[i]}}else if(currentPos>=slidesGrid[i]){stopIndex=i;groupSize=slidesGrid[slidesGrid.length-1]-slidesGrid[slidesGrid.length-2]}}var ratio=(currentPos-slidesGrid[stopIndex])/groupSize;var increment=stopIndex<params.slidesPerGroupSkip-1?1:params.slidesPerGroup;if(timeDiff>params.longSwipesMs){if(!params.longSwipes){swiper.slideTo(swiper.activeIndex);return}if(swiper.swipeDirection==="next"){if(ratio>=params.longSwipesRatio)swiper.slideTo(stopIndex+increment);else swiper.slideTo(stopIndex)}if(swiper.swipeDirection==="prev"){if(ratio>1-params.longSwipesRatio)swiper.slideTo(stopIndex+increment);else swiper.slideTo(stopIndex)}}else{if(!params.shortSwipes){swiper.slideTo(swiper.activeIndex);return}var isNavButtonTarget=swiper.navigation&&(e.target===swiper.navigation.nextEl||e.target===swiper.navigation.prevEl);if(!isNavButtonTarget){if(swiper.swipeDirection==="next"){swiper.slideTo(stopIndex+increment)}if(swiper.swipeDirection==="prev"){swiper.slideTo(stopIndex)}}else if(e.target===swiper.navigation.nextEl){swiper.slideTo(stopIndex+increment)}else{swiper.slideTo(stopIndex)}}}function onResize(){var swiper=this;var params=swiper.params,el=swiper.el;if(el&&el.offsetWidth===0)return;if(params.breakpoints){swiper.setBreakpoint()}var allowSlideNext=swiper.allowSlideNext,allowSlidePrev=swiper.allowSlidePrev,snapGrid=swiper.snapGrid;swiper.allowSlideNext=true;swiper.allowSlidePrev=true;swiper.updateSize();swiper.updateSlides();swiper.updateSlidesClasses();if((params.slidesPerView==="auto"||params.slidesPerView>1)&&swiper.isEnd&&!swiper.isBeginning&&!swiper.params.centeredSlides){swiper.slideTo(swiper.slides.length-1,0,false,true)}else{swiper.slideTo(swiper.activeIndex,0,false,true)}if(swiper.autoplay&&swiper.autoplay.running&&swiper.autoplay.paused){swiper.autoplay.run()}swiper.allowSlidePrev=allowSlidePrev;swiper.allowSlideNext=allowSlideNext;if(swiper.params.watchOverflow&&snapGrid!==swiper.snapGrid){swiper.checkOverflow()}}function onClick(e){var swiper=this;if(!swiper.enabled)return;if(!swiper.allowClick){if(swiper.params.preventClicks)e.preventDefault();if(swiper.params.preventClicksPropagation&&swiper.animating){e.stopPropagation();e.stopImmediatePropagation()}}}function onScroll(){var swiper=this;var wrapperEl=swiper.wrapperEl,rtlTranslate=swiper.rtlTranslate,enabled=swiper.enabled;if(!enabled)return;swiper.previousTranslate=swiper.translate;if(swiper.isHorizontal()){if(rtlTranslate){swiper.translate=wrapperEl.scrollWidth-wrapperEl.offsetWidth-wrapperEl.scrollLeft}else{swiper.translate=-wrapperEl.scrollLeft}}else{swiper.translate=-wrapperEl.scrollTop}if(swiper.translate===-0)swiper.translate=0;swiper.updateActiveIndex();swiper.updateSlidesClasses();var newProgress;var translatesDiff=swiper.maxTranslate()-swiper.minTranslate();if(translatesDiff===0){newProgress=0}else{newProgress=(swiper.translate-swiper.minTranslate())/translatesDiff}if(newProgress!==swiper.progress){swiper.updateProgress(rtlTranslate?-swiper.translate:swiper.translate)}swiper.emit("setTranslate",swiper.translate,false)}var dummyEventAttached=false;function dummyEventListener(){}function attachEvents(){var swiper=this;var document2=getDocument();var params=swiper.params,touchEvents=swiper.touchEvents,el=swiper.el,wrapperEl=swiper.wrapperEl,device2=swiper.device,support2=swiper.support;swiper.onTouchStart=onTouchStart.bind(swiper);swiper.onTouchMove=onTouchMove.bind(swiper);swiper.onTouchEnd=onTouchEnd.bind(swiper);if(params.cssMode){swiper.onScroll=onScroll.bind(swiper)}swiper.onClick=onClick.bind(swiper);var capture=!!params.nested;if(!support2.touch&&support2.pointerEvents){el.addEventListener(touchEvents.start,swiper.onTouchStart,false);document2.addEventListener(touchEvents.move,swiper.onTouchMove,capture);document2.addEventListener(touchEvents.end,swiper.onTouchEnd,false)}else{if(support2.touch){var passiveListener=touchEvents.start==="touchstart"&&support2.passiveListener&&params.passiveListeners?{passive:true,capture:false}:false;el.addEventListener(touchEvents.start,swiper.onTouchStart,passiveListener);el.addEventListener(touchEvents.move,swiper.onTouchMove,support2.passiveListener?{passive:false,capture}:capture);el.addEventListener(touchEvents.end,swiper.onTouchEnd,passiveListener);if(touchEvents.cancel){el.addEventListener(touchEvents.cancel,swiper.onTouchEnd,passiveListener)}if(!dummyEventAttached){document2.addEventListener("touchstart",dummyEventListener);dummyEventAttached=true}}if(params.simulateTouch&&!device2.ios&&!device2.android||params.simulateTouch&&!support2.touch&&device2.ios){el.addEventListener("mousedown",swiper.onTouchStart,false);document2.addEventListener("mousemove",swiper.onTouchMove,capture);document2.addEventListener("mouseup",swiper.onTouchEnd,false)}}if(params.preventClicks||params.preventClicksPropagation){el.addEventListener("click",swiper.onClick,true)}if(params.cssMode){wrapperEl.addEventListener("scroll",swiper.onScroll)}if(params.updateOnWindowResize){swiper.on(device2.ios||device2.android?"resize orientationchange observerUpdate":"resize observerUpdate",onResize,true)}else{swiper.on("observerUpdate",onResize,true)}}function detachEvents(){var swiper=this;var document2=getDocument();var params=swiper.params,touchEvents=swiper.touchEvents,el=swiper.el,wrapperEl=swiper.wrapperEl,device2=swiper.device,support2=swiper.support;var capture=!!params.nested;if(!support2.touch&&support2.pointerEvents){el.removeEventListener(touchEvents.start,swiper.onTouchStart,false);document2.removeEventListener(touchEvents.move,swiper.onTouchMove,capture);document2.removeEventListener(touchEvents.end,swiper.onTouchEnd,false)}else{if(support2.touch){var passiveListener=touchEvents.start==="onTouchStart"&&support2.passiveListener&&params.passiveListeners?{passive:true,capture:false}:false;el.removeEventListener(touchEvents.start,swiper.onTouchStart,passiveListener);el.removeEventListener(touchEvents.move,swiper.onTouchMove,capture);el.removeEventListener(touchEvents.end,swiper.onTouchEnd,passiveListener);if(touchEvents.cancel){el.removeEventListener(touchEvents.cancel,swiper.onTouchEnd,passiveListener)}}if(params.simulateTouch&&!device2.ios&&!device2.android||params.simulateTouch&&!support2.touch&&device2.ios){el.removeEventListener("mousedown",swiper.onTouchStart,false);document2.removeEventListener("mousemove",swiper.onTouchMove,capture);document2.removeEventListener("mouseup",swiper.onTouchEnd,false)}}if(params.preventClicks||params.preventClicksPropagation){el.removeEventListener("click",swiper.onClick,true)}if(params.cssMode){wrapperEl.removeEventListener("scroll",swiper.onScroll)}swiper.off(device2.ios||device2.android?"resize orientationchange observerUpdate":"resize observerUpdate",onResize)}var events_default={attachEvents,detachEvents};function setBreakpoint(){var swiper=this;var activeIndex=swiper.activeIndex,initialized=swiper.initialized,_swiper$loopedSlides=swiper.loopedSlides,loopedSlides=_swiper$loopedSlides===void 0?0:_swiper$loopedSlides,params=swiper.params,$el=swiper.$el;var breakpoints=params.breakpoints;if(!breakpoints||breakpoints&&Object.keys(breakpoints).length===0)return;var breakpoint=swiper.getBreakpoint(breakpoints,swiper.params.breakpointsBase,swiper.el);if(!breakpoint||swiper.currentBreakpoint===breakpoint)return;var breakpointOnlyParams=breakpoint in breakpoints?breakpoints[breakpoint]:void 0;if(breakpointOnlyParams){["slidesPerView","spaceBetween","slidesPerGroup","slidesPerGroupSkip","slidesPerColumn"].forEach(function(param){var paramValue=breakpointOnlyParams[param];if(typeof paramValue==="undefined")return;if(param==="slidesPerView"&&(paramValue==="AUTO"||paramValue==="auto")){breakpointOnlyParams[param]="auto"}else if(param==="slidesPerView"){breakpointOnlyParams[param]=parseFloat(paramValue)}else{breakpointOnlyParams[param]=parseInt(paramValue,10)}})}var breakpointParams=breakpointOnlyParams||swiper.originalParams;var wasMultiRow=params.slidesPerColumn>1;var isMultiRow=breakpointParams.slidesPerColumn>1;var wasEnabled=params.enabled;if(wasMultiRow&&!isMultiRow){$el.removeClass(params.containerModifierClass+"multirow "+params.containerModifierClass+"multirow-column");swiper.emitContainerClasses()}else if(!wasMultiRow&&isMultiRow){$el.addClass(params.containerModifierClass+"multirow");if(breakpointParams.slidesPerColumnFill&&breakpointParams.slidesPerColumnFill==="column"||!breakpointParams.slidesPerColumnFill&&params.slidesPerColumnFill==="column"){$el.addClass(params.containerModifierClass+"multirow-column")}swiper.emitContainerClasses()}var directionChanged=breakpointParams.direction&&breakpointParams.direction!==params.direction;var needsReLoop=params.loop&&(breakpointParams.slidesPerView!==params.slidesPerView||directionChanged);if(directionChanged&&initialized){swiper.changeDirection()}extend2(swiper.params,breakpointParams);var isEnabled=swiper.params.enabled;extend2(swiper,{allowTouchMove:swiper.params.allowTouchMove,allowSlideNext:swiper.params.allowSlideNext,allowSlidePrev:swiper.params.allowSlidePrev});if(wasEnabled&&!isEnabled){swiper.disable()}else if(!wasEnabled&&isEnabled){swiper.enable()}swiper.currentBreakpoint=breakpoint;swiper.emit("_beforeBreakpoint",breakpointParams);if(needsReLoop&&initialized){swiper.loopDestroy();swiper.loopCreate();swiper.updateSlides();swiper.slideTo(activeIndex-loopedSlides+swiper.loopedSlides,0,false)}swiper.emit("breakpoint",breakpointParams)}function getBreakpoint(breakpoints,base,containerEl){if(base===void 0){base="window"}if(!breakpoints||base==="container"&&!containerEl)return void 0;var breakpoint=false;var window2=getWindow();var currentHeight=base==="window"?window2.innerHeight:containerEl.clientHeight;var points=Object.keys(breakpoints).map(function(point2){if(typeof point2==="string"&&point2.indexOf("@")===0){var minRatio=parseFloat(point2.substr(1));var value2=currentHeight*minRatio;return{value:value2,point:point2}}return{value:point2,point:point2}});points.sort(function(a,b){return parseInt(a.value,10)-parseInt(b.value,10)});for(var i=0;i<points.length;i+=1){var _points$i=points[i],point=_points$i.point,value=_points$i.value;if(base==="window"){if(window2.matchMedia("(min-width: "+value+"px)").matches){breakpoint=point}}else if(value<=containerEl.clientWidth){breakpoint=point}}return breakpoint||"max"}var breakpoints_default={setBreakpoint,getBreakpoint};function prepareClasses(entries,prefix){var resultClasses=[];entries.forEach(function(item){if(typeof item==="object"){Object.keys(item).forEach(function(classNames){if(item[classNames]){resultClasses.push(prefix+classNames)}})}else if(typeof item==="string"){resultClasses.push(prefix+item)}});return resultClasses}function addClasses(){var swiper=this;var classNames=swiper.classNames,params=swiper.params,rtl=swiper.rtl,$el=swiper.$el,device2=swiper.device,support2=swiper.support;var suffixes=prepareClasses(["initialized",params.direction,{"pointer-events":support2.pointerEvents&&!support2.touch},{"free-mode":params.freeMode},{"autoheight":params.autoHeight},{"rtl":rtl},{"multirow":params.slidesPerColumn>1},{"multirow-column":params.slidesPerColumn>1&&params.slidesPerColumnFill==="column"},{"android":device2.android},{"ios":device2.ios},{"css-mode":params.cssMode}],params.containerModifierClass);classNames.push.apply(classNames,suffixes);$el.addClass([].concat(classNames).join(" "));swiper.emitContainerClasses()}function removeClasses(){var swiper=this;var $el=swiper.$el,classNames=swiper.classNames;$el.removeClass(classNames.join(" "));swiper.emitContainerClasses()}var classes_default={addClasses,removeClasses};function loadImage(imageEl,src,srcset,sizes,checkForComplete,callback){var window2=getWindow();var image;function onReady(){if(callback)callback()}var isPicture=dom_default(imageEl).parent("picture")[0];if(!isPicture&&(!imageEl.complete||!checkForComplete)){if(src){image=new window2.Image;image.onload=onReady;image.onerror=onReady;if(sizes){image.sizes=sizes}if(srcset){image.srcset=srcset}if(src){image.src=src}}else{onReady()}}else{onReady()}}function preloadImages(){var swiper=this;swiper.imagesToLoad=swiper.$el.find("img");function onReady(){if(typeof swiper==="undefined"||swiper===null||!swiper||swiper.destroyed)return;if(swiper.imagesLoaded!==void 0)swiper.imagesLoaded+=1;if(swiper.imagesLoaded===swiper.imagesToLoad.length){if(swiper.params.updateOnImagesReady)swiper.update();swiper.emit("imagesReady")}}for(var i=0;i<swiper.imagesToLoad.length;i+=1){var imageEl=swiper.imagesToLoad[i];swiper.loadImage(imageEl,imageEl.currentSrc||imageEl.getAttribute("src"),imageEl.srcset||imageEl.getAttribute("srcset"),imageEl.sizes||imageEl.getAttribute("sizes"),true,onReady)}}var images_default={loadImage,preloadImages};function checkOverflow(){var swiper=this;var params=swiper.params;var wasLocked=swiper.isLocked;var lastSlidePosition=swiper.slides.length>0&&params.slidesOffsetBefore+params.spaceBetween*(swiper.slides.length-1)+swiper.slides[0].offsetWidth*swiper.slides.length;if(params.slidesOffsetBefore&&params.slidesOffsetAfter&&lastSlidePosition){swiper.isLocked=lastSlidePosition<=swiper.size}else{swiper.isLocked=swiper.snapGrid.length===1}swiper.allowSlideNext=!swiper.isLocked;swiper.allowSlidePrev=!swiper.isLocked;if(wasLocked!==swiper.isLocked)swiper.emit(swiper.isLocked?"lock":"unlock");if(wasLocked&&wasLocked!==swiper.isLocked){swiper.isEnd=false;if(swiper.navigation)swiper.navigation.update()}}var check_overflow_default={checkOverflow};var defaults_default={init:true,direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,cssMode:false,updateOnWindowResize:true,resizeObserver:false,nested:false,createElements:false,enabled:true,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:false,userAgent:null,url:null,edgeSwipeDetection:false,edgeSwipeThreshold:20,freeMode:false,freeModeMomentum:true,freeModeMomentumRatio:1,freeModeMomentumBounce:true,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:false,freeModeMinimumVelocity:.02,autoHeight:false,setWrapperSize:false,virtualTranslate:false,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,slidesPerGroupSkip:0,centeredSlides:false,centeredSlidesBounds:false,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:true,centerInsufficientSlides:false,watchOverflow:false,roundLengths:false,touchRatio:1,touchAngle:45,simulateTouch:true,shortSwipes:true,longSwipes:true,longSwipesRatio:.5,longSwipesMs:300,followFinger:true,allowTouchMove:true,threshold:0,touchMoveStopPropagation:false,touchStartPreventDefault:true,touchStartForcePreventDefault:false,touchReleaseOnEdges:false,uniqueNavElements:true,resistance:true,resistanceRatio:.85,watchSlidesProgress:false,watchSlidesVisibility:false,grabCursor:false,preventClicks:true,preventClicksPropagation:true,slideToClickedSlide:false,preloadImages:true,updateOnImagesReady:true,loop:false,loopAdditionalSlides:0,loopedSlides:null,loopFillGroupWithBlank:false,loopPreventsSlide:true,allowSlidePrev:true,allowSlideNext:true,swipeHandler:null,noSwiping:true,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:true,containerModifierClass:"swiper-container-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-invisible-blank",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",runCallbacksOnInit:true,_emitClasses:false};function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor}var prototypes={modular:modular_default,eventsEmitter:events_emitter_default,update:update_default,translate:translate_default,transition:transition_default,slide:slide_default,loop:loop_default,grabCursor:grab_cursor_default,manipulation:manipulation_default,events:events_default,breakpoints:breakpoints_default,checkOverflow:check_overflow_default,classes:classes_default,images:images_default};var extendedDefaults={};var Swiper=function(){function Swiper2(){var el;var params;for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key]}if(args.length===1&&args[0].constructor&&Object.prototype.toString.call(args[0]).slice(8,-1)==="Object"){params=args[0]}else{el=args[0];params=args[1]}if(!params)params={};params=extend2({},params);if(el&&!params.el)params.el=el;if(params.el&&dom_default(params.el).length>1){var swipers=[];dom_default(params.el).each(function(containerEl){var newParams=extend2({},params,{el:containerEl});swipers.push(new Swiper2(newParams))});return swipers}var swiper=this;swiper.__swiper__=true;swiper.support=getSupport();swiper.device=getDevice({userAgent:params.userAgent});swiper.browser=getBrowser();swiper.eventsListeners={};swiper.eventsAnyListeners=[];if(typeof swiper.modules==="undefined"){swiper.modules={}}Object.keys(swiper.modules).forEach(function(moduleName){var module=swiper.modules[moduleName];if(module.params){var moduleParamName=Object.keys(module.params)[0];var moduleParams=module.params[moduleParamName];if(typeof moduleParams!=="object"||moduleParams===null)return;if(["navigation","pagination","scrollbar"].indexOf(moduleParamName)>=0&&params[moduleParamName]===true){params[moduleParamName]={auto:true}}if(!(moduleParamName in params&&"enabled"in moduleParams))return;if(params[moduleParamName]===true){params[moduleParamName]={enabled:true}}if(typeof params[moduleParamName]==="object"&&!("enabled"in params[moduleParamName])){params[moduleParamName].enabled=true}if(!params[moduleParamName])params[moduleParamName]={enabled:false}}});var swiperParams=extend2({},defaults_default);swiper.useParams(swiperParams);swiper.params=extend2({},swiperParams,extendedDefaults,params);swiper.originalParams=extend2({},swiper.params);swiper.passedParams=extend2({},params);if(swiper.params&&swiper.params.on){Object.keys(swiper.params.on).forEach(function(eventName){swiper.on(eventName,swiper.params.on[eventName])})}if(swiper.params&&swiper.params.onAny){swiper.onAny(swiper.params.onAny)}swiper.$=dom_default;extend2(swiper,{enabled:swiper.params.enabled,el,classNames:[],slides:dom_default(),slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:function isHorizontal(){return swiper.params.direction==="horizontal"},isVertical:function isVertical(){return swiper.params.direction==="vertical"},activeIndex:0,realIndex:0,isBeginning:true,isEnd:false,translate:0,previousTranslate:0,progress:0,velocity:0,animating:false,allowSlideNext:swiper.params.allowSlideNext,allowSlidePrev:swiper.params.allowSlidePrev,touchEvents:function touchEvents(){var touch=["touchstart","touchmove","touchend","touchcancel"];var desktop=["mousedown","mousemove","mouseup"];if(swiper.support.pointerEvents){desktop=["pointerdown","pointermove","pointerup"]}swiper.touchEventsTouch={start:touch[0],move:touch[1],end:touch[2],cancel:touch[3]};swiper.touchEventsDesktop={start:desktop[0],move:desktop[1],end:desktop[2]};return swiper.support.touch||!swiper.params.simulateTouch?swiper.touchEventsTouch:swiper.touchEventsDesktop}(),touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:swiper.params.focusableElements,lastClickTime:now(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,isTouchEvent:void 0,startMoving:void 0},allowClick:true,allowTouchMove:swiper.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0});swiper.useModules();swiper.emit("_swiper");if(swiper.params.init){swiper.init()}return swiper}var _proto=Swiper2.prototype;_proto.enable=function enable(){var swiper=this;if(swiper.enabled)return;swiper.enabled=true;if(swiper.params.grabCursor){swiper.setGrabCursor()}swiper.emit("enable")};_proto.disable=function disable(){var swiper=this;if(!swiper.enabled)return;swiper.enabled=false;if(swiper.params.grabCursor){swiper.unsetGrabCursor()}swiper.emit("disable")};_proto.setProgress=function setProgress(progress,speed){var swiper=this;progress=Math.min(Math.max(progress,0),1);var min=swiper.minTranslate();var max=swiper.maxTranslate();var current=(max-min)*progress+min;swiper.translateTo(current,typeof speed==="undefined"?0:speed);swiper.updateActiveIndex();swiper.updateSlidesClasses()};_proto.emitContainerClasses=function emitContainerClasses(){var swiper=this;if(!swiper.params._emitClasses||!swiper.el)return;var classes=swiper.el.className.split(" ").filter(function(className){return className.indexOf("swiper-container")===0||className.indexOf(swiper.params.containerModifierClass)===0});swiper.emit("_containerClasses",classes.join(" "))};_proto.getSlideClasses=function getSlideClasses(slideEl){var swiper=this;return slideEl.className.split(" ").filter(function(className){return className.indexOf("swiper-slide")===0||className.indexOf(swiper.params.slideClass)===0}).join(" ")};_proto.emitSlidesClasses=function emitSlidesClasses(){var swiper=this;if(!swiper.params._emitClasses||!swiper.el)return;var updates=[];swiper.slides.each(function(slideEl){var classNames=swiper.getSlideClasses(slideEl);updates.push({slideEl,classNames});swiper.emit("_slideClass",slideEl,classNames)});swiper.emit("_slideClasses",updates)};_proto.slidesPerViewDynamic=function slidesPerViewDynamic(){var swiper=this;var params=swiper.params,slides=swiper.slides,slidesGrid=swiper.slidesGrid,swiperSize=swiper.size,activeIndex=swiper.activeIndex;var spv=1;if(params.centeredSlides){var slideSize=slides[activeIndex].swiperSlideSize;var breakLoop;for(var i=activeIndex+1;i<slides.length;i+=1){if(slides[i]&&!breakLoop){slideSize+=slides[i].swiperSlideSize;spv+=1;if(slideSize>swiperSize)breakLoop=true}}for(var _i=activeIndex-1;_i>=0;_i-=1){if(slides[_i]&&!breakLoop){slideSize+=slides[_i].swiperSlideSize;spv+=1;if(slideSize>swiperSize)breakLoop=true}}}else{for(var _i2=activeIndex+1;_i2<slides.length;_i2+=1){if(slidesGrid[_i2]-slidesGrid[activeIndex]<swiperSize){spv+=1}}}return spv};_proto.update=function update2(){var swiper=this;if(!swiper||swiper.destroyed)return;var snapGrid=swiper.snapGrid,params=swiper.params;if(params.breakpoints){swiper.setBreakpoint()}swiper.updateSize();swiper.updateSlides();swiper.updateProgress();swiper.updateSlidesClasses();function setTranslate2(){var translateValue=swiper.rtlTranslate?swiper.translate*-1:swiper.translate;var newTranslate=Math.min(Math.max(translateValue,swiper.maxTranslate()),swiper.minTranslate());swiper.setTranslate(newTranslate);swiper.updateActiveIndex();swiper.updateSlidesClasses()}var translated;if(swiper.params.freeMode){setTranslate2();if(swiper.params.autoHeight){swiper.updateAutoHeight()}}else{if((swiper.params.slidesPerView==="auto"||swiper.params.slidesPerView>1)&&swiper.isEnd&&!swiper.params.centeredSlides){translated=swiper.slideTo(swiper.slides.length-1,0,false,true)}else{translated=swiper.slideTo(swiper.activeIndex,0,false,true)}if(!translated){setTranslate2()}}if(params.watchOverflow&&snapGrid!==swiper.snapGrid){swiper.checkOverflow()}swiper.emit("update")};_proto.changeDirection=function changeDirection(newDirection,needUpdate){if(needUpdate===void 0){needUpdate=true}var swiper=this;var currentDirection=swiper.params.direction;if(!newDirection){newDirection=currentDirection==="horizontal"?"vertical":"horizontal"}if(newDirection===currentDirection||newDirection!=="horizontal"&&newDirection!=="vertical"){return swiper}swiper.$el.removeClass(""+swiper.params.containerModifierClass+currentDirection).addClass(""+swiper.params.containerModifierClass+newDirection);swiper.emitContainerClasses();swiper.params.direction=newDirection;swiper.slides.each(function(slideEl){if(newDirection==="vertical"){slideEl.style.width=""}else{slideEl.style.height=""}});swiper.emit("changeDirection");if(needUpdate)swiper.update();return swiper};_proto.mount=function mount(el){var swiper=this;if(swiper.mounted)return true;var $el=dom_default(el||swiper.params.el);el=$el[0];if(!el){return false}el.swiper=swiper;var getWrapperSelector=function getWrapperSelector2(){return"."+(swiper.params.wrapperClass||"").trim().split(" ").join(".")};var getWrapper=function getWrapper2(){if(el&&el.shadowRoot&&el.shadowRoot.querySelector){var res=dom_default(el.shadowRoot.querySelector(getWrapperSelector()));res.children=function(options){return $el.children(options)};return res}return $el.children(getWrapperSelector())};var $wrapperEl=getWrapper();if($wrapperEl.length===0&&swiper.params.createElements){var document2=getDocument();var wrapper=document2.createElement("div");$wrapperEl=dom_default(wrapper);wrapper.className=swiper.params.wrapperClass;$el.append(wrapper);$el.children("."+swiper.params.slideClass).each(function(slideEl){$wrapperEl.append(slideEl)})}extend2(swiper,{$el,el,$wrapperEl,wrapperEl:$wrapperEl[0],mounted:true,rtl:el.dir.toLowerCase()==="rtl"||$el.css("direction")==="rtl",rtlTranslate:swiper.params.direction==="horizontal"&&(el.dir.toLowerCase()==="rtl"||$el.css("direction")==="rtl"),wrongRTL:$wrapperEl.css("display")==="-webkit-box"});return true};_proto.init=function init6(el){var swiper=this;if(swiper.initialized)return swiper;var mounted=swiper.mount(el);if(mounted===false)return swiper;swiper.emit("beforeInit");if(swiper.params.breakpoints){swiper.setBreakpoint()}swiper.addClasses();if(swiper.params.loop){swiper.loopCreate()}swiper.updateSize();swiper.updateSlides();if(swiper.params.watchOverflow){swiper.checkOverflow()}if(swiper.params.grabCursor&&swiper.enabled){swiper.setGrabCursor()}if(swiper.params.preloadImages){swiper.preloadImages()}if(swiper.params.loop){swiper.slideTo(swiper.params.initialSlide+swiper.loopedSlides,0,swiper.params.runCallbacksOnInit,false,true)}else{swiper.slideTo(swiper.params.initialSlide,0,swiper.params.runCallbacksOnInit,false,true)}swiper.attachEvents();swiper.initialized=true;swiper.emit("init");swiper.emit("afterInit");return swiper};_proto.destroy=function destroy6(deleteInstance,cleanStyles){if(deleteInstance===void 0){deleteInstance=true}if(cleanStyles===void 0){cleanStyles=true}var swiper=this;var params=swiper.params,$el=swiper.$el,$wrapperEl=swiper.$wrapperEl,slides=swiper.slides;if(typeof swiper.params==="undefined"||swiper.destroyed){return null}swiper.emit("beforeDestroy");swiper.initialized=false;swiper.detachEvents();if(params.loop){swiper.loopDestroy()}if(cleanStyles){swiper.removeClasses();$el.removeAttr("style");$wrapperEl.removeAttr("style");if(slides&&slides.length){slides.removeClass([params.slideVisibleClass,params.slideActiveClass,params.slideNextClass,params.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index")}}swiper.emit("destroy");Object.keys(swiper.eventsListeners).forEach(function(eventName){swiper.off(eventName)});if(deleteInstance!==false){swiper.$el[0].swiper=null;deleteProps(swiper)}swiper.destroyed=true;return null};Swiper2.extendDefaults=function extendDefaults(newDefaults){extend2(extendedDefaults,newDefaults)};Swiper2.installModule=function installModule(module){if(!Swiper2.prototype.modules)Swiper2.prototype.modules={};var name=module.name||Object.keys(Swiper2.prototype.modules).length+"_"+now();Swiper2.prototype.modules[name]=module};Swiper2.use=function use(module){if(Array.isArray(module)){module.forEach(function(m){return Swiper2.installModule(m)});return Swiper2}Swiper2.installModule(module);return Swiper2};_createClass(Swiper2,null,[{key:"extendedDefaults",get:function get(){return extendedDefaults}},{key:"defaults",get:function get(){return defaults_default}}]);return Swiper2}();Object.keys(prototypes).forEach(function(prototypeGroup){Object.keys(prototypes[prototypeGroup]).forEach(function(protoMethod){Swiper.prototype[protoMethod]=prototypes[prototypeGroup][protoMethod]})});Swiper.use([resize_default,observer_default]);var core_class_default=Swiper;function _extends2(){_extends2=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return _extends2.apply(this,arguments)}var Navigation={toggleEl:function toggleEl($el,disabled){$el[disabled?"addClass":"removeClass"](this.params.navigation.disabledClass);if($el[0]&&$el[0].tagName==="BUTTON")$el[0].disabled=disabled},update:function update(){var swiper=this;var params=swiper.params.navigation;var toggleEl2=swiper.navigation.toggleEl;if(swiper.params.loop)return;var _swiper$navigation=swiper.navigation,$nextEl=_swiper$navigation.$nextEl,$prevEl=_swiper$navigation.$prevEl;if($prevEl&&$prevEl.length>0){if(swiper.isBeginning){toggleEl2($prevEl,true)}else{toggleEl2($prevEl,false)}if(swiper.params.watchOverflow&&swiper.enabled){$prevEl[swiper.isLocked?"addClass":"removeClass"](params.lockClass)}}if($nextEl&&$nextEl.length>0){if(swiper.isEnd){toggleEl2($nextEl,true)}else{toggleEl2($nextEl,false)}if(swiper.params.watchOverflow&&swiper.enabled){$nextEl[swiper.isLocked?"addClass":"removeClass"](params.lockClass)}}},onPrevClick:function onPrevClick(e){var swiper=this;e.preventDefault();if(swiper.isBeginning&&!swiper.params.loop)return;swiper.slidePrev()},onNextClick:function onNextClick(e){var swiper=this;e.preventDefault();if(swiper.isEnd&&!swiper.params.loop)return;swiper.slideNext()},init:function init4(){var swiper=this;var params=swiper.params.navigation;swiper.params.navigation=createElementIfNotDefined(swiper.$el,swiper.params.navigation,swiper.params.createElements,{nextEl:"swiper-button-next",prevEl:"swiper-button-prev"});if(!(params.nextEl||params.prevEl))return;var $nextEl;var $prevEl;if(params.nextEl){$nextEl=dom_default(params.nextEl);if(swiper.params.uniqueNavElements&&typeof params.nextEl==="string"&&$nextEl.length>1&&swiper.$el.find(params.nextEl).length===1){$nextEl=swiper.$el.find(params.nextEl)}}if(params.prevEl){$prevEl=dom_default(params.prevEl);if(swiper.params.uniqueNavElements&&typeof params.prevEl==="string"&&$prevEl.length>1&&swiper.$el.find(params.prevEl).length===1){$prevEl=swiper.$el.find(params.prevEl)}}if($nextEl&&$nextEl.length>0){$nextEl.on("click",swiper.navigation.onNextClick)}if($prevEl&&$prevEl.length>0){$prevEl.on("click",swiper.navigation.onPrevClick)}extend2(swiper.navigation,{$nextEl,nextEl:$nextEl&&$nextEl[0],$prevEl,prevEl:$prevEl&&$prevEl[0]});if(!swiper.enabled){if($nextEl)$nextEl.addClass(params.lockClass);if($prevEl)$prevEl.addClass(params.lockClass)}},destroy:function destroy4(){var swiper=this;var _swiper$navigation2=swiper.navigation,$nextEl=_swiper$navigation2.$nextEl,$prevEl=_swiper$navigation2.$prevEl;if($nextEl&&$nextEl.length){$nextEl.off("click",swiper.navigation.onNextClick);$nextEl.removeClass(swiper.params.navigation.disabledClass)}if($prevEl&&$prevEl.length){$prevEl.off("click",swiper.navigation.onPrevClick);$prevEl.removeClass(swiper.params.navigation.disabledClass)}}};var navigation_default={name:"navigation",params:{navigation:{nextEl:null,prevEl:null,hideOnClick:false,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock"}},create:function create3(){var swiper=this;bindModuleMethods(swiper,{navigation:_extends2({},Navigation)})},on:{init:function init5(swiper){swiper.navigation.init();swiper.navigation.update()},toEdge:function toEdge(swiper){swiper.navigation.update()},fromEdge:function fromEdge(swiper){swiper.navigation.update()},destroy:function destroy5(swiper){swiper.navigation.destroy()},"enable disable":function enableDisable(swiper){var _swiper$navigation3=swiper.navigation,$nextEl=_swiper$navigation3.$nextEl,$prevEl=_swiper$navigation3.$prevEl;if($nextEl){$nextEl[swiper.enabled?"removeClass":"addClass"](swiper.params.navigation.lockClass)}if($prevEl){$prevEl[swiper.enabled?"removeClass":"addClass"](swiper.params.navigation.lockClass)}},click:function click2(swiper,e){var _swiper$navigation4=swiper.navigation,$nextEl=_swiper$navigation4.$nextEl,$prevEl=_swiper$navigation4.$prevEl;var targetEl=e.target;if(swiper.params.navigation.hideOnClick&&!dom_default(targetEl).is($prevEl)&&!dom_default(targetEl).is($nextEl)){if(swiper.pagination&&swiper.params.pagination&&swiper.params.pagination.clickable&&(swiper.pagination.el===targetEl||swiper.pagination.el.contains(targetEl)))return;var isHidden;if($nextEl){isHidden=$nextEl.hasClass(swiper.params.navigation.hiddenClass)}else if($prevEl){isHidden=$prevEl.hasClass(swiper.params.navigation.hiddenClass)}if(isHidden===true){swiper.emit("navigationShow")}else{swiper.emit("navigationHide")}if($nextEl){$nextEl.toggleClass(swiper.params.navigation.hiddenClass)}if($prevEl){$prevEl.toggleClass(swiper.params.navigation.hiddenClass)}}}}};(0,import_jquery.default)(()=>{(0,import_jquery.default)("[data-toggle-side-popup]").click(function(e){e.preventDefault();let sidePopupID=(0,import_jquery.default)(this).attr("href");let $sidePopup=(0,import_jquery.default)(`${sidePopupID}`);if(!$sidePopup.length)return;$sidePopup.toggleClass("side-popup--opened");(0,import_jquery.default)(document.body).css("overflow","hidden")});(0,import_jquery.default)(".side-popup__close-btn, .side-popup__overlay").click(function(e){(0,import_jquery.default)(this).closest(".side-popup").removeClass("side-popup--opened");(0,import_jquery.default)(document.body).css("overflow","");e.preventDefault()});const portfolioSlider=new core_class_default(".portfolio-slider",{modules:[navigation_default],slidesPerView:1,breakpoints:{768:{slidesPerView:"auto",spaceBetween:30}}});portfolioSlider.on("slideChange",function(){console.log("slide changed")});(0,import_jquery.default)(".client-accordion-panel__short").click(function(e){let $accordionPanel=(0,import_jquery.default)(this).closest(".client-accordion-panel");let $portfolioSlider=$accordionPanel.closest(".portfolio-slider");let slideIndex=$accordionPanel.data("slide-index");let $otherAccordionPanels=$portfolioSlider.find(`.client-accordion-panel`).not(`[data-slide-index="${slideIndex}"]`);console.log($accordionPanel);console.log($otherAccordionPanels);$otherAccordionPanels.removeClass("client-accordion-panel--opened");$accordionPanel.addClass("client-accordion-panel--opened");portfolioSlider.slideTo(slideIndex);e.preventDefault()});(0,import_jquery.default)(".portfolio-slider-section__prev-btn").click(function(event){portfolioSlider.slidePrev()});(0,import_jquery.default)(".portfolio-slider-section__next-btn").click(function(event){portfolioSlider.slideNext()})});})();
//# sourceMappingURL=data:application/json;base64,
